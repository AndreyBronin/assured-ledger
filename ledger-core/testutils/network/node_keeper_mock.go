package network

// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

import (
	"context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"

	"github.com/insolar/assured-ledger/ledger-core/appctl/beat"
	"github.com/insolar/assured-ledger/ledger-core/network/consensus/gcpv2/api/census"
	"github.com/insolar/assured-ledger/ledger-core/network/consensus/gcpv2/api/member"
	"github.com/insolar/assured-ledger/ledger-core/pulse"
	"github.com/insolar/assured-ledger/ledger-core/reference"
)

// NodeKeeperMock implements network.NodeKeeper
type NodeKeeperMock struct {
	t minimock.Tester

	funcAddActivePopulation          func(ctx context.Context, n1 pulse.Number, o1 census.OnlinePopulation)
	inspectFuncAddActivePopulation   func(ctx context.Context, n1 pulse.Number, o1 census.OnlinePopulation)
	afterAddActivePopulationCounter  uint64
	beforeAddActivePopulationCounter uint64
	AddActivePopulationMock          mNodeKeeperMockAddActivePopulation

	funcGetAccessor          func(n1 pulse.Number) (a1 beat.NodeAccessor)
	inspectFuncGetAccessor   func(n1 pulse.Number)
	afterGetAccessorCounter  uint64
	beforeGetAccessorCounter uint64
	GetAccessorMock          mNodeKeeperMockGetAccessor

	funcGetLatestAccessor          func() (a1 beat.NodeAccessor)
	inspectFuncGetLatestAccessor   func()
	afterGetLatestAccessorCounter  uint64
	beforeGetLatestAccessorCounter uint64
	GetLatestAccessorMock          mNodeKeeperMockGetLatestAccessor

	funcGetLocalNodeReference          func() (h1 reference.Holder)
	inspectFuncGetLocalNodeReference   func()
	afterGetLocalNodeReferenceCounter  uint64
	beforeGetLocalNodeReferenceCounter uint64
	GetLocalNodeReferenceMock          mNodeKeeperMockGetLocalNodeReference

	funcGetLocalNodeRole          func() (p1 member.PrimaryRole)
	inspectFuncGetLocalNodeRole   func()
	afterGetLocalNodeRoleCounter  uint64
	beforeGetLocalNodeRoleCounter uint64
	GetLocalNodeRoleMock          mNodeKeeperMockGetLocalNodeRole

	funcSetExpectedPopulation          func(ctx context.Context, n1 pulse.Number, o1 census.OnlinePopulation)
	inspectFuncSetExpectedPopulation   func(ctx context.Context, n1 pulse.Number, o1 census.OnlinePopulation)
	afterSetExpectedPopulationCounter  uint64
	beforeSetExpectedPopulationCounter uint64
	SetExpectedPopulationMock          mNodeKeeperMockSetExpectedPopulation
}

// NewNodeKeeperMock returns a mock for network.NodeKeeper
func NewNodeKeeperMock(t minimock.Tester) *NodeKeeperMock {
	m := &NodeKeeperMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.AddActivePopulationMock = mNodeKeeperMockAddActivePopulation{mock: m}
	m.AddActivePopulationMock.callArgs = []*NodeKeeperMockAddActivePopulationParams{}

	m.GetAccessorMock = mNodeKeeperMockGetAccessor{mock: m}
	m.GetAccessorMock.callArgs = []*NodeKeeperMockGetAccessorParams{}

	m.GetLatestAccessorMock = mNodeKeeperMockGetLatestAccessor{mock: m}

	m.GetLocalNodeReferenceMock = mNodeKeeperMockGetLocalNodeReference{mock: m}

	m.GetLocalNodeRoleMock = mNodeKeeperMockGetLocalNodeRole{mock: m}

	m.SetExpectedPopulationMock = mNodeKeeperMockSetExpectedPopulation{mock: m}
	m.SetExpectedPopulationMock.callArgs = []*NodeKeeperMockSetExpectedPopulationParams{}

	return m
}

type mNodeKeeperMockAddActivePopulation struct {
	mock               *NodeKeeperMock
	defaultExpectation *NodeKeeperMockAddActivePopulationExpectation
	expectations       []*NodeKeeperMockAddActivePopulationExpectation

	callArgs []*NodeKeeperMockAddActivePopulationParams
	mutex    sync.RWMutex
}

// NodeKeeperMockAddActivePopulationExpectation specifies expectation struct of the NodeKeeper.AddActivePopulation
type NodeKeeperMockAddActivePopulationExpectation struct {
	mock   *NodeKeeperMock
	params *NodeKeeperMockAddActivePopulationParams

	Counter uint64
}

// NodeKeeperMockAddActivePopulationParams contains parameters of the NodeKeeper.AddActivePopulation
type NodeKeeperMockAddActivePopulationParams struct {
	ctx context.Context
	n1  pulse.Number
	o1  census.OnlinePopulation
}

// Expect sets up expected params for NodeKeeper.AddActivePopulation
func (mmAddActivePopulation *mNodeKeeperMockAddActivePopulation) Expect(ctx context.Context, n1 pulse.Number, o1 census.OnlinePopulation) *mNodeKeeperMockAddActivePopulation {
	if mmAddActivePopulation.mock.funcAddActivePopulation != nil {
		mmAddActivePopulation.mock.t.Fatalf("NodeKeeperMock.AddActivePopulation mock is already set by Set")
	}

	if mmAddActivePopulation.defaultExpectation == nil {
		mmAddActivePopulation.defaultExpectation = &NodeKeeperMockAddActivePopulationExpectation{}
	}

	mmAddActivePopulation.defaultExpectation.params = &NodeKeeperMockAddActivePopulationParams{ctx, n1, o1}
	for _, e := range mmAddActivePopulation.expectations {
		if minimock.Equal(e.params, mmAddActivePopulation.defaultExpectation.params) {
			mmAddActivePopulation.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmAddActivePopulation.defaultExpectation.params)
		}
	}

	return mmAddActivePopulation
}

// Inspect accepts an inspector function that has same arguments as the NodeKeeper.AddActivePopulation
func (mmAddActivePopulation *mNodeKeeperMockAddActivePopulation) Inspect(f func(ctx context.Context, n1 pulse.Number, o1 census.OnlinePopulation)) *mNodeKeeperMockAddActivePopulation {
	if mmAddActivePopulation.mock.inspectFuncAddActivePopulation != nil {
		mmAddActivePopulation.mock.t.Fatalf("Inspect function is already set for NodeKeeperMock.AddActivePopulation")
	}

	mmAddActivePopulation.mock.inspectFuncAddActivePopulation = f

	return mmAddActivePopulation
}

// Return sets up results that will be returned by NodeKeeper.AddActivePopulation
func (mmAddActivePopulation *mNodeKeeperMockAddActivePopulation) Return() *NodeKeeperMock {
	if mmAddActivePopulation.mock.funcAddActivePopulation != nil {
		mmAddActivePopulation.mock.t.Fatalf("NodeKeeperMock.AddActivePopulation mock is already set by Set")
	}

	if mmAddActivePopulation.defaultExpectation == nil {
		mmAddActivePopulation.defaultExpectation = &NodeKeeperMockAddActivePopulationExpectation{mock: mmAddActivePopulation.mock}
	}

	return mmAddActivePopulation.mock
}

//Set uses given function f to mock the NodeKeeper.AddActivePopulation method
func (mmAddActivePopulation *mNodeKeeperMockAddActivePopulation) Set(f func(ctx context.Context, n1 pulse.Number, o1 census.OnlinePopulation)) *NodeKeeperMock {
	if mmAddActivePopulation.defaultExpectation != nil {
		mmAddActivePopulation.mock.t.Fatalf("Default expectation is already set for the NodeKeeper.AddActivePopulation method")
	}

	if len(mmAddActivePopulation.expectations) > 0 {
		mmAddActivePopulation.mock.t.Fatalf("Some expectations are already set for the NodeKeeper.AddActivePopulation method")
	}

	mmAddActivePopulation.mock.funcAddActivePopulation = f
	return mmAddActivePopulation.mock
}

// AddActivePopulation implements network.NodeKeeper
func (mmAddActivePopulation *NodeKeeperMock) AddActivePopulation(ctx context.Context, n1 pulse.Number, o1 census.OnlinePopulation) {
	mm_atomic.AddUint64(&mmAddActivePopulation.beforeAddActivePopulationCounter, 1)
	defer mm_atomic.AddUint64(&mmAddActivePopulation.afterAddActivePopulationCounter, 1)

	if mmAddActivePopulation.inspectFuncAddActivePopulation != nil {
		mmAddActivePopulation.inspectFuncAddActivePopulation(ctx, n1, o1)
	}

	mm_params := &NodeKeeperMockAddActivePopulationParams{ctx, n1, o1}

	// Record call args
	mmAddActivePopulation.AddActivePopulationMock.mutex.Lock()
	mmAddActivePopulation.AddActivePopulationMock.callArgs = append(mmAddActivePopulation.AddActivePopulationMock.callArgs, mm_params)
	mmAddActivePopulation.AddActivePopulationMock.mutex.Unlock()

	for _, e := range mmAddActivePopulation.AddActivePopulationMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return
		}
	}

	if mmAddActivePopulation.AddActivePopulationMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmAddActivePopulation.AddActivePopulationMock.defaultExpectation.Counter, 1)
		mm_want := mmAddActivePopulation.AddActivePopulationMock.defaultExpectation.params
		mm_got := NodeKeeperMockAddActivePopulationParams{ctx, n1, o1}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmAddActivePopulation.t.Errorf("NodeKeeperMock.AddActivePopulation got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		return

	}
	if mmAddActivePopulation.funcAddActivePopulation != nil {
		mmAddActivePopulation.funcAddActivePopulation(ctx, n1, o1)
		return
	}
	mmAddActivePopulation.t.Fatalf("Unexpected call to NodeKeeperMock.AddActivePopulation. %v %v %v", ctx, n1, o1)

}

// AddActivePopulationAfterCounter returns a count of finished NodeKeeperMock.AddActivePopulation invocations
func (mmAddActivePopulation *NodeKeeperMock) AddActivePopulationAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmAddActivePopulation.afterAddActivePopulationCounter)
}

// AddActivePopulationBeforeCounter returns a count of NodeKeeperMock.AddActivePopulation invocations
func (mmAddActivePopulation *NodeKeeperMock) AddActivePopulationBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmAddActivePopulation.beforeAddActivePopulationCounter)
}

// Calls returns a list of arguments used in each call to NodeKeeperMock.AddActivePopulation.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmAddActivePopulation *mNodeKeeperMockAddActivePopulation) Calls() []*NodeKeeperMockAddActivePopulationParams {
	mmAddActivePopulation.mutex.RLock()

	argCopy := make([]*NodeKeeperMockAddActivePopulationParams, len(mmAddActivePopulation.callArgs))
	copy(argCopy, mmAddActivePopulation.callArgs)

	mmAddActivePopulation.mutex.RUnlock()

	return argCopy
}

// MinimockAddActivePopulationDone returns true if the count of the AddActivePopulation invocations corresponds
// the number of defined expectations
func (m *NodeKeeperMock) MinimockAddActivePopulationDone() bool {
	for _, e := range m.AddActivePopulationMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.AddActivePopulationMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterAddActivePopulationCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcAddActivePopulation != nil && mm_atomic.LoadUint64(&m.afterAddActivePopulationCounter) < 1 {
		return false
	}
	return true
}

// MinimockAddActivePopulationInspect logs each unmet expectation
func (m *NodeKeeperMock) MinimockAddActivePopulationInspect() {
	for _, e := range m.AddActivePopulationMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to NodeKeeperMock.AddActivePopulation with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.AddActivePopulationMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterAddActivePopulationCounter) < 1 {
		if m.AddActivePopulationMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to NodeKeeperMock.AddActivePopulation")
		} else {
			m.t.Errorf("Expected call to NodeKeeperMock.AddActivePopulation with params: %#v", *m.AddActivePopulationMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcAddActivePopulation != nil && mm_atomic.LoadUint64(&m.afterAddActivePopulationCounter) < 1 {
		m.t.Error("Expected call to NodeKeeperMock.AddActivePopulation")
	}
}

type mNodeKeeperMockGetAccessor struct {
	mock               *NodeKeeperMock
	defaultExpectation *NodeKeeperMockGetAccessorExpectation
	expectations       []*NodeKeeperMockGetAccessorExpectation

	callArgs []*NodeKeeperMockGetAccessorParams
	mutex    sync.RWMutex
}

// NodeKeeperMockGetAccessorExpectation specifies expectation struct of the NodeKeeper.GetAccessor
type NodeKeeperMockGetAccessorExpectation struct {
	mock    *NodeKeeperMock
	params  *NodeKeeperMockGetAccessorParams
	results *NodeKeeperMockGetAccessorResults
	Counter uint64
}

// NodeKeeperMockGetAccessorParams contains parameters of the NodeKeeper.GetAccessor
type NodeKeeperMockGetAccessorParams struct {
	n1 pulse.Number
}

// NodeKeeperMockGetAccessorResults contains results of the NodeKeeper.GetAccessor
type NodeKeeperMockGetAccessorResults struct {
	a1 beat.NodeAccessor
}

// Expect sets up expected params for NodeKeeper.GetAccessor
func (mmGetAccessor *mNodeKeeperMockGetAccessor) Expect(n1 pulse.Number) *mNodeKeeperMockGetAccessor {
	if mmGetAccessor.mock.funcGetAccessor != nil {
		mmGetAccessor.mock.t.Fatalf("NodeKeeperMock.GetAccessor mock is already set by Set")
	}

	if mmGetAccessor.defaultExpectation == nil {
		mmGetAccessor.defaultExpectation = &NodeKeeperMockGetAccessorExpectation{}
	}

	mmGetAccessor.defaultExpectation.params = &NodeKeeperMockGetAccessorParams{n1}
	for _, e := range mmGetAccessor.expectations {
		if minimock.Equal(e.params, mmGetAccessor.defaultExpectation.params) {
			mmGetAccessor.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGetAccessor.defaultExpectation.params)
		}
	}

	return mmGetAccessor
}

// Inspect accepts an inspector function that has same arguments as the NodeKeeper.GetAccessor
func (mmGetAccessor *mNodeKeeperMockGetAccessor) Inspect(f func(n1 pulse.Number)) *mNodeKeeperMockGetAccessor {
	if mmGetAccessor.mock.inspectFuncGetAccessor != nil {
		mmGetAccessor.mock.t.Fatalf("Inspect function is already set for NodeKeeperMock.GetAccessor")
	}

	mmGetAccessor.mock.inspectFuncGetAccessor = f

	return mmGetAccessor
}

// Return sets up results that will be returned by NodeKeeper.GetAccessor
func (mmGetAccessor *mNodeKeeperMockGetAccessor) Return(a1 beat.NodeAccessor) *NodeKeeperMock {
	if mmGetAccessor.mock.funcGetAccessor != nil {
		mmGetAccessor.mock.t.Fatalf("NodeKeeperMock.GetAccessor mock is already set by Set")
	}

	if mmGetAccessor.defaultExpectation == nil {
		mmGetAccessor.defaultExpectation = &NodeKeeperMockGetAccessorExpectation{mock: mmGetAccessor.mock}
	}
	mmGetAccessor.defaultExpectation.results = &NodeKeeperMockGetAccessorResults{a1}
	return mmGetAccessor.mock
}

//Set uses given function f to mock the NodeKeeper.GetAccessor method
func (mmGetAccessor *mNodeKeeperMockGetAccessor) Set(f func(n1 pulse.Number) (a1 beat.NodeAccessor)) *NodeKeeperMock {
	if mmGetAccessor.defaultExpectation != nil {
		mmGetAccessor.mock.t.Fatalf("Default expectation is already set for the NodeKeeper.GetAccessor method")
	}

	if len(mmGetAccessor.expectations) > 0 {
		mmGetAccessor.mock.t.Fatalf("Some expectations are already set for the NodeKeeper.GetAccessor method")
	}

	mmGetAccessor.mock.funcGetAccessor = f
	return mmGetAccessor.mock
}

// When sets expectation for the NodeKeeper.GetAccessor which will trigger the result defined by the following
// Then helper
func (mmGetAccessor *mNodeKeeperMockGetAccessor) When(n1 pulse.Number) *NodeKeeperMockGetAccessorExpectation {
	if mmGetAccessor.mock.funcGetAccessor != nil {
		mmGetAccessor.mock.t.Fatalf("NodeKeeperMock.GetAccessor mock is already set by Set")
	}

	expectation := &NodeKeeperMockGetAccessorExpectation{
		mock:   mmGetAccessor.mock,
		params: &NodeKeeperMockGetAccessorParams{n1},
	}
	mmGetAccessor.expectations = append(mmGetAccessor.expectations, expectation)
	return expectation
}

// Then sets up NodeKeeper.GetAccessor return parameters for the expectation previously defined by the When method
func (e *NodeKeeperMockGetAccessorExpectation) Then(a1 beat.NodeAccessor) *NodeKeeperMock {
	e.results = &NodeKeeperMockGetAccessorResults{a1}
	return e.mock
}

// GetAccessor implements network.NodeKeeper
func (mmGetAccessor *NodeKeeperMock) GetAccessor(n1 pulse.Number) (a1 beat.NodeAccessor) {
	mm_atomic.AddUint64(&mmGetAccessor.beforeGetAccessorCounter, 1)
	defer mm_atomic.AddUint64(&mmGetAccessor.afterGetAccessorCounter, 1)

	if mmGetAccessor.inspectFuncGetAccessor != nil {
		mmGetAccessor.inspectFuncGetAccessor(n1)
	}

	mm_params := &NodeKeeperMockGetAccessorParams{n1}

	// Record call args
	mmGetAccessor.GetAccessorMock.mutex.Lock()
	mmGetAccessor.GetAccessorMock.callArgs = append(mmGetAccessor.GetAccessorMock.callArgs, mm_params)
	mmGetAccessor.GetAccessorMock.mutex.Unlock()

	for _, e := range mmGetAccessor.GetAccessorMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.a1
		}
	}

	if mmGetAccessor.GetAccessorMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetAccessor.GetAccessorMock.defaultExpectation.Counter, 1)
		mm_want := mmGetAccessor.GetAccessorMock.defaultExpectation.params
		mm_got := NodeKeeperMockGetAccessorParams{n1}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGetAccessor.t.Errorf("NodeKeeperMock.GetAccessor got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGetAccessor.GetAccessorMock.defaultExpectation.results
		if mm_results == nil {
			mmGetAccessor.t.Fatal("No results are set for the NodeKeeperMock.GetAccessor")
		}
		return (*mm_results).a1
	}
	if mmGetAccessor.funcGetAccessor != nil {
		return mmGetAccessor.funcGetAccessor(n1)
	}
	mmGetAccessor.t.Fatalf("Unexpected call to NodeKeeperMock.GetAccessor. %v", n1)
	return
}

// GetAccessorAfterCounter returns a count of finished NodeKeeperMock.GetAccessor invocations
func (mmGetAccessor *NodeKeeperMock) GetAccessorAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetAccessor.afterGetAccessorCounter)
}

// GetAccessorBeforeCounter returns a count of NodeKeeperMock.GetAccessor invocations
func (mmGetAccessor *NodeKeeperMock) GetAccessorBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetAccessor.beforeGetAccessorCounter)
}

// Calls returns a list of arguments used in each call to NodeKeeperMock.GetAccessor.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGetAccessor *mNodeKeeperMockGetAccessor) Calls() []*NodeKeeperMockGetAccessorParams {
	mmGetAccessor.mutex.RLock()

	argCopy := make([]*NodeKeeperMockGetAccessorParams, len(mmGetAccessor.callArgs))
	copy(argCopy, mmGetAccessor.callArgs)

	mmGetAccessor.mutex.RUnlock()

	return argCopy
}

// MinimockGetAccessorDone returns true if the count of the GetAccessor invocations corresponds
// the number of defined expectations
func (m *NodeKeeperMock) MinimockGetAccessorDone() bool {
	for _, e := range m.GetAccessorMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetAccessorMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetAccessorCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetAccessor != nil && mm_atomic.LoadUint64(&m.afterGetAccessorCounter) < 1 {
		return false
	}
	return true
}

// MinimockGetAccessorInspect logs each unmet expectation
func (m *NodeKeeperMock) MinimockGetAccessorInspect() {
	for _, e := range m.GetAccessorMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to NodeKeeperMock.GetAccessor with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetAccessorMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetAccessorCounter) < 1 {
		if m.GetAccessorMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to NodeKeeperMock.GetAccessor")
		} else {
			m.t.Errorf("Expected call to NodeKeeperMock.GetAccessor with params: %#v", *m.GetAccessorMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetAccessor != nil && mm_atomic.LoadUint64(&m.afterGetAccessorCounter) < 1 {
		m.t.Error("Expected call to NodeKeeperMock.GetAccessor")
	}
}

type mNodeKeeperMockGetLatestAccessor struct {
	mock               *NodeKeeperMock
	defaultExpectation *NodeKeeperMockGetLatestAccessorExpectation
	expectations       []*NodeKeeperMockGetLatestAccessorExpectation
}

// NodeKeeperMockGetLatestAccessorExpectation specifies expectation struct of the NodeKeeper.GetLatestAccessor
type NodeKeeperMockGetLatestAccessorExpectation struct {
	mock *NodeKeeperMock

	results *NodeKeeperMockGetLatestAccessorResults
	Counter uint64
}

// NodeKeeperMockGetLatestAccessorResults contains results of the NodeKeeper.GetLatestAccessor
type NodeKeeperMockGetLatestAccessorResults struct {
	a1 beat.NodeAccessor
}

// Expect sets up expected params for NodeKeeper.GetLatestAccessor
func (mmGetLatestAccessor *mNodeKeeperMockGetLatestAccessor) Expect() *mNodeKeeperMockGetLatestAccessor {
	if mmGetLatestAccessor.mock.funcGetLatestAccessor != nil {
		mmGetLatestAccessor.mock.t.Fatalf("NodeKeeperMock.GetLatestAccessor mock is already set by Set")
	}

	if mmGetLatestAccessor.defaultExpectation == nil {
		mmGetLatestAccessor.defaultExpectation = &NodeKeeperMockGetLatestAccessorExpectation{}
	}

	return mmGetLatestAccessor
}

// Inspect accepts an inspector function that has same arguments as the NodeKeeper.GetLatestAccessor
func (mmGetLatestAccessor *mNodeKeeperMockGetLatestAccessor) Inspect(f func()) *mNodeKeeperMockGetLatestAccessor {
	if mmGetLatestAccessor.mock.inspectFuncGetLatestAccessor != nil {
		mmGetLatestAccessor.mock.t.Fatalf("Inspect function is already set for NodeKeeperMock.GetLatestAccessor")
	}

	mmGetLatestAccessor.mock.inspectFuncGetLatestAccessor = f

	return mmGetLatestAccessor
}

// Return sets up results that will be returned by NodeKeeper.GetLatestAccessor
func (mmGetLatestAccessor *mNodeKeeperMockGetLatestAccessor) Return(a1 beat.NodeAccessor) *NodeKeeperMock {
	if mmGetLatestAccessor.mock.funcGetLatestAccessor != nil {
		mmGetLatestAccessor.mock.t.Fatalf("NodeKeeperMock.GetLatestAccessor mock is already set by Set")
	}

	if mmGetLatestAccessor.defaultExpectation == nil {
		mmGetLatestAccessor.defaultExpectation = &NodeKeeperMockGetLatestAccessorExpectation{mock: mmGetLatestAccessor.mock}
	}
	mmGetLatestAccessor.defaultExpectation.results = &NodeKeeperMockGetLatestAccessorResults{a1}
	return mmGetLatestAccessor.mock
}

//Set uses given function f to mock the NodeKeeper.GetLatestAccessor method
func (mmGetLatestAccessor *mNodeKeeperMockGetLatestAccessor) Set(f func() (a1 beat.NodeAccessor)) *NodeKeeperMock {
	if mmGetLatestAccessor.defaultExpectation != nil {
		mmGetLatestAccessor.mock.t.Fatalf("Default expectation is already set for the NodeKeeper.GetLatestAccessor method")
	}

	if len(mmGetLatestAccessor.expectations) > 0 {
		mmGetLatestAccessor.mock.t.Fatalf("Some expectations are already set for the NodeKeeper.GetLatestAccessor method")
	}

	mmGetLatestAccessor.mock.funcGetLatestAccessor = f
	return mmGetLatestAccessor.mock
}

// GetLatestAccessor implements network.NodeKeeper
func (mmGetLatestAccessor *NodeKeeperMock) GetLatestAccessor() (a1 beat.NodeAccessor) {
	mm_atomic.AddUint64(&mmGetLatestAccessor.beforeGetLatestAccessorCounter, 1)
	defer mm_atomic.AddUint64(&mmGetLatestAccessor.afterGetLatestAccessorCounter, 1)

	if mmGetLatestAccessor.inspectFuncGetLatestAccessor != nil {
		mmGetLatestAccessor.inspectFuncGetLatestAccessor()
	}

	if mmGetLatestAccessor.GetLatestAccessorMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetLatestAccessor.GetLatestAccessorMock.defaultExpectation.Counter, 1)

		mm_results := mmGetLatestAccessor.GetLatestAccessorMock.defaultExpectation.results
		if mm_results == nil {
			mmGetLatestAccessor.t.Fatal("No results are set for the NodeKeeperMock.GetLatestAccessor")
		}
		return (*mm_results).a1
	}
	if mmGetLatestAccessor.funcGetLatestAccessor != nil {
		return mmGetLatestAccessor.funcGetLatestAccessor()
	}
	mmGetLatestAccessor.t.Fatalf("Unexpected call to NodeKeeperMock.GetLatestAccessor.")
	return
}

// GetLatestAccessorAfterCounter returns a count of finished NodeKeeperMock.GetLatestAccessor invocations
func (mmGetLatestAccessor *NodeKeeperMock) GetLatestAccessorAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetLatestAccessor.afterGetLatestAccessorCounter)
}

// GetLatestAccessorBeforeCounter returns a count of NodeKeeperMock.GetLatestAccessor invocations
func (mmGetLatestAccessor *NodeKeeperMock) GetLatestAccessorBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetLatestAccessor.beforeGetLatestAccessorCounter)
}

// MinimockGetLatestAccessorDone returns true if the count of the GetLatestAccessor invocations corresponds
// the number of defined expectations
func (m *NodeKeeperMock) MinimockGetLatestAccessorDone() bool {
	for _, e := range m.GetLatestAccessorMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetLatestAccessorMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetLatestAccessorCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetLatestAccessor != nil && mm_atomic.LoadUint64(&m.afterGetLatestAccessorCounter) < 1 {
		return false
	}
	return true
}

// MinimockGetLatestAccessorInspect logs each unmet expectation
func (m *NodeKeeperMock) MinimockGetLatestAccessorInspect() {
	for _, e := range m.GetLatestAccessorMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Error("Expected call to NodeKeeperMock.GetLatestAccessor")
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetLatestAccessorMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetLatestAccessorCounter) < 1 {
		m.t.Error("Expected call to NodeKeeperMock.GetLatestAccessor")
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetLatestAccessor != nil && mm_atomic.LoadUint64(&m.afterGetLatestAccessorCounter) < 1 {
		m.t.Error("Expected call to NodeKeeperMock.GetLatestAccessor")
	}
}

type mNodeKeeperMockGetLocalNodeReference struct {
	mock               *NodeKeeperMock
	defaultExpectation *NodeKeeperMockGetLocalNodeReferenceExpectation
	expectations       []*NodeKeeperMockGetLocalNodeReferenceExpectation
}

// NodeKeeperMockGetLocalNodeReferenceExpectation specifies expectation struct of the NodeKeeper.GetLocalNodeReference
type NodeKeeperMockGetLocalNodeReferenceExpectation struct {
	mock *NodeKeeperMock

	results *NodeKeeperMockGetLocalNodeReferenceResults
	Counter uint64
}

// NodeKeeperMockGetLocalNodeReferenceResults contains results of the NodeKeeper.GetLocalNodeReference
type NodeKeeperMockGetLocalNodeReferenceResults struct {
	h1 reference.Holder
}

// Expect sets up expected params for NodeKeeper.GetLocalNodeReference
func (mmGetLocalNodeReference *mNodeKeeperMockGetLocalNodeReference) Expect() *mNodeKeeperMockGetLocalNodeReference {
	if mmGetLocalNodeReference.mock.funcGetLocalNodeReference != nil {
		mmGetLocalNodeReference.mock.t.Fatalf("NodeKeeperMock.GetLocalNodeReference mock is already set by Set")
	}

	if mmGetLocalNodeReference.defaultExpectation == nil {
		mmGetLocalNodeReference.defaultExpectation = &NodeKeeperMockGetLocalNodeReferenceExpectation{}
	}

	return mmGetLocalNodeReference
}

// Inspect accepts an inspector function that has same arguments as the NodeKeeper.GetLocalNodeReference
func (mmGetLocalNodeReference *mNodeKeeperMockGetLocalNodeReference) Inspect(f func()) *mNodeKeeperMockGetLocalNodeReference {
	if mmGetLocalNodeReference.mock.inspectFuncGetLocalNodeReference != nil {
		mmGetLocalNodeReference.mock.t.Fatalf("Inspect function is already set for NodeKeeperMock.GetLocalNodeReference")
	}

	mmGetLocalNodeReference.mock.inspectFuncGetLocalNodeReference = f

	return mmGetLocalNodeReference
}

// Return sets up results that will be returned by NodeKeeper.GetLocalNodeReference
func (mmGetLocalNodeReference *mNodeKeeperMockGetLocalNodeReference) Return(h1 reference.Holder) *NodeKeeperMock {
	if mmGetLocalNodeReference.mock.funcGetLocalNodeReference != nil {
		mmGetLocalNodeReference.mock.t.Fatalf("NodeKeeperMock.GetLocalNodeReference mock is already set by Set")
	}

	if mmGetLocalNodeReference.defaultExpectation == nil {
		mmGetLocalNodeReference.defaultExpectation = &NodeKeeperMockGetLocalNodeReferenceExpectation{mock: mmGetLocalNodeReference.mock}
	}
	mmGetLocalNodeReference.defaultExpectation.results = &NodeKeeperMockGetLocalNodeReferenceResults{h1}
	return mmGetLocalNodeReference.mock
}

//Set uses given function f to mock the NodeKeeper.GetLocalNodeReference method
func (mmGetLocalNodeReference *mNodeKeeperMockGetLocalNodeReference) Set(f func() (h1 reference.Holder)) *NodeKeeperMock {
	if mmGetLocalNodeReference.defaultExpectation != nil {
		mmGetLocalNodeReference.mock.t.Fatalf("Default expectation is already set for the NodeKeeper.GetLocalNodeReference method")
	}

	if len(mmGetLocalNodeReference.expectations) > 0 {
		mmGetLocalNodeReference.mock.t.Fatalf("Some expectations are already set for the NodeKeeper.GetLocalNodeReference method")
	}

	mmGetLocalNodeReference.mock.funcGetLocalNodeReference = f
	return mmGetLocalNodeReference.mock
}

// GetLocalNodeReference implements network.NodeKeeper
func (mmGetLocalNodeReference *NodeKeeperMock) GetLocalNodeReference() (h1 reference.Holder) {
	mm_atomic.AddUint64(&mmGetLocalNodeReference.beforeGetLocalNodeReferenceCounter, 1)
	defer mm_atomic.AddUint64(&mmGetLocalNodeReference.afterGetLocalNodeReferenceCounter, 1)

	if mmGetLocalNodeReference.inspectFuncGetLocalNodeReference != nil {
		mmGetLocalNodeReference.inspectFuncGetLocalNodeReference()
	}

	if mmGetLocalNodeReference.GetLocalNodeReferenceMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetLocalNodeReference.GetLocalNodeReferenceMock.defaultExpectation.Counter, 1)

		mm_results := mmGetLocalNodeReference.GetLocalNodeReferenceMock.defaultExpectation.results
		if mm_results == nil {
			mmGetLocalNodeReference.t.Fatal("No results are set for the NodeKeeperMock.GetLocalNodeReference")
		}
		return (*mm_results).h1
	}
	if mmGetLocalNodeReference.funcGetLocalNodeReference != nil {
		return mmGetLocalNodeReference.funcGetLocalNodeReference()
	}
	mmGetLocalNodeReference.t.Fatalf("Unexpected call to NodeKeeperMock.GetLocalNodeReference.")
	return
}

// GetLocalNodeReferenceAfterCounter returns a count of finished NodeKeeperMock.GetLocalNodeReference invocations
func (mmGetLocalNodeReference *NodeKeeperMock) GetLocalNodeReferenceAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetLocalNodeReference.afterGetLocalNodeReferenceCounter)
}

// GetLocalNodeReferenceBeforeCounter returns a count of NodeKeeperMock.GetLocalNodeReference invocations
func (mmGetLocalNodeReference *NodeKeeperMock) GetLocalNodeReferenceBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetLocalNodeReference.beforeGetLocalNodeReferenceCounter)
}

// MinimockGetLocalNodeReferenceDone returns true if the count of the GetLocalNodeReference invocations corresponds
// the number of defined expectations
func (m *NodeKeeperMock) MinimockGetLocalNodeReferenceDone() bool {
	for _, e := range m.GetLocalNodeReferenceMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetLocalNodeReferenceMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetLocalNodeReferenceCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetLocalNodeReference != nil && mm_atomic.LoadUint64(&m.afterGetLocalNodeReferenceCounter) < 1 {
		return false
	}
	return true
}

// MinimockGetLocalNodeReferenceInspect logs each unmet expectation
func (m *NodeKeeperMock) MinimockGetLocalNodeReferenceInspect() {
	for _, e := range m.GetLocalNodeReferenceMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Error("Expected call to NodeKeeperMock.GetLocalNodeReference")
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetLocalNodeReferenceMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetLocalNodeReferenceCounter) < 1 {
		m.t.Error("Expected call to NodeKeeperMock.GetLocalNodeReference")
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetLocalNodeReference != nil && mm_atomic.LoadUint64(&m.afterGetLocalNodeReferenceCounter) < 1 {
		m.t.Error("Expected call to NodeKeeperMock.GetLocalNodeReference")
	}
}

type mNodeKeeperMockGetLocalNodeRole struct {
	mock               *NodeKeeperMock
	defaultExpectation *NodeKeeperMockGetLocalNodeRoleExpectation
	expectations       []*NodeKeeperMockGetLocalNodeRoleExpectation
}

// NodeKeeperMockGetLocalNodeRoleExpectation specifies expectation struct of the NodeKeeper.GetLocalNodeRole
type NodeKeeperMockGetLocalNodeRoleExpectation struct {
	mock *NodeKeeperMock

	results *NodeKeeperMockGetLocalNodeRoleResults
	Counter uint64
}

// NodeKeeperMockGetLocalNodeRoleResults contains results of the NodeKeeper.GetLocalNodeRole
type NodeKeeperMockGetLocalNodeRoleResults struct {
	p1 member.PrimaryRole
}

// Expect sets up expected params for NodeKeeper.GetLocalNodeRole
func (mmGetLocalNodeRole *mNodeKeeperMockGetLocalNodeRole) Expect() *mNodeKeeperMockGetLocalNodeRole {
	if mmGetLocalNodeRole.mock.funcGetLocalNodeRole != nil {
		mmGetLocalNodeRole.mock.t.Fatalf("NodeKeeperMock.GetLocalNodeRole mock is already set by Set")
	}

	if mmGetLocalNodeRole.defaultExpectation == nil {
		mmGetLocalNodeRole.defaultExpectation = &NodeKeeperMockGetLocalNodeRoleExpectation{}
	}

	return mmGetLocalNodeRole
}

// Inspect accepts an inspector function that has same arguments as the NodeKeeper.GetLocalNodeRole
func (mmGetLocalNodeRole *mNodeKeeperMockGetLocalNodeRole) Inspect(f func()) *mNodeKeeperMockGetLocalNodeRole {
	if mmGetLocalNodeRole.mock.inspectFuncGetLocalNodeRole != nil {
		mmGetLocalNodeRole.mock.t.Fatalf("Inspect function is already set for NodeKeeperMock.GetLocalNodeRole")
	}

	mmGetLocalNodeRole.mock.inspectFuncGetLocalNodeRole = f

	return mmGetLocalNodeRole
}

// Return sets up results that will be returned by NodeKeeper.GetLocalNodeRole
func (mmGetLocalNodeRole *mNodeKeeperMockGetLocalNodeRole) Return(p1 member.PrimaryRole) *NodeKeeperMock {
	if mmGetLocalNodeRole.mock.funcGetLocalNodeRole != nil {
		mmGetLocalNodeRole.mock.t.Fatalf("NodeKeeperMock.GetLocalNodeRole mock is already set by Set")
	}

	if mmGetLocalNodeRole.defaultExpectation == nil {
		mmGetLocalNodeRole.defaultExpectation = &NodeKeeperMockGetLocalNodeRoleExpectation{mock: mmGetLocalNodeRole.mock}
	}
	mmGetLocalNodeRole.defaultExpectation.results = &NodeKeeperMockGetLocalNodeRoleResults{p1}
	return mmGetLocalNodeRole.mock
}

//Set uses given function f to mock the NodeKeeper.GetLocalNodeRole method
func (mmGetLocalNodeRole *mNodeKeeperMockGetLocalNodeRole) Set(f func() (p1 member.PrimaryRole)) *NodeKeeperMock {
	if mmGetLocalNodeRole.defaultExpectation != nil {
		mmGetLocalNodeRole.mock.t.Fatalf("Default expectation is already set for the NodeKeeper.GetLocalNodeRole method")
	}

	if len(mmGetLocalNodeRole.expectations) > 0 {
		mmGetLocalNodeRole.mock.t.Fatalf("Some expectations are already set for the NodeKeeper.GetLocalNodeRole method")
	}

	mmGetLocalNodeRole.mock.funcGetLocalNodeRole = f
	return mmGetLocalNodeRole.mock
}

// GetLocalNodeRole implements network.NodeKeeper
func (mmGetLocalNodeRole *NodeKeeperMock) GetLocalNodeRole() (p1 member.PrimaryRole) {
	mm_atomic.AddUint64(&mmGetLocalNodeRole.beforeGetLocalNodeRoleCounter, 1)
	defer mm_atomic.AddUint64(&mmGetLocalNodeRole.afterGetLocalNodeRoleCounter, 1)

	if mmGetLocalNodeRole.inspectFuncGetLocalNodeRole != nil {
		mmGetLocalNodeRole.inspectFuncGetLocalNodeRole()
	}

	if mmGetLocalNodeRole.GetLocalNodeRoleMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetLocalNodeRole.GetLocalNodeRoleMock.defaultExpectation.Counter, 1)

		mm_results := mmGetLocalNodeRole.GetLocalNodeRoleMock.defaultExpectation.results
		if mm_results == nil {
			mmGetLocalNodeRole.t.Fatal("No results are set for the NodeKeeperMock.GetLocalNodeRole")
		}
		return (*mm_results).p1
	}
	if mmGetLocalNodeRole.funcGetLocalNodeRole != nil {
		return mmGetLocalNodeRole.funcGetLocalNodeRole()
	}
	mmGetLocalNodeRole.t.Fatalf("Unexpected call to NodeKeeperMock.GetLocalNodeRole.")
	return
}

// GetLocalNodeRoleAfterCounter returns a count of finished NodeKeeperMock.GetLocalNodeRole invocations
func (mmGetLocalNodeRole *NodeKeeperMock) GetLocalNodeRoleAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetLocalNodeRole.afterGetLocalNodeRoleCounter)
}

// GetLocalNodeRoleBeforeCounter returns a count of NodeKeeperMock.GetLocalNodeRole invocations
func (mmGetLocalNodeRole *NodeKeeperMock) GetLocalNodeRoleBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetLocalNodeRole.beforeGetLocalNodeRoleCounter)
}

// MinimockGetLocalNodeRoleDone returns true if the count of the GetLocalNodeRole invocations corresponds
// the number of defined expectations
func (m *NodeKeeperMock) MinimockGetLocalNodeRoleDone() bool {
	for _, e := range m.GetLocalNodeRoleMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetLocalNodeRoleMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetLocalNodeRoleCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetLocalNodeRole != nil && mm_atomic.LoadUint64(&m.afterGetLocalNodeRoleCounter) < 1 {
		return false
	}
	return true
}

// MinimockGetLocalNodeRoleInspect logs each unmet expectation
func (m *NodeKeeperMock) MinimockGetLocalNodeRoleInspect() {
	for _, e := range m.GetLocalNodeRoleMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Error("Expected call to NodeKeeperMock.GetLocalNodeRole")
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetLocalNodeRoleMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetLocalNodeRoleCounter) < 1 {
		m.t.Error("Expected call to NodeKeeperMock.GetLocalNodeRole")
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetLocalNodeRole != nil && mm_atomic.LoadUint64(&m.afterGetLocalNodeRoleCounter) < 1 {
		m.t.Error("Expected call to NodeKeeperMock.GetLocalNodeRole")
	}
}

type mNodeKeeperMockSetExpectedPopulation struct {
	mock               *NodeKeeperMock
	defaultExpectation *NodeKeeperMockSetExpectedPopulationExpectation
	expectations       []*NodeKeeperMockSetExpectedPopulationExpectation

	callArgs []*NodeKeeperMockSetExpectedPopulationParams
	mutex    sync.RWMutex
}

// NodeKeeperMockSetExpectedPopulationExpectation specifies expectation struct of the NodeKeeper.SetExpectedPopulation
type NodeKeeperMockSetExpectedPopulationExpectation struct {
	mock   *NodeKeeperMock
	params *NodeKeeperMockSetExpectedPopulationParams

	Counter uint64
}

// NodeKeeperMockSetExpectedPopulationParams contains parameters of the NodeKeeper.SetExpectedPopulation
type NodeKeeperMockSetExpectedPopulationParams struct {
	ctx context.Context
	n1  pulse.Number
	o1  census.OnlinePopulation
}

// Expect sets up expected params for NodeKeeper.SetExpectedPopulation
func (mmSetExpectedPopulation *mNodeKeeperMockSetExpectedPopulation) Expect(ctx context.Context, n1 pulse.Number, o1 census.OnlinePopulation) *mNodeKeeperMockSetExpectedPopulation {
	if mmSetExpectedPopulation.mock.funcSetExpectedPopulation != nil {
		mmSetExpectedPopulation.mock.t.Fatalf("NodeKeeperMock.SetExpectedPopulation mock is already set by Set")
	}

	if mmSetExpectedPopulation.defaultExpectation == nil {
		mmSetExpectedPopulation.defaultExpectation = &NodeKeeperMockSetExpectedPopulationExpectation{}
	}

	mmSetExpectedPopulation.defaultExpectation.params = &NodeKeeperMockSetExpectedPopulationParams{ctx, n1, o1}
	for _, e := range mmSetExpectedPopulation.expectations {
		if minimock.Equal(e.params, mmSetExpectedPopulation.defaultExpectation.params) {
			mmSetExpectedPopulation.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmSetExpectedPopulation.defaultExpectation.params)
		}
	}

	return mmSetExpectedPopulation
}

// Inspect accepts an inspector function that has same arguments as the NodeKeeper.SetExpectedPopulation
func (mmSetExpectedPopulation *mNodeKeeperMockSetExpectedPopulation) Inspect(f func(ctx context.Context, n1 pulse.Number, o1 census.OnlinePopulation)) *mNodeKeeperMockSetExpectedPopulation {
	if mmSetExpectedPopulation.mock.inspectFuncSetExpectedPopulation != nil {
		mmSetExpectedPopulation.mock.t.Fatalf("Inspect function is already set for NodeKeeperMock.SetExpectedPopulation")
	}

	mmSetExpectedPopulation.mock.inspectFuncSetExpectedPopulation = f

	return mmSetExpectedPopulation
}

// Return sets up results that will be returned by NodeKeeper.SetExpectedPopulation
func (mmSetExpectedPopulation *mNodeKeeperMockSetExpectedPopulation) Return() *NodeKeeperMock {
	if mmSetExpectedPopulation.mock.funcSetExpectedPopulation != nil {
		mmSetExpectedPopulation.mock.t.Fatalf("NodeKeeperMock.SetExpectedPopulation mock is already set by Set")
	}

	if mmSetExpectedPopulation.defaultExpectation == nil {
		mmSetExpectedPopulation.defaultExpectation = &NodeKeeperMockSetExpectedPopulationExpectation{mock: mmSetExpectedPopulation.mock}
	}

	return mmSetExpectedPopulation.mock
}

//Set uses given function f to mock the NodeKeeper.SetExpectedPopulation method
func (mmSetExpectedPopulation *mNodeKeeperMockSetExpectedPopulation) Set(f func(ctx context.Context, n1 pulse.Number, o1 census.OnlinePopulation)) *NodeKeeperMock {
	if mmSetExpectedPopulation.defaultExpectation != nil {
		mmSetExpectedPopulation.mock.t.Fatalf("Default expectation is already set for the NodeKeeper.SetExpectedPopulation method")
	}

	if len(mmSetExpectedPopulation.expectations) > 0 {
		mmSetExpectedPopulation.mock.t.Fatalf("Some expectations are already set for the NodeKeeper.SetExpectedPopulation method")
	}

	mmSetExpectedPopulation.mock.funcSetExpectedPopulation = f
	return mmSetExpectedPopulation.mock
}

// SetExpectedPopulation implements network.NodeKeeper
func (mmSetExpectedPopulation *NodeKeeperMock) SetExpectedPopulation(ctx context.Context, n1 pulse.Number, o1 census.OnlinePopulation) {
	mm_atomic.AddUint64(&mmSetExpectedPopulation.beforeSetExpectedPopulationCounter, 1)
	defer mm_atomic.AddUint64(&mmSetExpectedPopulation.afterSetExpectedPopulationCounter, 1)

	if mmSetExpectedPopulation.inspectFuncSetExpectedPopulation != nil {
		mmSetExpectedPopulation.inspectFuncSetExpectedPopulation(ctx, n1, o1)
	}

	mm_params := &NodeKeeperMockSetExpectedPopulationParams{ctx, n1, o1}

	// Record call args
	mmSetExpectedPopulation.SetExpectedPopulationMock.mutex.Lock()
	mmSetExpectedPopulation.SetExpectedPopulationMock.callArgs = append(mmSetExpectedPopulation.SetExpectedPopulationMock.callArgs, mm_params)
	mmSetExpectedPopulation.SetExpectedPopulationMock.mutex.Unlock()

	for _, e := range mmSetExpectedPopulation.SetExpectedPopulationMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return
		}
	}

	if mmSetExpectedPopulation.SetExpectedPopulationMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmSetExpectedPopulation.SetExpectedPopulationMock.defaultExpectation.Counter, 1)
		mm_want := mmSetExpectedPopulation.SetExpectedPopulationMock.defaultExpectation.params
		mm_got := NodeKeeperMockSetExpectedPopulationParams{ctx, n1, o1}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmSetExpectedPopulation.t.Errorf("NodeKeeperMock.SetExpectedPopulation got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		return

	}
	if mmSetExpectedPopulation.funcSetExpectedPopulation != nil {
		mmSetExpectedPopulation.funcSetExpectedPopulation(ctx, n1, o1)
		return
	}
	mmSetExpectedPopulation.t.Fatalf("Unexpected call to NodeKeeperMock.SetExpectedPopulation. %v %v %v", ctx, n1, o1)

}

// SetExpectedPopulationAfterCounter returns a count of finished NodeKeeperMock.SetExpectedPopulation invocations
func (mmSetExpectedPopulation *NodeKeeperMock) SetExpectedPopulationAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmSetExpectedPopulation.afterSetExpectedPopulationCounter)
}

// SetExpectedPopulationBeforeCounter returns a count of NodeKeeperMock.SetExpectedPopulation invocations
func (mmSetExpectedPopulation *NodeKeeperMock) SetExpectedPopulationBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmSetExpectedPopulation.beforeSetExpectedPopulationCounter)
}

// Calls returns a list of arguments used in each call to NodeKeeperMock.SetExpectedPopulation.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmSetExpectedPopulation *mNodeKeeperMockSetExpectedPopulation) Calls() []*NodeKeeperMockSetExpectedPopulationParams {
	mmSetExpectedPopulation.mutex.RLock()

	argCopy := make([]*NodeKeeperMockSetExpectedPopulationParams, len(mmSetExpectedPopulation.callArgs))
	copy(argCopy, mmSetExpectedPopulation.callArgs)

	mmSetExpectedPopulation.mutex.RUnlock()

	return argCopy
}

// MinimockSetExpectedPopulationDone returns true if the count of the SetExpectedPopulation invocations corresponds
// the number of defined expectations
func (m *NodeKeeperMock) MinimockSetExpectedPopulationDone() bool {
	for _, e := range m.SetExpectedPopulationMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.SetExpectedPopulationMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterSetExpectedPopulationCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcSetExpectedPopulation != nil && mm_atomic.LoadUint64(&m.afterSetExpectedPopulationCounter) < 1 {
		return false
	}
	return true
}

// MinimockSetExpectedPopulationInspect logs each unmet expectation
func (m *NodeKeeperMock) MinimockSetExpectedPopulationInspect() {
	for _, e := range m.SetExpectedPopulationMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to NodeKeeperMock.SetExpectedPopulation with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.SetExpectedPopulationMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterSetExpectedPopulationCounter) < 1 {
		if m.SetExpectedPopulationMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to NodeKeeperMock.SetExpectedPopulation")
		} else {
			m.t.Errorf("Expected call to NodeKeeperMock.SetExpectedPopulation with params: %#v", *m.SetExpectedPopulationMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcSetExpectedPopulation != nil && mm_atomic.LoadUint64(&m.afterSetExpectedPopulationCounter) < 1 {
		m.t.Error("Expected call to NodeKeeperMock.SetExpectedPopulation")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *NodeKeeperMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockAddActivePopulationInspect()

		m.MinimockGetAccessorInspect()

		m.MinimockGetLatestAccessorInspect()

		m.MinimockGetLocalNodeReferenceInspect()

		m.MinimockGetLocalNodeRoleInspect()

		m.MinimockSetExpectedPopulationInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *NodeKeeperMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *NodeKeeperMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockAddActivePopulationDone() &&
		m.MinimockGetAccessorDone() &&
		m.MinimockGetLatestAccessorDone() &&
		m.MinimockGetLocalNodeReferenceDone() &&
		m.MinimockGetLocalNodeRoleDone() &&
		m.MinimockSetExpectedPopulationDone()
}
