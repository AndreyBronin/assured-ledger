package network

// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

import (
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
	"github.com/insolar/assured-ledger/ledger-core/network/consensus/gcpv2/api/census"
	"github.com/insolar/assured-ledger/ledger-core/network/nodeinfo"
	"github.com/insolar/assured-ledger/ledger-core/pulse"
	"github.com/insolar/assured-ledger/ledger-core/reference"
)

// AccessorMock implements network.Accessor
type AccessorMock struct {
	t minimock.Tester

	funcGetLocalNode          func() (n1 nodeinfo.NetworkNode)
	inspectFuncGetLocalNode   func()
	afterGetLocalNodeCounter  uint64
	beforeGetLocalNodeCounter uint64
	GetLocalNodeMock          mAccessorMockGetLocalNode

	funcGetOnlineNode          func(ref reference.Global) (n1 nodeinfo.NetworkNode)
	inspectFuncGetOnlineNode   func(ref reference.Global)
	afterGetOnlineNodeCounter  uint64
	beforeGetOnlineNodeCounter uint64
	GetOnlineNodeMock          mAccessorMockGetOnlineNode

	funcGetOnlineNodeByAddr          func(address string) (n1 nodeinfo.NetworkNode)
	inspectFuncGetOnlineNodeByAddr   func(address string)
	afterGetOnlineNodeByAddrCounter  uint64
	beforeGetOnlineNodeByAddrCounter uint64
	GetOnlineNodeByAddrMock          mAccessorMockGetOnlineNodeByAddr

	funcGetOnlineNodes          func() (na1 []nodeinfo.NetworkNode)
	inspectFuncGetOnlineNodes   func()
	afterGetOnlineNodesCounter  uint64
	beforeGetOnlineNodesCounter uint64
	GetOnlineNodesMock          mAccessorMockGetOnlineNodes

	funcGetPopulation          func() (o1 census.OnlinePopulation)
	inspectFuncGetPopulation   func()
	afterGetPopulationCounter  uint64
	beforeGetPopulationCounter uint64
	GetPopulationMock          mAccessorMockGetPopulation

	funcGetPoweredNode          func(ref reference.Global) (n1 nodeinfo.NetworkNode)
	inspectFuncGetPoweredNode   func(ref reference.Global)
	afterGetPoweredNodeCounter  uint64
	beforeGetPoweredNodeCounter uint64
	GetPoweredNodeMock          mAccessorMockGetPoweredNode

	funcGetPulseNumber          func() (n1 pulse.Number)
	inspectFuncGetPulseNumber   func()
	afterGetPulseNumberCounter  uint64
	beforeGetPulseNumberCounter uint64
	GetPulseNumberMock          mAccessorMockGetPulseNumber
}

// NewAccessorMock returns a mock for network.Accessor
func NewAccessorMock(t minimock.Tester) *AccessorMock {
	m := &AccessorMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.GetLocalNodeMock = mAccessorMockGetLocalNode{mock: m}

	m.GetOnlineNodeMock = mAccessorMockGetOnlineNode{mock: m}
	m.GetOnlineNodeMock.callArgs = []*AccessorMockGetOnlineNodeParams{}

	m.GetOnlineNodeByAddrMock = mAccessorMockGetOnlineNodeByAddr{mock: m}
	m.GetOnlineNodeByAddrMock.callArgs = []*AccessorMockGetOnlineNodeByAddrParams{}

	m.GetOnlineNodesMock = mAccessorMockGetOnlineNodes{mock: m}

	m.GetPopulationMock = mAccessorMockGetPopulation{mock: m}

	m.GetPoweredNodeMock = mAccessorMockGetPoweredNode{mock: m}
	m.GetPoweredNodeMock.callArgs = []*AccessorMockGetPoweredNodeParams{}

	m.GetPulseNumberMock = mAccessorMockGetPulseNumber{mock: m}

	return m
}

type mAccessorMockGetLocalNode struct {
	mock               *AccessorMock
	defaultExpectation *AccessorMockGetLocalNodeExpectation
	expectations       []*AccessorMockGetLocalNodeExpectation
}

// AccessorMockGetLocalNodeExpectation specifies expectation struct of the Accessor.GetLocalNode
type AccessorMockGetLocalNodeExpectation struct {
	mock *AccessorMock

	results *AccessorMockGetLocalNodeResults
	Counter uint64
}

// AccessorMockGetLocalNodeResults contains results of the Accessor.GetLocalNode
type AccessorMockGetLocalNodeResults struct {
	n1 nodeinfo.NetworkNode
}

// Expect sets up expected params for Accessor.GetLocalNode
func (mmGetLocalNode *mAccessorMockGetLocalNode) Expect() *mAccessorMockGetLocalNode {
	if mmGetLocalNode.mock.funcGetLocalNode != nil {
		mmGetLocalNode.mock.t.Fatalf("AccessorMock.GetLocalNode mock is already set by Set")
	}

	if mmGetLocalNode.defaultExpectation == nil {
		mmGetLocalNode.defaultExpectation = &AccessorMockGetLocalNodeExpectation{}
	}

	return mmGetLocalNode
}

// Inspect accepts an inspector function that has same arguments as the Accessor.GetLocalNode
func (mmGetLocalNode *mAccessorMockGetLocalNode) Inspect(f func()) *mAccessorMockGetLocalNode {
	if mmGetLocalNode.mock.inspectFuncGetLocalNode != nil {
		mmGetLocalNode.mock.t.Fatalf("Inspect function is already set for AccessorMock.GetLocalNode")
	}

	mmGetLocalNode.mock.inspectFuncGetLocalNode = f

	return mmGetLocalNode
}

// Return sets up results that will be returned by Accessor.GetLocalNode
func (mmGetLocalNode *mAccessorMockGetLocalNode) Return(n1 nodeinfo.NetworkNode) *AccessorMock {
	if mmGetLocalNode.mock.funcGetLocalNode != nil {
		mmGetLocalNode.mock.t.Fatalf("AccessorMock.GetLocalNode mock is already set by Set")
	}

	if mmGetLocalNode.defaultExpectation == nil {
		mmGetLocalNode.defaultExpectation = &AccessorMockGetLocalNodeExpectation{mock: mmGetLocalNode.mock}
	}
	mmGetLocalNode.defaultExpectation.results = &AccessorMockGetLocalNodeResults{n1}
	return mmGetLocalNode.mock
}

//Set uses given function f to mock the Accessor.GetLocalNode method
func (mmGetLocalNode *mAccessorMockGetLocalNode) Set(f func() (n1 nodeinfo.NetworkNode)) *AccessorMock {
	if mmGetLocalNode.defaultExpectation != nil {
		mmGetLocalNode.mock.t.Fatalf("Default expectation is already set for the Accessor.GetLocalNode method")
	}

	if len(mmGetLocalNode.expectations) > 0 {
		mmGetLocalNode.mock.t.Fatalf("Some expectations are already set for the Accessor.GetLocalNode method")
	}

	mmGetLocalNode.mock.funcGetLocalNode = f
	return mmGetLocalNode.mock
}

// GetLocalNode implements network.Accessor
func (mmGetLocalNode *AccessorMock) GetLocalNode() (n1 nodeinfo.NetworkNode) {
	mm_atomic.AddUint64(&mmGetLocalNode.beforeGetLocalNodeCounter, 1)
	defer mm_atomic.AddUint64(&mmGetLocalNode.afterGetLocalNodeCounter, 1)

	if mmGetLocalNode.inspectFuncGetLocalNode != nil {
		mmGetLocalNode.inspectFuncGetLocalNode()
	}

	if mmGetLocalNode.GetLocalNodeMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetLocalNode.GetLocalNodeMock.defaultExpectation.Counter, 1)

		mm_results := mmGetLocalNode.GetLocalNodeMock.defaultExpectation.results
		if mm_results == nil {
			mmGetLocalNode.t.Fatal("No results are set for the AccessorMock.GetLocalNode")
		}
		return (*mm_results).n1
	}
	if mmGetLocalNode.funcGetLocalNode != nil {
		return mmGetLocalNode.funcGetLocalNode()
	}
	mmGetLocalNode.t.Fatalf("Unexpected call to AccessorMock.GetLocalNode.")
	return
}

// GetLocalNodeAfterCounter returns a count of finished AccessorMock.GetLocalNode invocations
func (mmGetLocalNode *AccessorMock) GetLocalNodeAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetLocalNode.afterGetLocalNodeCounter)
}

// GetLocalNodeBeforeCounter returns a count of AccessorMock.GetLocalNode invocations
func (mmGetLocalNode *AccessorMock) GetLocalNodeBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetLocalNode.beforeGetLocalNodeCounter)
}

// MinimockGetLocalNodeDone returns true if the count of the GetLocalNode invocations corresponds
// the number of defined expectations
func (m *AccessorMock) MinimockGetLocalNodeDone() bool {
	for _, e := range m.GetLocalNodeMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetLocalNodeMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetLocalNodeCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetLocalNode != nil && mm_atomic.LoadUint64(&m.afterGetLocalNodeCounter) < 1 {
		return false
	}
	return true
}

// MinimockGetLocalNodeInspect logs each unmet expectation
func (m *AccessorMock) MinimockGetLocalNodeInspect() {
	for _, e := range m.GetLocalNodeMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Error("Expected call to AccessorMock.GetLocalNode")
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetLocalNodeMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetLocalNodeCounter) < 1 {
		m.t.Error("Expected call to AccessorMock.GetLocalNode")
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetLocalNode != nil && mm_atomic.LoadUint64(&m.afterGetLocalNodeCounter) < 1 {
		m.t.Error("Expected call to AccessorMock.GetLocalNode")
	}
}

type mAccessorMockGetOnlineNode struct {
	mock               *AccessorMock
	defaultExpectation *AccessorMockGetOnlineNodeExpectation
	expectations       []*AccessorMockGetOnlineNodeExpectation

	callArgs []*AccessorMockGetOnlineNodeParams
	mutex    sync.RWMutex
}

// AccessorMockGetOnlineNodeExpectation specifies expectation struct of the Accessor.GetOnlineNode
type AccessorMockGetOnlineNodeExpectation struct {
	mock    *AccessorMock
	params  *AccessorMockGetOnlineNodeParams
	results *AccessorMockGetOnlineNodeResults
	Counter uint64
}

// AccessorMockGetOnlineNodeParams contains parameters of the Accessor.GetOnlineNode
type AccessorMockGetOnlineNodeParams struct {
	ref reference.Global
}

// AccessorMockGetOnlineNodeResults contains results of the Accessor.GetOnlineNode
type AccessorMockGetOnlineNodeResults struct {
	n1 nodeinfo.NetworkNode
}

// Expect sets up expected params for Accessor.GetOnlineNode
func (mmGetOnlineNode *mAccessorMockGetOnlineNode) Expect(ref reference.Global) *mAccessorMockGetOnlineNode {
	if mmGetOnlineNode.mock.funcGetOnlineNode != nil {
		mmGetOnlineNode.mock.t.Fatalf("AccessorMock.GetOnlineNode mock is already set by Set")
	}

	if mmGetOnlineNode.defaultExpectation == nil {
		mmGetOnlineNode.defaultExpectation = &AccessorMockGetOnlineNodeExpectation{}
	}

	mmGetOnlineNode.defaultExpectation.params = &AccessorMockGetOnlineNodeParams{ref}
	for _, e := range mmGetOnlineNode.expectations {
		if minimock.Equal(e.params, mmGetOnlineNode.defaultExpectation.params) {
			mmGetOnlineNode.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGetOnlineNode.defaultExpectation.params)
		}
	}

	return mmGetOnlineNode
}

// Inspect accepts an inspector function that has same arguments as the Accessor.GetOnlineNode
func (mmGetOnlineNode *mAccessorMockGetOnlineNode) Inspect(f func(ref reference.Global)) *mAccessorMockGetOnlineNode {
	if mmGetOnlineNode.mock.inspectFuncGetOnlineNode != nil {
		mmGetOnlineNode.mock.t.Fatalf("Inspect function is already set for AccessorMock.GetOnlineNode")
	}

	mmGetOnlineNode.mock.inspectFuncGetOnlineNode = f

	return mmGetOnlineNode
}

// Return sets up results that will be returned by Accessor.GetOnlineNode
func (mmGetOnlineNode *mAccessorMockGetOnlineNode) Return(n1 nodeinfo.NetworkNode) *AccessorMock {
	if mmGetOnlineNode.mock.funcGetOnlineNode != nil {
		mmGetOnlineNode.mock.t.Fatalf("AccessorMock.GetOnlineNode mock is already set by Set")
	}

	if mmGetOnlineNode.defaultExpectation == nil {
		mmGetOnlineNode.defaultExpectation = &AccessorMockGetOnlineNodeExpectation{mock: mmGetOnlineNode.mock}
	}
	mmGetOnlineNode.defaultExpectation.results = &AccessorMockGetOnlineNodeResults{n1}
	return mmGetOnlineNode.mock
}

//Set uses given function f to mock the Accessor.GetOnlineNode method
func (mmGetOnlineNode *mAccessorMockGetOnlineNode) Set(f func(ref reference.Global) (n1 nodeinfo.NetworkNode)) *AccessorMock {
	if mmGetOnlineNode.defaultExpectation != nil {
		mmGetOnlineNode.mock.t.Fatalf("Default expectation is already set for the Accessor.GetOnlineNode method")
	}

	if len(mmGetOnlineNode.expectations) > 0 {
		mmGetOnlineNode.mock.t.Fatalf("Some expectations are already set for the Accessor.GetOnlineNode method")
	}

	mmGetOnlineNode.mock.funcGetOnlineNode = f
	return mmGetOnlineNode.mock
}

// When sets expectation for the Accessor.GetOnlineNode which will trigger the result defined by the following
// Then helper
func (mmGetOnlineNode *mAccessorMockGetOnlineNode) When(ref reference.Global) *AccessorMockGetOnlineNodeExpectation {
	if mmGetOnlineNode.mock.funcGetOnlineNode != nil {
		mmGetOnlineNode.mock.t.Fatalf("AccessorMock.GetOnlineNode mock is already set by Set")
	}

	expectation := &AccessorMockGetOnlineNodeExpectation{
		mock:   mmGetOnlineNode.mock,
		params: &AccessorMockGetOnlineNodeParams{ref},
	}
	mmGetOnlineNode.expectations = append(mmGetOnlineNode.expectations, expectation)
	return expectation
}

// Then sets up Accessor.GetOnlineNode return parameters for the expectation previously defined by the When method
func (e *AccessorMockGetOnlineNodeExpectation) Then(n1 nodeinfo.NetworkNode) *AccessorMock {
	e.results = &AccessorMockGetOnlineNodeResults{n1}
	return e.mock
}

// GetOnlineNode implements network.Accessor
func (mmGetOnlineNode *AccessorMock) GetOnlineNode(ref reference.Global) (n1 nodeinfo.NetworkNode) {
	mm_atomic.AddUint64(&mmGetOnlineNode.beforeGetOnlineNodeCounter, 1)
	defer mm_atomic.AddUint64(&mmGetOnlineNode.afterGetOnlineNodeCounter, 1)

	if mmGetOnlineNode.inspectFuncGetOnlineNode != nil {
		mmGetOnlineNode.inspectFuncGetOnlineNode(ref)
	}

	mm_params := &AccessorMockGetOnlineNodeParams{ref}

	// Record call args
	mmGetOnlineNode.GetOnlineNodeMock.mutex.Lock()
	mmGetOnlineNode.GetOnlineNodeMock.callArgs = append(mmGetOnlineNode.GetOnlineNodeMock.callArgs, mm_params)
	mmGetOnlineNode.GetOnlineNodeMock.mutex.Unlock()

	for _, e := range mmGetOnlineNode.GetOnlineNodeMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.n1
		}
	}

	if mmGetOnlineNode.GetOnlineNodeMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetOnlineNode.GetOnlineNodeMock.defaultExpectation.Counter, 1)
		mm_want := mmGetOnlineNode.GetOnlineNodeMock.defaultExpectation.params
		mm_got := AccessorMockGetOnlineNodeParams{ref}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGetOnlineNode.t.Errorf("AccessorMock.GetOnlineNode got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGetOnlineNode.GetOnlineNodeMock.defaultExpectation.results
		if mm_results == nil {
			mmGetOnlineNode.t.Fatal("No results are set for the AccessorMock.GetOnlineNode")
		}
		return (*mm_results).n1
	}
	if mmGetOnlineNode.funcGetOnlineNode != nil {
		return mmGetOnlineNode.funcGetOnlineNode(ref)
	}
	mmGetOnlineNode.t.Fatalf("Unexpected call to AccessorMock.GetOnlineNode. %v", ref)
	return
}

// GetOnlineNodeAfterCounter returns a count of finished AccessorMock.GetOnlineNode invocations
func (mmGetOnlineNode *AccessorMock) GetOnlineNodeAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetOnlineNode.afterGetOnlineNodeCounter)
}

// GetOnlineNodeBeforeCounter returns a count of AccessorMock.GetOnlineNode invocations
func (mmGetOnlineNode *AccessorMock) GetOnlineNodeBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetOnlineNode.beforeGetOnlineNodeCounter)
}

// Calls returns a list of arguments used in each call to AccessorMock.GetOnlineNode.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGetOnlineNode *mAccessorMockGetOnlineNode) Calls() []*AccessorMockGetOnlineNodeParams {
	mmGetOnlineNode.mutex.RLock()

	argCopy := make([]*AccessorMockGetOnlineNodeParams, len(mmGetOnlineNode.callArgs))
	copy(argCopy, mmGetOnlineNode.callArgs)

	mmGetOnlineNode.mutex.RUnlock()

	return argCopy
}

// MinimockGetOnlineNodeDone returns true if the count of the GetOnlineNode invocations corresponds
// the number of defined expectations
func (m *AccessorMock) MinimockGetOnlineNodeDone() bool {
	for _, e := range m.GetOnlineNodeMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetOnlineNodeMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetOnlineNodeCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetOnlineNode != nil && mm_atomic.LoadUint64(&m.afterGetOnlineNodeCounter) < 1 {
		return false
	}
	return true
}

// MinimockGetOnlineNodeInspect logs each unmet expectation
func (m *AccessorMock) MinimockGetOnlineNodeInspect() {
	for _, e := range m.GetOnlineNodeMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to AccessorMock.GetOnlineNode with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetOnlineNodeMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetOnlineNodeCounter) < 1 {
		if m.GetOnlineNodeMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to AccessorMock.GetOnlineNode")
		} else {
			m.t.Errorf("Expected call to AccessorMock.GetOnlineNode with params: %#v", *m.GetOnlineNodeMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetOnlineNode != nil && mm_atomic.LoadUint64(&m.afterGetOnlineNodeCounter) < 1 {
		m.t.Error("Expected call to AccessorMock.GetOnlineNode")
	}
}

type mAccessorMockGetOnlineNodeByAddr struct {
	mock               *AccessorMock
	defaultExpectation *AccessorMockGetOnlineNodeByAddrExpectation
	expectations       []*AccessorMockGetOnlineNodeByAddrExpectation

	callArgs []*AccessorMockGetOnlineNodeByAddrParams
	mutex    sync.RWMutex
}

// AccessorMockGetOnlineNodeByAddrExpectation specifies expectation struct of the Accessor.GetOnlineNodeByAddr
type AccessorMockGetOnlineNodeByAddrExpectation struct {
	mock    *AccessorMock
	params  *AccessorMockGetOnlineNodeByAddrParams
	results *AccessorMockGetOnlineNodeByAddrResults
	Counter uint64
}

// AccessorMockGetOnlineNodeByAddrParams contains parameters of the Accessor.GetOnlineNodeByAddr
type AccessorMockGetOnlineNodeByAddrParams struct {
	address string
}

// AccessorMockGetOnlineNodeByAddrResults contains results of the Accessor.GetOnlineNodeByAddr
type AccessorMockGetOnlineNodeByAddrResults struct {
	n1 nodeinfo.NetworkNode
}

// Expect sets up expected params for Accessor.GetOnlineNodeByAddr
func (mmGetOnlineNodeByAddr *mAccessorMockGetOnlineNodeByAddr) Expect(address string) *mAccessorMockGetOnlineNodeByAddr {
	if mmGetOnlineNodeByAddr.mock.funcGetOnlineNodeByAddr != nil {
		mmGetOnlineNodeByAddr.mock.t.Fatalf("AccessorMock.GetOnlineNodeByAddr mock is already set by Set")
	}

	if mmGetOnlineNodeByAddr.defaultExpectation == nil {
		mmGetOnlineNodeByAddr.defaultExpectation = &AccessorMockGetOnlineNodeByAddrExpectation{}
	}

	mmGetOnlineNodeByAddr.defaultExpectation.params = &AccessorMockGetOnlineNodeByAddrParams{address}
	for _, e := range mmGetOnlineNodeByAddr.expectations {
		if minimock.Equal(e.params, mmGetOnlineNodeByAddr.defaultExpectation.params) {
			mmGetOnlineNodeByAddr.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGetOnlineNodeByAddr.defaultExpectation.params)
		}
	}

	return mmGetOnlineNodeByAddr
}

// Inspect accepts an inspector function that has same arguments as the Accessor.GetOnlineNodeByAddr
func (mmGetOnlineNodeByAddr *mAccessorMockGetOnlineNodeByAddr) Inspect(f func(address string)) *mAccessorMockGetOnlineNodeByAddr {
	if mmGetOnlineNodeByAddr.mock.inspectFuncGetOnlineNodeByAddr != nil {
		mmGetOnlineNodeByAddr.mock.t.Fatalf("Inspect function is already set for AccessorMock.GetOnlineNodeByAddr")
	}

	mmGetOnlineNodeByAddr.mock.inspectFuncGetOnlineNodeByAddr = f

	return mmGetOnlineNodeByAddr
}

// Return sets up results that will be returned by Accessor.GetOnlineNodeByAddr
func (mmGetOnlineNodeByAddr *mAccessorMockGetOnlineNodeByAddr) Return(n1 nodeinfo.NetworkNode) *AccessorMock {
	if mmGetOnlineNodeByAddr.mock.funcGetOnlineNodeByAddr != nil {
		mmGetOnlineNodeByAddr.mock.t.Fatalf("AccessorMock.GetOnlineNodeByAddr mock is already set by Set")
	}

	if mmGetOnlineNodeByAddr.defaultExpectation == nil {
		mmGetOnlineNodeByAddr.defaultExpectation = &AccessorMockGetOnlineNodeByAddrExpectation{mock: mmGetOnlineNodeByAddr.mock}
	}
	mmGetOnlineNodeByAddr.defaultExpectation.results = &AccessorMockGetOnlineNodeByAddrResults{n1}
	return mmGetOnlineNodeByAddr.mock
}

//Set uses given function f to mock the Accessor.GetOnlineNodeByAddr method
func (mmGetOnlineNodeByAddr *mAccessorMockGetOnlineNodeByAddr) Set(f func(address string) (n1 nodeinfo.NetworkNode)) *AccessorMock {
	if mmGetOnlineNodeByAddr.defaultExpectation != nil {
		mmGetOnlineNodeByAddr.mock.t.Fatalf("Default expectation is already set for the Accessor.GetOnlineNodeByAddr method")
	}

	if len(mmGetOnlineNodeByAddr.expectations) > 0 {
		mmGetOnlineNodeByAddr.mock.t.Fatalf("Some expectations are already set for the Accessor.GetOnlineNodeByAddr method")
	}

	mmGetOnlineNodeByAddr.mock.funcGetOnlineNodeByAddr = f
	return mmGetOnlineNodeByAddr.mock
}

// When sets expectation for the Accessor.GetOnlineNodeByAddr which will trigger the result defined by the following
// Then helper
func (mmGetOnlineNodeByAddr *mAccessorMockGetOnlineNodeByAddr) When(address string) *AccessorMockGetOnlineNodeByAddrExpectation {
	if mmGetOnlineNodeByAddr.mock.funcGetOnlineNodeByAddr != nil {
		mmGetOnlineNodeByAddr.mock.t.Fatalf("AccessorMock.GetOnlineNodeByAddr mock is already set by Set")
	}

	expectation := &AccessorMockGetOnlineNodeByAddrExpectation{
		mock:   mmGetOnlineNodeByAddr.mock,
		params: &AccessorMockGetOnlineNodeByAddrParams{address},
	}
	mmGetOnlineNodeByAddr.expectations = append(mmGetOnlineNodeByAddr.expectations, expectation)
	return expectation
}

// Then sets up Accessor.GetOnlineNodeByAddr return parameters for the expectation previously defined by the When method
func (e *AccessorMockGetOnlineNodeByAddrExpectation) Then(n1 nodeinfo.NetworkNode) *AccessorMock {
	e.results = &AccessorMockGetOnlineNodeByAddrResults{n1}
	return e.mock
}

// GetOnlineNodeByAddr implements network.Accessor
func (mmGetOnlineNodeByAddr *AccessorMock) GetOnlineNodeByAddr(address string) (n1 nodeinfo.NetworkNode) {
	mm_atomic.AddUint64(&mmGetOnlineNodeByAddr.beforeGetOnlineNodeByAddrCounter, 1)
	defer mm_atomic.AddUint64(&mmGetOnlineNodeByAddr.afterGetOnlineNodeByAddrCounter, 1)

	if mmGetOnlineNodeByAddr.inspectFuncGetOnlineNodeByAddr != nil {
		mmGetOnlineNodeByAddr.inspectFuncGetOnlineNodeByAddr(address)
	}

	mm_params := &AccessorMockGetOnlineNodeByAddrParams{address}

	// Record call args
	mmGetOnlineNodeByAddr.GetOnlineNodeByAddrMock.mutex.Lock()
	mmGetOnlineNodeByAddr.GetOnlineNodeByAddrMock.callArgs = append(mmGetOnlineNodeByAddr.GetOnlineNodeByAddrMock.callArgs, mm_params)
	mmGetOnlineNodeByAddr.GetOnlineNodeByAddrMock.mutex.Unlock()

	for _, e := range mmGetOnlineNodeByAddr.GetOnlineNodeByAddrMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.n1
		}
	}

	if mmGetOnlineNodeByAddr.GetOnlineNodeByAddrMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetOnlineNodeByAddr.GetOnlineNodeByAddrMock.defaultExpectation.Counter, 1)
		mm_want := mmGetOnlineNodeByAddr.GetOnlineNodeByAddrMock.defaultExpectation.params
		mm_got := AccessorMockGetOnlineNodeByAddrParams{address}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGetOnlineNodeByAddr.t.Errorf("AccessorMock.GetOnlineNodeByAddr got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGetOnlineNodeByAddr.GetOnlineNodeByAddrMock.defaultExpectation.results
		if mm_results == nil {
			mmGetOnlineNodeByAddr.t.Fatal("No results are set for the AccessorMock.GetOnlineNodeByAddr")
		}
		return (*mm_results).n1
	}
	if mmGetOnlineNodeByAddr.funcGetOnlineNodeByAddr != nil {
		return mmGetOnlineNodeByAddr.funcGetOnlineNodeByAddr(address)
	}
	mmGetOnlineNodeByAddr.t.Fatalf("Unexpected call to AccessorMock.GetOnlineNodeByAddr. %v", address)
	return
}

// GetOnlineNodeByAddrAfterCounter returns a count of finished AccessorMock.GetOnlineNodeByAddr invocations
func (mmGetOnlineNodeByAddr *AccessorMock) GetOnlineNodeByAddrAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetOnlineNodeByAddr.afterGetOnlineNodeByAddrCounter)
}

// GetOnlineNodeByAddrBeforeCounter returns a count of AccessorMock.GetOnlineNodeByAddr invocations
func (mmGetOnlineNodeByAddr *AccessorMock) GetOnlineNodeByAddrBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetOnlineNodeByAddr.beforeGetOnlineNodeByAddrCounter)
}

// Calls returns a list of arguments used in each call to AccessorMock.GetOnlineNodeByAddr.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGetOnlineNodeByAddr *mAccessorMockGetOnlineNodeByAddr) Calls() []*AccessorMockGetOnlineNodeByAddrParams {
	mmGetOnlineNodeByAddr.mutex.RLock()

	argCopy := make([]*AccessorMockGetOnlineNodeByAddrParams, len(mmGetOnlineNodeByAddr.callArgs))
	copy(argCopy, mmGetOnlineNodeByAddr.callArgs)

	mmGetOnlineNodeByAddr.mutex.RUnlock()

	return argCopy
}

// MinimockGetOnlineNodeByAddrDone returns true if the count of the GetOnlineNodeByAddr invocations corresponds
// the number of defined expectations
func (m *AccessorMock) MinimockGetOnlineNodeByAddrDone() bool {
	for _, e := range m.GetOnlineNodeByAddrMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetOnlineNodeByAddrMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetOnlineNodeByAddrCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetOnlineNodeByAddr != nil && mm_atomic.LoadUint64(&m.afterGetOnlineNodeByAddrCounter) < 1 {
		return false
	}
	return true
}

// MinimockGetOnlineNodeByAddrInspect logs each unmet expectation
func (m *AccessorMock) MinimockGetOnlineNodeByAddrInspect() {
	for _, e := range m.GetOnlineNodeByAddrMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to AccessorMock.GetOnlineNodeByAddr with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetOnlineNodeByAddrMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetOnlineNodeByAddrCounter) < 1 {
		if m.GetOnlineNodeByAddrMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to AccessorMock.GetOnlineNodeByAddr")
		} else {
			m.t.Errorf("Expected call to AccessorMock.GetOnlineNodeByAddr with params: %#v", *m.GetOnlineNodeByAddrMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetOnlineNodeByAddr != nil && mm_atomic.LoadUint64(&m.afterGetOnlineNodeByAddrCounter) < 1 {
		m.t.Error("Expected call to AccessorMock.GetOnlineNodeByAddr")
	}
}

type mAccessorMockGetOnlineNodes struct {
	mock               *AccessorMock
	defaultExpectation *AccessorMockGetOnlineNodesExpectation
	expectations       []*AccessorMockGetOnlineNodesExpectation
}

// AccessorMockGetOnlineNodesExpectation specifies expectation struct of the Accessor.GetOnlineNodes
type AccessorMockGetOnlineNodesExpectation struct {
	mock *AccessorMock

	results *AccessorMockGetOnlineNodesResults
	Counter uint64
}

// AccessorMockGetOnlineNodesResults contains results of the Accessor.GetOnlineNodes
type AccessorMockGetOnlineNodesResults struct {
	na1 []nodeinfo.NetworkNode
}

// Expect sets up expected params for Accessor.GetOnlineNodes
func (mmGetOnlineNodes *mAccessorMockGetOnlineNodes) Expect() *mAccessorMockGetOnlineNodes {
	if mmGetOnlineNodes.mock.funcGetOnlineNodes != nil {
		mmGetOnlineNodes.mock.t.Fatalf("AccessorMock.GetOnlineNodes mock is already set by Set")
	}

	if mmGetOnlineNodes.defaultExpectation == nil {
		mmGetOnlineNodes.defaultExpectation = &AccessorMockGetOnlineNodesExpectation{}
	}

	return mmGetOnlineNodes
}

// Inspect accepts an inspector function that has same arguments as the Accessor.GetOnlineNodes
func (mmGetOnlineNodes *mAccessorMockGetOnlineNodes) Inspect(f func()) *mAccessorMockGetOnlineNodes {
	if mmGetOnlineNodes.mock.inspectFuncGetOnlineNodes != nil {
		mmGetOnlineNodes.mock.t.Fatalf("Inspect function is already set for AccessorMock.GetOnlineNodes")
	}

	mmGetOnlineNodes.mock.inspectFuncGetOnlineNodes = f

	return mmGetOnlineNodes
}

// Return sets up results that will be returned by Accessor.GetOnlineNodes
func (mmGetOnlineNodes *mAccessorMockGetOnlineNodes) Return(na1 []nodeinfo.NetworkNode) *AccessorMock {
	if mmGetOnlineNodes.mock.funcGetOnlineNodes != nil {
		mmGetOnlineNodes.mock.t.Fatalf("AccessorMock.GetOnlineNodes mock is already set by Set")
	}

	if mmGetOnlineNodes.defaultExpectation == nil {
		mmGetOnlineNodes.defaultExpectation = &AccessorMockGetOnlineNodesExpectation{mock: mmGetOnlineNodes.mock}
	}
	mmGetOnlineNodes.defaultExpectation.results = &AccessorMockGetOnlineNodesResults{na1}
	return mmGetOnlineNodes.mock
}

//Set uses given function f to mock the Accessor.GetOnlineNodes method
func (mmGetOnlineNodes *mAccessorMockGetOnlineNodes) Set(f func() (na1 []nodeinfo.NetworkNode)) *AccessorMock {
	if mmGetOnlineNodes.defaultExpectation != nil {
		mmGetOnlineNodes.mock.t.Fatalf("Default expectation is already set for the Accessor.GetOnlineNodes method")
	}

	if len(mmGetOnlineNodes.expectations) > 0 {
		mmGetOnlineNodes.mock.t.Fatalf("Some expectations are already set for the Accessor.GetOnlineNodes method")
	}

	mmGetOnlineNodes.mock.funcGetOnlineNodes = f
	return mmGetOnlineNodes.mock
}

// GetOnlineNodes implements network.Accessor
func (mmGetOnlineNodes *AccessorMock) GetOnlineNodes() (na1 []nodeinfo.NetworkNode) {
	mm_atomic.AddUint64(&mmGetOnlineNodes.beforeGetOnlineNodesCounter, 1)
	defer mm_atomic.AddUint64(&mmGetOnlineNodes.afterGetOnlineNodesCounter, 1)

	if mmGetOnlineNodes.inspectFuncGetOnlineNodes != nil {
		mmGetOnlineNodes.inspectFuncGetOnlineNodes()
	}

	if mmGetOnlineNodes.GetOnlineNodesMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetOnlineNodes.GetOnlineNodesMock.defaultExpectation.Counter, 1)

		mm_results := mmGetOnlineNodes.GetOnlineNodesMock.defaultExpectation.results
		if mm_results == nil {
			mmGetOnlineNodes.t.Fatal("No results are set for the AccessorMock.GetOnlineNodes")
		}
		return (*mm_results).na1
	}
	if mmGetOnlineNodes.funcGetOnlineNodes != nil {
		return mmGetOnlineNodes.funcGetOnlineNodes()
	}
	mmGetOnlineNodes.t.Fatalf("Unexpected call to AccessorMock.GetOnlineNodes.")
	return
}

// GetOnlineNodesAfterCounter returns a count of finished AccessorMock.GetOnlineNodes invocations
func (mmGetOnlineNodes *AccessorMock) GetOnlineNodesAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetOnlineNodes.afterGetOnlineNodesCounter)
}

// GetOnlineNodesBeforeCounter returns a count of AccessorMock.GetOnlineNodes invocations
func (mmGetOnlineNodes *AccessorMock) GetOnlineNodesBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetOnlineNodes.beforeGetOnlineNodesCounter)
}

// MinimockGetOnlineNodesDone returns true if the count of the GetOnlineNodes invocations corresponds
// the number of defined expectations
func (m *AccessorMock) MinimockGetOnlineNodesDone() bool {
	for _, e := range m.GetOnlineNodesMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetOnlineNodesMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetOnlineNodesCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetOnlineNodes != nil && mm_atomic.LoadUint64(&m.afterGetOnlineNodesCounter) < 1 {
		return false
	}
	return true
}

// MinimockGetOnlineNodesInspect logs each unmet expectation
func (m *AccessorMock) MinimockGetOnlineNodesInspect() {
	for _, e := range m.GetOnlineNodesMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Error("Expected call to AccessorMock.GetOnlineNodes")
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetOnlineNodesMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetOnlineNodesCounter) < 1 {
		m.t.Error("Expected call to AccessorMock.GetOnlineNodes")
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetOnlineNodes != nil && mm_atomic.LoadUint64(&m.afterGetOnlineNodesCounter) < 1 {
		m.t.Error("Expected call to AccessorMock.GetOnlineNodes")
	}
}

type mAccessorMockGetPopulation struct {
	mock               *AccessorMock
	defaultExpectation *AccessorMockGetPopulationExpectation
	expectations       []*AccessorMockGetPopulationExpectation
}

// AccessorMockGetPopulationExpectation specifies expectation struct of the Accessor.GetPopulation
type AccessorMockGetPopulationExpectation struct {
	mock *AccessorMock

	results *AccessorMockGetPopulationResults
	Counter uint64
}

// AccessorMockGetPopulationResults contains results of the Accessor.GetPopulation
type AccessorMockGetPopulationResults struct {
	o1 census.OnlinePopulation
}

// Expect sets up expected params for Accessor.GetPopulation
func (mmGetPopulation *mAccessorMockGetPopulation) Expect() *mAccessorMockGetPopulation {
	if mmGetPopulation.mock.funcGetPopulation != nil {
		mmGetPopulation.mock.t.Fatalf("AccessorMock.GetPopulation mock is already set by Set")
	}

	if mmGetPopulation.defaultExpectation == nil {
		mmGetPopulation.defaultExpectation = &AccessorMockGetPopulationExpectation{}
	}

	return mmGetPopulation
}

// Inspect accepts an inspector function that has same arguments as the Accessor.GetPopulation
func (mmGetPopulation *mAccessorMockGetPopulation) Inspect(f func()) *mAccessorMockGetPopulation {
	if mmGetPopulation.mock.inspectFuncGetPopulation != nil {
		mmGetPopulation.mock.t.Fatalf("Inspect function is already set for AccessorMock.GetPopulation")
	}

	mmGetPopulation.mock.inspectFuncGetPopulation = f

	return mmGetPopulation
}

// Return sets up results that will be returned by Accessor.GetPopulation
func (mmGetPopulation *mAccessorMockGetPopulation) Return(o1 census.OnlinePopulation) *AccessorMock {
	if mmGetPopulation.mock.funcGetPopulation != nil {
		mmGetPopulation.mock.t.Fatalf("AccessorMock.GetPopulation mock is already set by Set")
	}

	if mmGetPopulation.defaultExpectation == nil {
		mmGetPopulation.defaultExpectation = &AccessorMockGetPopulationExpectation{mock: mmGetPopulation.mock}
	}
	mmGetPopulation.defaultExpectation.results = &AccessorMockGetPopulationResults{o1}
	return mmGetPopulation.mock
}

//Set uses given function f to mock the Accessor.GetPopulation method
func (mmGetPopulation *mAccessorMockGetPopulation) Set(f func() (o1 census.OnlinePopulation)) *AccessorMock {
	if mmGetPopulation.defaultExpectation != nil {
		mmGetPopulation.mock.t.Fatalf("Default expectation is already set for the Accessor.GetPopulation method")
	}

	if len(mmGetPopulation.expectations) > 0 {
		mmGetPopulation.mock.t.Fatalf("Some expectations are already set for the Accessor.GetPopulation method")
	}

	mmGetPopulation.mock.funcGetPopulation = f
	return mmGetPopulation.mock
}

// GetPopulation implements network.Accessor
func (mmGetPopulation *AccessorMock) GetPopulation() (o1 census.OnlinePopulation) {
	mm_atomic.AddUint64(&mmGetPopulation.beforeGetPopulationCounter, 1)
	defer mm_atomic.AddUint64(&mmGetPopulation.afterGetPopulationCounter, 1)

	if mmGetPopulation.inspectFuncGetPopulation != nil {
		mmGetPopulation.inspectFuncGetPopulation()
	}

	if mmGetPopulation.GetPopulationMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetPopulation.GetPopulationMock.defaultExpectation.Counter, 1)

		mm_results := mmGetPopulation.GetPopulationMock.defaultExpectation.results
		if mm_results == nil {
			mmGetPopulation.t.Fatal("No results are set for the AccessorMock.GetPopulation")
		}
		return (*mm_results).o1
	}
	if mmGetPopulation.funcGetPopulation != nil {
		return mmGetPopulation.funcGetPopulation()
	}
	mmGetPopulation.t.Fatalf("Unexpected call to AccessorMock.GetPopulation.")
	return
}

// GetPopulationAfterCounter returns a count of finished AccessorMock.GetPopulation invocations
func (mmGetPopulation *AccessorMock) GetPopulationAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetPopulation.afterGetPopulationCounter)
}

// GetPopulationBeforeCounter returns a count of AccessorMock.GetPopulation invocations
func (mmGetPopulation *AccessorMock) GetPopulationBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetPopulation.beforeGetPopulationCounter)
}

// MinimockGetPopulationDone returns true if the count of the GetPopulation invocations corresponds
// the number of defined expectations
func (m *AccessorMock) MinimockGetPopulationDone() bool {
	for _, e := range m.GetPopulationMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetPopulationMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetPopulationCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetPopulation != nil && mm_atomic.LoadUint64(&m.afterGetPopulationCounter) < 1 {
		return false
	}
	return true
}

// MinimockGetPopulationInspect logs each unmet expectation
func (m *AccessorMock) MinimockGetPopulationInspect() {
	for _, e := range m.GetPopulationMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Error("Expected call to AccessorMock.GetPopulation")
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetPopulationMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetPopulationCounter) < 1 {
		m.t.Error("Expected call to AccessorMock.GetPopulation")
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetPopulation != nil && mm_atomic.LoadUint64(&m.afterGetPopulationCounter) < 1 {
		m.t.Error("Expected call to AccessorMock.GetPopulation")
	}
}

type mAccessorMockGetPoweredNode struct {
	mock               *AccessorMock
	defaultExpectation *AccessorMockGetPoweredNodeExpectation
	expectations       []*AccessorMockGetPoweredNodeExpectation

	callArgs []*AccessorMockGetPoweredNodeParams
	mutex    sync.RWMutex
}

// AccessorMockGetPoweredNodeExpectation specifies expectation struct of the Accessor.GetPoweredNode
type AccessorMockGetPoweredNodeExpectation struct {
	mock    *AccessorMock
	params  *AccessorMockGetPoweredNodeParams
	results *AccessorMockGetPoweredNodeResults
	Counter uint64
}

// AccessorMockGetPoweredNodeParams contains parameters of the Accessor.GetPoweredNode
type AccessorMockGetPoweredNodeParams struct {
	ref reference.Global
}

// AccessorMockGetPoweredNodeResults contains results of the Accessor.GetPoweredNode
type AccessorMockGetPoweredNodeResults struct {
	n1 nodeinfo.NetworkNode
}

// Expect sets up expected params for Accessor.GetPoweredNode
func (mmGetPoweredNode *mAccessorMockGetPoweredNode) Expect(ref reference.Global) *mAccessorMockGetPoweredNode {
	if mmGetPoweredNode.mock.funcGetPoweredNode != nil {
		mmGetPoweredNode.mock.t.Fatalf("AccessorMock.GetPoweredNode mock is already set by Set")
	}

	if mmGetPoweredNode.defaultExpectation == nil {
		mmGetPoweredNode.defaultExpectation = &AccessorMockGetPoweredNodeExpectation{}
	}

	mmGetPoweredNode.defaultExpectation.params = &AccessorMockGetPoweredNodeParams{ref}
	for _, e := range mmGetPoweredNode.expectations {
		if minimock.Equal(e.params, mmGetPoweredNode.defaultExpectation.params) {
			mmGetPoweredNode.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGetPoweredNode.defaultExpectation.params)
		}
	}

	return mmGetPoweredNode
}

// Inspect accepts an inspector function that has same arguments as the Accessor.GetPoweredNode
func (mmGetPoweredNode *mAccessorMockGetPoweredNode) Inspect(f func(ref reference.Global)) *mAccessorMockGetPoweredNode {
	if mmGetPoweredNode.mock.inspectFuncGetPoweredNode != nil {
		mmGetPoweredNode.mock.t.Fatalf("Inspect function is already set for AccessorMock.GetPoweredNode")
	}

	mmGetPoweredNode.mock.inspectFuncGetPoweredNode = f

	return mmGetPoweredNode
}

// Return sets up results that will be returned by Accessor.GetPoweredNode
func (mmGetPoweredNode *mAccessorMockGetPoweredNode) Return(n1 nodeinfo.NetworkNode) *AccessorMock {
	if mmGetPoweredNode.mock.funcGetPoweredNode != nil {
		mmGetPoweredNode.mock.t.Fatalf("AccessorMock.GetPoweredNode mock is already set by Set")
	}

	if mmGetPoweredNode.defaultExpectation == nil {
		mmGetPoweredNode.defaultExpectation = &AccessorMockGetPoweredNodeExpectation{mock: mmGetPoweredNode.mock}
	}
	mmGetPoweredNode.defaultExpectation.results = &AccessorMockGetPoweredNodeResults{n1}
	return mmGetPoweredNode.mock
}

//Set uses given function f to mock the Accessor.GetPoweredNode method
func (mmGetPoweredNode *mAccessorMockGetPoweredNode) Set(f func(ref reference.Global) (n1 nodeinfo.NetworkNode)) *AccessorMock {
	if mmGetPoweredNode.defaultExpectation != nil {
		mmGetPoweredNode.mock.t.Fatalf("Default expectation is already set for the Accessor.GetPoweredNode method")
	}

	if len(mmGetPoweredNode.expectations) > 0 {
		mmGetPoweredNode.mock.t.Fatalf("Some expectations are already set for the Accessor.GetPoweredNode method")
	}

	mmGetPoweredNode.mock.funcGetPoweredNode = f
	return mmGetPoweredNode.mock
}

// When sets expectation for the Accessor.GetPoweredNode which will trigger the result defined by the following
// Then helper
func (mmGetPoweredNode *mAccessorMockGetPoweredNode) When(ref reference.Global) *AccessorMockGetPoweredNodeExpectation {
	if mmGetPoweredNode.mock.funcGetPoweredNode != nil {
		mmGetPoweredNode.mock.t.Fatalf("AccessorMock.GetPoweredNode mock is already set by Set")
	}

	expectation := &AccessorMockGetPoweredNodeExpectation{
		mock:   mmGetPoweredNode.mock,
		params: &AccessorMockGetPoweredNodeParams{ref},
	}
	mmGetPoweredNode.expectations = append(mmGetPoweredNode.expectations, expectation)
	return expectation
}

// Then sets up Accessor.GetPoweredNode return parameters for the expectation previously defined by the When method
func (e *AccessorMockGetPoweredNodeExpectation) Then(n1 nodeinfo.NetworkNode) *AccessorMock {
	e.results = &AccessorMockGetPoweredNodeResults{n1}
	return e.mock
}

// GetPoweredNode implements network.Accessor
func (mmGetPoweredNode *AccessorMock) GetPoweredNode(ref reference.Global) (n1 nodeinfo.NetworkNode) {
	mm_atomic.AddUint64(&mmGetPoweredNode.beforeGetPoweredNodeCounter, 1)
	defer mm_atomic.AddUint64(&mmGetPoweredNode.afterGetPoweredNodeCounter, 1)

	if mmGetPoweredNode.inspectFuncGetPoweredNode != nil {
		mmGetPoweredNode.inspectFuncGetPoweredNode(ref)
	}

	mm_params := &AccessorMockGetPoweredNodeParams{ref}

	// Record call args
	mmGetPoweredNode.GetPoweredNodeMock.mutex.Lock()
	mmGetPoweredNode.GetPoweredNodeMock.callArgs = append(mmGetPoweredNode.GetPoweredNodeMock.callArgs, mm_params)
	mmGetPoweredNode.GetPoweredNodeMock.mutex.Unlock()

	for _, e := range mmGetPoweredNode.GetPoweredNodeMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.n1
		}
	}

	if mmGetPoweredNode.GetPoweredNodeMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetPoweredNode.GetPoweredNodeMock.defaultExpectation.Counter, 1)
		mm_want := mmGetPoweredNode.GetPoweredNodeMock.defaultExpectation.params
		mm_got := AccessorMockGetPoweredNodeParams{ref}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGetPoweredNode.t.Errorf("AccessorMock.GetPoweredNode got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGetPoweredNode.GetPoweredNodeMock.defaultExpectation.results
		if mm_results == nil {
			mmGetPoweredNode.t.Fatal("No results are set for the AccessorMock.GetPoweredNode")
		}
		return (*mm_results).n1
	}
	if mmGetPoweredNode.funcGetPoweredNode != nil {
		return mmGetPoweredNode.funcGetPoweredNode(ref)
	}
	mmGetPoweredNode.t.Fatalf("Unexpected call to AccessorMock.GetPoweredNode. %v", ref)
	return
}

// GetPoweredNodeAfterCounter returns a count of finished AccessorMock.GetPoweredNode invocations
func (mmGetPoweredNode *AccessorMock) GetPoweredNodeAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetPoweredNode.afterGetPoweredNodeCounter)
}

// GetPoweredNodeBeforeCounter returns a count of AccessorMock.GetPoweredNode invocations
func (mmGetPoweredNode *AccessorMock) GetPoweredNodeBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetPoweredNode.beforeGetPoweredNodeCounter)
}

// Calls returns a list of arguments used in each call to AccessorMock.GetPoweredNode.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGetPoweredNode *mAccessorMockGetPoweredNode) Calls() []*AccessorMockGetPoweredNodeParams {
	mmGetPoweredNode.mutex.RLock()

	argCopy := make([]*AccessorMockGetPoweredNodeParams, len(mmGetPoweredNode.callArgs))
	copy(argCopy, mmGetPoweredNode.callArgs)

	mmGetPoweredNode.mutex.RUnlock()

	return argCopy
}

// MinimockGetPoweredNodeDone returns true if the count of the GetPoweredNode invocations corresponds
// the number of defined expectations
func (m *AccessorMock) MinimockGetPoweredNodeDone() bool {
	for _, e := range m.GetPoweredNodeMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetPoweredNodeMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetPoweredNodeCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetPoweredNode != nil && mm_atomic.LoadUint64(&m.afterGetPoweredNodeCounter) < 1 {
		return false
	}
	return true
}

// MinimockGetPoweredNodeInspect logs each unmet expectation
func (m *AccessorMock) MinimockGetPoweredNodeInspect() {
	for _, e := range m.GetPoweredNodeMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to AccessorMock.GetPoweredNode with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetPoweredNodeMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetPoweredNodeCounter) < 1 {
		if m.GetPoweredNodeMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to AccessorMock.GetPoweredNode")
		} else {
			m.t.Errorf("Expected call to AccessorMock.GetPoweredNode with params: %#v", *m.GetPoweredNodeMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetPoweredNode != nil && mm_atomic.LoadUint64(&m.afterGetPoweredNodeCounter) < 1 {
		m.t.Error("Expected call to AccessorMock.GetPoweredNode")
	}
}

type mAccessorMockGetPulseNumber struct {
	mock               *AccessorMock
	defaultExpectation *AccessorMockGetPulseNumberExpectation
	expectations       []*AccessorMockGetPulseNumberExpectation
}

// AccessorMockGetPulseNumberExpectation specifies expectation struct of the Accessor.GetPulseNumber
type AccessorMockGetPulseNumberExpectation struct {
	mock *AccessorMock

	results *AccessorMockGetPulseNumberResults
	Counter uint64
}

// AccessorMockGetPulseNumberResults contains results of the Accessor.GetPulseNumber
type AccessorMockGetPulseNumberResults struct {
	n1 pulse.Number
}

// Expect sets up expected params for Accessor.GetPulseNumber
func (mmGetPulseNumber *mAccessorMockGetPulseNumber) Expect() *mAccessorMockGetPulseNumber {
	if mmGetPulseNumber.mock.funcGetPulseNumber != nil {
		mmGetPulseNumber.mock.t.Fatalf("AccessorMock.GetPulseNumber mock is already set by Set")
	}

	if mmGetPulseNumber.defaultExpectation == nil {
		mmGetPulseNumber.defaultExpectation = &AccessorMockGetPulseNumberExpectation{}
	}

	return mmGetPulseNumber
}

// Inspect accepts an inspector function that has same arguments as the Accessor.GetPulseNumber
func (mmGetPulseNumber *mAccessorMockGetPulseNumber) Inspect(f func()) *mAccessorMockGetPulseNumber {
	if mmGetPulseNumber.mock.inspectFuncGetPulseNumber != nil {
		mmGetPulseNumber.mock.t.Fatalf("Inspect function is already set for AccessorMock.GetPulseNumber")
	}

	mmGetPulseNumber.mock.inspectFuncGetPulseNumber = f

	return mmGetPulseNumber
}

// Return sets up results that will be returned by Accessor.GetPulseNumber
func (mmGetPulseNumber *mAccessorMockGetPulseNumber) Return(n1 pulse.Number) *AccessorMock {
	if mmGetPulseNumber.mock.funcGetPulseNumber != nil {
		mmGetPulseNumber.mock.t.Fatalf("AccessorMock.GetPulseNumber mock is already set by Set")
	}

	if mmGetPulseNumber.defaultExpectation == nil {
		mmGetPulseNumber.defaultExpectation = &AccessorMockGetPulseNumberExpectation{mock: mmGetPulseNumber.mock}
	}
	mmGetPulseNumber.defaultExpectation.results = &AccessorMockGetPulseNumberResults{n1}
	return mmGetPulseNumber.mock
}

//Set uses given function f to mock the Accessor.GetPulseNumber method
func (mmGetPulseNumber *mAccessorMockGetPulseNumber) Set(f func() (n1 pulse.Number)) *AccessorMock {
	if mmGetPulseNumber.defaultExpectation != nil {
		mmGetPulseNumber.mock.t.Fatalf("Default expectation is already set for the Accessor.GetPulseNumber method")
	}

	if len(mmGetPulseNumber.expectations) > 0 {
		mmGetPulseNumber.mock.t.Fatalf("Some expectations are already set for the Accessor.GetPulseNumber method")
	}

	mmGetPulseNumber.mock.funcGetPulseNumber = f
	return mmGetPulseNumber.mock
}

// GetPulseNumber implements network.Accessor
func (mmGetPulseNumber *AccessorMock) GetPulseNumber() (n1 pulse.Number) {
	mm_atomic.AddUint64(&mmGetPulseNumber.beforeGetPulseNumberCounter, 1)
	defer mm_atomic.AddUint64(&mmGetPulseNumber.afterGetPulseNumberCounter, 1)

	if mmGetPulseNumber.inspectFuncGetPulseNumber != nil {
		mmGetPulseNumber.inspectFuncGetPulseNumber()
	}

	if mmGetPulseNumber.GetPulseNumberMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetPulseNumber.GetPulseNumberMock.defaultExpectation.Counter, 1)

		mm_results := mmGetPulseNumber.GetPulseNumberMock.defaultExpectation.results
		if mm_results == nil {
			mmGetPulseNumber.t.Fatal("No results are set for the AccessorMock.GetPulseNumber")
		}
		return (*mm_results).n1
	}
	if mmGetPulseNumber.funcGetPulseNumber != nil {
		return mmGetPulseNumber.funcGetPulseNumber()
	}
	mmGetPulseNumber.t.Fatalf("Unexpected call to AccessorMock.GetPulseNumber.")
	return
}

// GetPulseNumberAfterCounter returns a count of finished AccessorMock.GetPulseNumber invocations
func (mmGetPulseNumber *AccessorMock) GetPulseNumberAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetPulseNumber.afterGetPulseNumberCounter)
}

// GetPulseNumberBeforeCounter returns a count of AccessorMock.GetPulseNumber invocations
func (mmGetPulseNumber *AccessorMock) GetPulseNumberBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetPulseNumber.beforeGetPulseNumberCounter)
}

// MinimockGetPulseNumberDone returns true if the count of the GetPulseNumber invocations corresponds
// the number of defined expectations
func (m *AccessorMock) MinimockGetPulseNumberDone() bool {
	for _, e := range m.GetPulseNumberMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetPulseNumberMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetPulseNumberCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetPulseNumber != nil && mm_atomic.LoadUint64(&m.afterGetPulseNumberCounter) < 1 {
		return false
	}
	return true
}

// MinimockGetPulseNumberInspect logs each unmet expectation
func (m *AccessorMock) MinimockGetPulseNumberInspect() {
	for _, e := range m.GetPulseNumberMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Error("Expected call to AccessorMock.GetPulseNumber")
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetPulseNumberMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetPulseNumberCounter) < 1 {
		m.t.Error("Expected call to AccessorMock.GetPulseNumber")
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetPulseNumber != nil && mm_atomic.LoadUint64(&m.afterGetPulseNumberCounter) < 1 {
		m.t.Error("Expected call to AccessorMock.GetPulseNumber")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *AccessorMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockGetLocalNodeInspect()

		m.MinimockGetOnlineNodeInspect()

		m.MinimockGetOnlineNodeByAddrInspect()

		m.MinimockGetOnlineNodesInspect()

		m.MinimockGetPopulationInspect()

		m.MinimockGetPoweredNodeInspect()

		m.MinimockGetPulseNumberInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *AccessorMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *AccessorMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockGetLocalNodeDone() &&
		m.MinimockGetOnlineNodeDone() &&
		m.MinimockGetOnlineNodeByAddrDone() &&
		m.MinimockGetOnlineNodesDone() &&
		m.MinimockGetPopulationDone() &&
		m.MinimockGetPoweredNodeDone() &&
		m.MinimockGetPulseNumberDone()
}
