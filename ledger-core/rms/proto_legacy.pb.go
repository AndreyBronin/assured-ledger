// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto_legacy.proto

package rms

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_insolar_assured_ledger_ledger_core_pulse "github.com/insolar/assured-ledger/ledger-core/pulse"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type PulseProto struct {
	PulseNumber      github_com_insolar_assured_ledger_ledger_core_pulse.Number `protobuf:"varint,1,opt,name=PulseNumber,proto3,customtype=github.com/insolar/assured-ledger/ledger-core/pulse.Number" json:"PulseNumber"`
	PrevPulseNumber  github_com_insolar_assured_ledger_ledger_core_pulse.Number `protobuf:"varint,2,opt,name=PrevPulseNumber,proto3,customtype=github.com/insolar/assured-ledger/ledger-core/pulse.Number" json:"PrevPulseNumber"`
	NextPulseNumber  github_com_insolar_assured_ledger_ledger_core_pulse.Number `protobuf:"varint,3,opt,name=NextPulseNumber,proto3,customtype=github.com/insolar/assured-ledger/ledger-core/pulse.Number" json:"NextPulseNumber"`
	PulseTimestamp   int64                                                      `protobuf:"varint,4,opt,name=PulseTimestamp,proto3" json:"PulseTimestamp,omitempty"`
	EpochPulseNumber int32                                                      `protobuf:"varint,5,opt,name=EpochPulseNumber,proto3" json:"EpochPulseNumber,omitempty"`
	OriginID         []byte                                                     `protobuf:"bytes,6,opt,name=OriginID,proto3" json:"OriginID,omitempty"`
	Entropy          Entropy                                                    `protobuf:"bytes,7,opt,name=Entropy,proto3,customtype=Entropy" json:"Entropy"`
}

func (m *PulseProto) Reset()         { *m = PulseProto{} }
func (m *PulseProto) String() string { return proto.CompactTextString(m) }
func (*PulseProto) ProtoMessage()    {}
func (*PulseProto) Descriptor() ([]byte, []int) {
	return fileDescriptor_ed8d6024149e2f7b, []int{0}
}
func (m *PulseProto) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PulseProto) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *PulseProto) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PulseProto.Merge(m, src)
}
func (m *PulseProto) XXX_Size() int {
	return m.ProtoSize()
}
func (m *PulseProto) XXX_DiscardUnknown() {
	xxx_messageInfo_PulseProto.DiscardUnknown(m)
}

var xxx_messageInfo_PulseProto proto.InternalMessageInfo

func init() {
	proto.RegisterType((*PulseProto)(nil), "rms.PulseProto")
}

func init() { proto.RegisterFile("proto_legacy.proto", fileDescriptor_ed8d6024149e2f7b) }

var fileDescriptor_ed8d6024149e2f7b = []byte{
	// 324 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x92, 0xbf, 0x4e, 0x83, 0x40,
	0x1c, 0xc7, 0xef, 0xc4, 0xb6, 0xe6, 0xfc, 0x53, 0x73, 0x13, 0xe9, 0x70, 0x25, 0x0e, 0x06, 0x4d,
	0x5a, 0x06, 0x37, 0x47, 0x62, 0x07, 0x97, 0xda, 0x10, 0x77, 0x03, 0xf4, 0xbc, 0x92, 0x00, 0x47,
	0xee, 0xc0, 0xd8, 0xb7, 0xf0, 0x11, 0x7c, 0x1c, 0xc6, 0x8e, 0x8d, 0x43, 0x63, 0x61, 0xf2, 0x0d,
	0x1c, 0x0d, 0x87, 0x35, 0x04, 0xd7, 0x4e, 0xfc, 0x3e, 0xdf, 0x5f, 0xf8, 0x7c, 0xef, 0x92, 0x43,
	0x38, 0x11, 0x3c, 0xe5, 0x4f, 0x21, 0x65, 0xae, 0xbf, 0x1c, 0x2b, 0xc0, 0x9a, 0x88, 0xe4, 0x60,
	0xc4, 0x82, 0x74, 0x91, 0x79, 0x63, 0x9f, 0x47, 0x16, 0xe3, 0x8c, 0x5b, 0x6a, 0xe7, 0x65, 0xcf,
	0x8a, 0x14, 0xa8, 0xa9, 0xfe, 0xe7, 0xe2, 0x4b, 0x43, 0x68, 0x96, 0x85, 0x92, 0xce, 0x94, 0x62,
	0x8e, 0x8e, 0x15, 0x4d, 0xb3, 0xc8, 0xa3, 0x42, 0x87, 0x06, 0x34, 0x4f, 0x6d, 0x3b, 0xdf, 0x0c,
	0xc1, 0xc7, 0x66, 0x78, 0xdb, 0x50, 0x07, 0xb1, 0xe4, 0xa1, 0x2b, 0x2c, 0x57, 0xca, 0x4c, 0xd0,
	0xf9, 0x28, 0xa4, 0x73, 0x46, 0x85, 0x55, 0x7f, 0x46, 0x3e, 0x17, 0xd4, 0x4a, 0x2a, 0xd1, 0xb8,
	0x36, 0x39, 0x4d, 0x2d, 0x0e, 0x51, 0x7f, 0x26, 0xe8, 0x4b, 0xb3, 0xe9, 0x60, 0x6f, 0x4d, 0x6d,
	0x75, 0xd5, 0x36, 0xa5, 0xaf, 0x69, 0xb3, 0x4d, 0xdb, 0x5f, 0x5b, 0x4b, 0x8d, 0x2f, 0xd1, 0x99,
	0xc2, 0xc7, 0x20, 0xa2, 0x32, 0x75, 0xa3, 0x44, 0x3f, 0x34, 0xa0, 0xa9, 0x39, 0xad, 0x14, 0x5f,
	0xa3, 0xf3, 0x49, 0xc2, 0xfd, 0x45, 0xf3, 0x58, 0x1d, 0x03, 0x9a, 0x1d, 0xe7, 0x5f, 0x8e, 0x07,
	0xe8, 0xe8, 0x41, 0x04, 0x2c, 0x88, 0xef, 0xef, 0xf4, 0xae, 0x01, 0xcd, 0x13, 0xe7, 0x8f, 0xf1,
	0x15, 0xea, 0x4d, 0xe2, 0x54, 0xf0, 0x64, 0xa9, 0xf7, 0xaa, 0x95, 0xdd, 0xff, 0xbd, 0xd5, 0x2e,
	0x76, 0x76, 0x83, 0x6d, 0xe6, 0x5b, 0x02, 0xbe, 0xb7, 0x04, 0xe4, 0x05, 0x81, 0xab, 0x82, 0xc0,
	0x75, 0x41, 0xe0, 0x67, 0x41, 0xc0, 0x5b, 0x49, 0xc0, 0x7b, 0x49, 0xe0, 0xaa, 0x24, 0x60, 0x5d,
	0x12, 0xe0, 0x75, 0xd5, 0xe3, 0xb8, 0xf9, 0x09, 0x00, 0x00, 0xff, 0xff, 0x4c, 0xfa, 0x8d, 0x42,
	0x66, 0x02, 0x00, 0x00,
}

func (m *PulseProto) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PulseProto) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PulseProto) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l, fieldEnd int
	_, _ = l, fieldEnd
	{
		size := m.Entropy.ProtoSize()
		i -= size
		if _, err := m.Entropy.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintProtoLegacy(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3a
	if len(m.OriginID) > 0 {
		i -= len(m.OriginID)
		copy(dAtA[i:], m.OriginID)
		i = encodeVarintProtoLegacy(dAtA, i, uint64(len(m.OriginID)))
		i--
		dAtA[i] = 0x32
	}
	if m.EpochPulseNumber != 0 {
		i = encodeVarintProtoLegacy(dAtA, i, uint64(m.EpochPulseNumber))
		i--
		dAtA[i] = 0x28
	}
	if m.PulseTimestamp != 0 {
		i = encodeVarintProtoLegacy(dAtA, i, uint64(m.PulseTimestamp))
		i--
		dAtA[i] = 0x20
	}
	if m.NextPulseNumber != 0 {
		i = encodeVarintProtoLegacy(dAtA, i, uint64(m.NextPulseNumber))
		i--
		dAtA[i] = 0x18
	}
	if m.PrevPulseNumber != 0 {
		i = encodeVarintProtoLegacy(dAtA, i, uint64(m.PrevPulseNumber))
		i--
		dAtA[i] = 0x10
	}
	if m.PulseNumber != 0 {
		i = encodeVarintProtoLegacy(dAtA, i, uint64(m.PulseNumber))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintProtoLegacy(dAtA []byte, offset int, v uint64) int {
	offset -= sovProtoLegacy(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}

func (m *PulseProto) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PulseNumber != 0 {
		n += 1 + sovProtoLegacy(uint64(m.PulseNumber))
	}
	if m.PrevPulseNumber != 0 {
		n += 1 + sovProtoLegacy(uint64(m.PrevPulseNumber))
	}
	if m.NextPulseNumber != 0 {
		n += 1 + sovProtoLegacy(uint64(m.NextPulseNumber))
	}
	if m.PulseTimestamp != 0 {
		n += 1 + sovProtoLegacy(uint64(m.PulseTimestamp))
	}
	if m.EpochPulseNumber != 0 {
		n += 1 + sovProtoLegacy(uint64(m.EpochPulseNumber))
	}
	l = len(m.OriginID)
	if l > 0 {
		n += 1 + l + sovProtoLegacy(uint64(l))
	}
	l = m.Entropy.ProtoSize()
	n += 1 + l + sovProtoLegacy(uint64(l))
	return n
}

func sovProtoLegacy(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozProtoLegacy(x uint64) (n int) {
	return sovProtoLegacy(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *PulseProto) Unmarshal(dAtA []byte) error {
	return m.UnmarshalWithUnknownCallback(dAtA, skipProtoLegacy)
}
func (m *PulseProto) UnmarshalWithUnknownCallback(dAtA []byte, skipFn func([]byte) (int, error)) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtoLegacy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PulseProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PulseProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PulseNumber", wireType)
			}
			m.PulseNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtoLegacy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PulseNumber |= github_com_insolar_assured_ledger_ledger_core_pulse.Number(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrevPulseNumber", wireType)
			}
			m.PrevPulseNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtoLegacy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PrevPulseNumber |= github_com_insolar_assured_ledger_ledger_core_pulse.Number(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextPulseNumber", wireType)
			}
			m.NextPulseNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtoLegacy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NextPulseNumber |= github_com_insolar_assured_ledger_ledger_core_pulse.Number(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PulseTimestamp", wireType)
			}
			m.PulseTimestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtoLegacy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PulseTimestamp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochPulseNumber", wireType)
			}
			m.EpochPulseNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtoLegacy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EpochPulseNumber |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OriginID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtoLegacy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthProtoLegacy
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthProtoLegacy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OriginID = append(m.OriginID[:0], dAtA[iNdEx:postIndex]...)
			if m.OriginID == nil {
				m.OriginID = []byte{}
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Entropy", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtoLegacy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthProtoLegacy
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthProtoLegacy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Entropy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFn(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				l = iNdEx
				break
			}
			if skippy == 0 {
				if skippy, err = skipProtoLegacy(dAtA[iNdEx:]); err != nil {
					return err
				}
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProtoLegacy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipProtoLegacy(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowProtoLegacy
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProtoLegacy
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProtoLegacy
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthProtoLegacy
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupProtoLegacy
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthProtoLegacy
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthProtoLegacy        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowProtoLegacy          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupProtoLegacy = fmt.Errorf("proto: unexpected end of group")
	ErrExpectedBinaryMarkerProtoLegacy = fmt.Errorf("proto: binary marker was expected")
)
