// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto_record.proto

package example

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_insolar_assured_ledger_ledger_core_insproto "github.com/insolar/assured-ledger/ledger-core/insproto"
	insproto "github.com/insolar/assured-ledger/ledger-core/insproto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type RecordExample struct {
	Polymorph  uint32 `protobuf:"varint,16,opt,name=Polymorph,proto3" json:"Polymorph"`
	RecordBody `protobuf:"bytes,19,opt,name=RecordBody,proto3,embedded=RecordBody" json:"RecordBody"`
	Str        Binary             `protobuf:"bytes,40,opt,name=Str,proto3" json:"Str"`
	Ref1       Reference          `protobuf:"bytes,41,opt,name=Ref1,proto3" json:"Ref1"`
	AsOf       PulseNumber        `protobuf:"varint,42,opt,name=AsOf,proto3,casttype=PulseNumber" json:"AsOf"`
	FieldMap   *insproto.FieldMap `protobuf:"bytes,19999,opt,name=FieldMap,proto3" json:"FieldMap,omitempty"`
}

func (m *RecordExample) Reset()         { *m = RecordExample{} }
func (m *RecordExample) String() string { return proto.CompactTextString(m) }
func (*RecordExample) ProtoMessage()    {}
func (*RecordExample) Descriptor() ([]byte, []int) {
	return fileDescriptor_ba3b0f097f066e95, []int{0}
}
func (m *RecordExample) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RecordExample) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *RecordExample) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RecordExample.Merge(m, src)
}
func (m *RecordExample) XXX_Size() int {
	return m.ProtoSize()
}
func (m *RecordExample) XXX_DiscardUnknown() {
	xxx_messageInfo_RecordExample.DiscardUnknown(m)
}

var xxx_messageInfo_RecordExample proto.InternalMessageInfo

func (m *RecordExample) GetPolymorph() uint32 {
	if m != nil {
		return m.Polymorph
	}
	return 0
}

func (m *RecordExample) GetStr() Binary {
	if m != nil {
		return m.Str
	}
	return Binary{}
}

func (m *RecordExample) GetRef1() Reference {
	if m != nil {
		return m.Ref1
	}
	return Reference{}
}

func (m *RecordExample) GetAsOf() PulseNumber {
	if m != nil {
		return m.AsOf
	}
	return 0
}

func (m *RecordExample) GetFieldMap() *insproto.FieldMap {
	if m != nil {
		return m.FieldMap
	}
	return nil
}

type RecordEmbedded struct {
	Polymorph  uint32 `protobuf:"varint,16,opt,name=Polymorph,proto3" json:"Polymorph"`
	RecordBody `protobuf:"bytes,19,opt,name=RecordBody,proto3,embedded=RecordBody" json:"RecordBody"`
	Str        Binary             `protobuf:"bytes,40,opt,name=Str,proto3" json:"Str"`
	Ref1       Reference          `protobuf:"bytes,41,opt,name=Ref1,proto3" json:"Ref1"`
	AsOf       PulseNumber        `protobuf:"varint,42,opt,name=AsOf,proto3,casttype=PulseNumber" json:"AsOf"`
	FieldMap   *insproto.FieldMap `protobuf:"bytes,19999,opt,name=FieldMap,proto3" json:"FieldMap,omitempty"`
}

func (m *RecordEmbedded) Reset()         { *m = RecordEmbedded{} }
func (m *RecordEmbedded) String() string { return proto.CompactTextString(m) }
func (*RecordEmbedded) ProtoMessage()    {}
func (*RecordEmbedded) Descriptor() ([]byte, []int) {
	return fileDescriptor_ba3b0f097f066e95, []int{1}
}
func (m *RecordEmbedded) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RecordEmbedded) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *RecordEmbedded) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RecordEmbedded.Merge(m, src)
}
func (m *RecordEmbedded) XXX_Size() int {
	return m.ProtoSize()
}
func (m *RecordEmbedded) XXX_DiscardUnknown() {
	xxx_messageInfo_RecordEmbedded.DiscardUnknown(m)
}

var xxx_messageInfo_RecordEmbedded proto.InternalMessageInfo

func (m *RecordEmbedded) GetPolymorph() uint32 {
	if m != nil {
		return m.Polymorph
	}
	return 0
}

func (m *RecordEmbedded) GetStr() Binary {
	if m != nil {
		return m.Str
	}
	return Binary{}
}

func (m *RecordEmbedded) GetRef1() Reference {
	if m != nil {
		return m.Ref1
	}
	return Reference{}
}

func (m *RecordEmbedded) GetAsOf() PulseNumber {
	if m != nil {
		return m.AsOf
	}
	return 0
}

func (m *RecordEmbedded) GetFieldMap() *insproto.FieldMap {
	if m != nil {
		return m.FieldMap
	}
	return nil
}

func init() {
	proto.RegisterType((*RecordExample)(nil), "example.RecordExample")
	proto.RegisterType((*RecordEmbedded)(nil), "example.RecordEmbedded")
}

func init() { proto.RegisterFile("proto_record.proto", fileDescriptor_ba3b0f097f066e95) }

var fileDescriptor_ba3b0f097f066e95 = []byte{
	// 494 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x93, 0x41, 0x8b, 0xd3, 0x40,
	0x14, 0xc7, 0x33, 0x35, 0xae, 0xe9, 0xac, 0xbb, 0xc6, 0xe9, 0x1e, 0xc2, 0x1e, 0x66, 0x4a, 0x41,
	0xb6, 0x8a, 0x6d, 0x51, 0x6f, 0xa2, 0xa0, 0x01, 0x3d, 0x14, 0xd4, 0x25, 0x8a, 0x57, 0x69, 0x93,
	0xd7, 0x6c, 0x20, 0xe9, 0x84, 0x49, 0x22, 0xf6, 0x96, 0x8f, 0x20, 0x1e, 0xc4, 0x06, 0xc1, 0x1e,
	0xc5, 0x8b, 0xe0, 0x27, 0xf0, 0x66, 0x8f, 0xbd, 0xd9, 0x53, 0x71, 0xd3, 0x8b, 0x47, 0x6f, 0xca,
	0x9e, 0xa4, 0x93, 0xec, 0x6e, 0x6f, 0xfa, 0x01, 0xf6, 0x94, 0x79, 0xf3, 0x7e, 0xff, 0x79, 0xff,
	0xf7, 0x87, 0x60, 0x12, 0x0a, 0x1e, 0xf3, 0x17, 0x02, 0x6c, 0x2e, 0x9c, 0xb6, 0x2c, 0xc8, 0x05,
	0x78, 0xd5, 0x0b, 0x42, 0x1f, 0x76, 0x5b, 0xae, 0x17, 0x1f, 0x24, 0xfd, 0xb6, 0xcd, 0x83, 0x8e,
	0xcb, 0x5d, 0xde, 0x91, 0xfd, 0x7e, 0x32, 0x90, 0x95, 0x2c, 0xe4, 0xa9, 0xd0, 0xed, 0xde, 0x5b,
	0xc3, 0xbd, 0x61, 0xc4, 0xfd, 0x9e, 0xe8, 0xf4, 0xa2, 0x28, 0x11, 0xe0, 0xb4, 0x7c, 0x70, 0x5c,
	0x10, 0x9d, 0xe2, 0xd3, 0xb2, 0xb9, 0x80, 0x15, 0x52, 0x3c, 0xe1, 0x0d, 0xa3, 0xf2, 0x85, 0xaa,
	0x08, 0xca, 0x63, 0xe3, 0x7b, 0x05, 0x6f, 0x59, 0xd2, 0xd5, 0x83, 0xc2, 0x0d, 0x69, 0xe0, 0xea,
	0x3e, 0xf7, 0x47, 0x01, 0x17, 0xe1, 0x81, 0xa1, 0xd7, 0x51, 0x73, 0xcb, 0x54, 0xa7, 0x0b, 0xa6,
	0x58, 0xa7, 0xd7, 0xe4, 0x2e, 0xc6, 0x85, 0xc8, 0xe4, 0xce, 0xc8, 0xa8, 0xd5, 0x51, 0x73, 0xf3,
	0x66, 0xad, 0x5d, 0xee, 0xd3, 0x3e, 0x6d, 0x99, 0xda, 0x4a, 0x39, 0x5b, 0x30, 0x64, 0xad, 0x09,
	0xc8, 0x1e, 0x3e, 0xf7, 0x34, 0x16, 0x46, 0x53, 0xea, 0x2e, 0x9d, 0xe8, 0x4c, 0x6f, 0xd8, 0x13,
	0xa3, 0x72, 0xda, 0x8a, 0x20, 0x77, 0xb0, 0x6a, 0xc1, 0xe0, 0x86, 0x71, 0x55, 0x92, 0x64, 0x6d,
	0xc2, 0x00, 0x04, 0x0c, 0x6d, 0x30, 0x77, 0x56, 0xf0, 0xd1, 0xdb, 0xfa, 0x45, 0x0b, 0xec, 0x93,
	0x5b, 0x4b, 0xaa, 0xc8, 0x1e, 0x56, 0xef, 0x47, 0x4f, 0x06, 0xc6, 0x35, 0xb9, 0x44, 0x4d, 0x92,
	0x0b, 0xb6, 0xb9, 0x9f, 0xf8, 0x11, 0x3c, 0x4e, 0x82, 0x3e, 0x08, 0x4b, 0x02, 0xe4, 0x3a, 0xd6,
	0x1e, 0x7a, 0xe0, 0x3b, 0x8f, 0x7a, 0xa1, 0xf1, 0xe1, 0x3d, 0x2a, 0x87, 0x1d, 0x07, 0xd7, 0x3e,
	0xee, 0x49, 0x67, 0xe8, 0xb6, 0xf6, 0x75, 0xce, 0x7e, 0x7f, 0xfb, 0x3c, 0xb9, 0xd2, 0x55, 0x35,
	0xa4, 0xeb, 0x5d, 0x55, 0xbb, 0xac, 0xd7, 0xba, 0xaa, 0xb6, 0xa3, 0x37, 0xbb, 0x55, 0x2d, 0xdd,
	0xd6, 0xd3, 0x34, 0x4d, 0x2b, 0x8d, 0x79, 0x05, 0x6f, 0x97, 0xc9, 0x06, 0x7d, 0x70, 0x1c, 0x70,
	0xce, 0xa2, 0xfd, 0x9f, 0x68, 0xff, 0xfc, 0x33, 0x5a, 0xf3, 0xe5, 0xf4, 0x90, 0xa2, 0xd9, 0x21,
	0x55, 0x3e, 0xe6, 0x14, 0x4d, 0x73, 0x8a, 0x66, 0x39, 0x45, 0xf3, 0x9c, 0xa2, 0x1f, 0x39, 0x55,
	0x5e, 0x2f, 0xa9, 0x32, 0x59, 0x52, 0x34, 0x5b, 0x52, 0x65, 0xbe, 0xa4, 0xca, 0xcf, 0x31, 0x43,
	0xbf, 0xc6, 0x0c, 0x1d, 0x8d, 0xd9, 0x46, 0x11, 0xd4, 0x9b, 0x8c, 0x9d, 0x7f, 0xee, 0x45, 0x5e,
	0xfc, 0x2e, 0x63, 0x68, 0x92, 0x31, 0xf4, 0x29, 0x63, 0xc4, 0x02, 0xd7, 0x8b, 0x62, 0x10, 0x05,
	0xf2, 0x6c, 0x14, 0xc2, 0x97, 0x8c, 0x95, 0xbf, 0x86, 0x84, 0xb9, 0xe8, 0x6f, 0x48, 0xd3, 0xb7,
	0xfe, 0x06, 0x00, 0x00, 0xff, 0xff, 0x01, 0xe6, 0x89, 0x64, 0xce, 0x03, 0x00, 0x00,
}

func (this *RecordExample) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RecordExample)
	if !ok {
		that2, ok := that.(RecordExample)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Polymorph != that1.Polymorph {
		return false
	}
	if !this.RecordBody.Equal(&that1.RecordBody) {
		return false
	}
	if !this.Str.Equal(&that1.Str) {
		return false
	}
	if !this.Ref1.Equal(&that1.Ref1) {
		return false
	}
	if this.AsOf != that1.AsOf {
		return false
	}
	if !this.FieldMap.Equal(that1.FieldMap) {
		return false
	}
	return true
}
func (this *RecordEmbedded) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RecordEmbedded)
	if !ok {
		that2, ok := that.(RecordEmbedded)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Polymorph != that1.Polymorph {
		return false
	}
	if !this.RecordBody.Equal(&that1.RecordBody) {
		return false
	}
	if !this.Str.Equal(&that1.Str) {
		return false
	}
	if !this.Ref1.Equal(&that1.Ref1) {
		return false
	}
	if this.AsOf != that1.AsOf {
		return false
	}
	if !this.FieldMap.Equal(that1.FieldMap) {
		return false
	}
	return true
}
func (m *RecordExample) Visit(ctx RecordVisitor) error {
	if err := ctx.RecReference(m, 41, &m.Ref1); err != nil {
		return err
	}
	return ctx.Record(m, 9999999991)
}

const TypeRecordExamplePolymorphID = 9999999991

func (*RecordExample) GetDefaultPolymorphID() uint64 {
	return 9999999991
}

func (m *RecordExample) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	if n != size {
		panic("illegal state")
	}
	return dAtA[:n], nil
}

func (m *RecordExample) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RecordExample) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l, fieldEnd int
	_, _ = l, fieldEnd
	m.FieldMap.UnsetMap()
	fieldEnd = i
	if m.AsOf != 0 {
		i = encodeVarintProtoRecord(dAtA, i, uint64(m.AsOf))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xd0
	}
	if fieldEnd != i {
		m.FieldMap.Put(42, i, fieldEnd, dAtA)
	}
	fieldEnd = i
	{
		size, err := m.Ref1.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		if size > 0 {
			i -= size
			i = encodeVarintProtoRecord(dAtA, i, uint64(size))
			i--
			dAtA[i] = 0x2
			i--
			dAtA[i] = 0xca
		}
	}
	if fieldEnd != i {
		m.FieldMap.Put(41, i, fieldEnd, dAtA)
	}
	fieldEnd = i
	{
		size, err := m.Str.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		if size > 0 {
			i -= size
			i = encodeVarintProtoRecord(dAtA, i, uint64(size))
			i--
			dAtA[i] = 0x2
			i--
			dAtA[i] = 0xc2
		}
	}
	if fieldEnd != i {
		m.FieldMap.Put(40, i, fieldEnd, dAtA)
	}
	fieldEnd = i
	{
		size, err := m.RecordBody.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		if size > 0 {
			i -= size
			i = encodeVarintProtoRecord(dAtA, i, uint64(size))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x9a
		}
	}
	if fieldEnd != i {
		m.FieldMap.Put(19, i, fieldEnd, dAtA)
	}
	if i < len(dAtA) {
		id := uint64(m.Polymorph)
		if id == 0 {
			id = 9999999991
		}
		i = encodeVarintProtoRecord(dAtA, i, uint64(id))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	m.FieldMap.PutMessage(i, len(dAtA), dAtA)
	return len(dAtA) - i, nil
}

func (m *RecordExample) InitFieldMap(reset bool) *github_com_insolar_assured_ledger_ledger_core_insproto.FieldMap {
	if reset || m.FieldMap == nil {
		m.FieldMap = &github_com_insolar_assured_ledger_ledger_core_insproto.FieldMap{}
	}
	return m.FieldMap
}

func (m *RecordEmbedded) Visit(ctx RecordVisitor) error {
	if err := ctx.RecReference(m, 41, &m.Ref1); err != nil {
		return err
	}
	return ctx.Record(m, 9999999992)
}

const TypeRecordEmbeddedPolymorphID = 9999999992

func (*RecordEmbedded) GetDefaultPolymorphID() uint64 {
	return 9999999992
}

func (m *RecordEmbedded) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	if n != size {
		panic("illegal state")
	}
	return dAtA[:n], nil
}

func (m *RecordEmbedded) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RecordEmbedded) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l, fieldEnd int
	_, _ = l, fieldEnd
	m.FieldMap.UnsetMap()
	fieldEnd = i
	if m.AsOf != 0 {
		i = encodeVarintProtoRecord(dAtA, i, uint64(m.AsOf))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xd0
	}
	if fieldEnd != i {
		m.FieldMap.Put(42, i, fieldEnd, dAtA)
	}
	fieldEnd = i
	{
		size, err := m.Ref1.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		if size > 0 {
			i -= size
			i = encodeVarintProtoRecord(dAtA, i, uint64(size))
			i--
			dAtA[i] = 0x2
			i--
			dAtA[i] = 0xca
		}
	}
	if fieldEnd != i {
		m.FieldMap.Put(41, i, fieldEnd, dAtA)
	}
	fieldEnd = i
	{
		size, err := m.Str.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		if size > 0 {
			i -= size
			i = encodeVarintProtoRecord(dAtA, i, uint64(size))
			i--
			dAtA[i] = 0x2
			i--
			dAtA[i] = 0xc2
		}
	}
	if fieldEnd != i {
		m.FieldMap.Put(40, i, fieldEnd, dAtA)
	}
	fieldEnd = i
	{
		size, err := m.RecordBody.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		if size > 0 {
			i -= size
			i = encodeVarintProtoRecord(dAtA, i, uint64(size))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x9a
		}
	}
	if fieldEnd != i {
		m.FieldMap.Put(19, i, fieldEnd, dAtA)
	}
	if i < len(dAtA) {
		id := uint64(m.Polymorph)
		if id == 0 {
			id = 9999999992
		}
		i = encodeVarintProtoRecord(dAtA, i, uint64(id))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	m.FieldMap.PutMessage(i, len(dAtA), dAtA)
	return len(dAtA) - i, nil
}

func (m *RecordEmbedded) InitFieldMap(reset bool) *github_com_insolar_assured_ledger_ledger_core_insproto.FieldMap {
	if reset || m.FieldMap == nil {
		m.FieldMap = &github_com_insolar_assured_ledger_ledger_core_insproto.FieldMap{}
	}
	return m.FieldMap
}

func encodeVarintProtoRecord(dAtA []byte, offset int, v uint64) int {
	offset -= sovProtoRecord(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}

func init() {
	RegisterRecordType(9999999991, "", (*RecordExample)(nil))
	RegisterRecordType(9999999992, "", (*RecordEmbedded)(nil))
}

func (m *RecordExample) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if l = m.RecordBody.ProtoSize(); l > 0 {
		n += 2 + l + sovProtoRecord(uint64(l))
	}
	if l = m.Str.ProtoSize(); l > 0 {
		n += 2 + l + sovProtoRecord(uint64(l))
	}
	if l = m.Ref1.ProtoSize(); l > 0 {
		n += 2 + l + sovProtoRecord(uint64(l))
	}
	if m.AsOf != 0 {
		n += 2 + sovProtoRecord(uint64(m.AsOf))
	}
	if n > 0 {
		id := uint64(m.Polymorph)
		if id == 0 {
			id = 9999999991
		}
		n += 2 + sovProtoRecord(id)
	}
	return n
}

func (m *RecordEmbedded) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if l = m.RecordBody.ProtoSize(); l > 0 {
		n += 2 + l + sovProtoRecord(uint64(l))
	}
	if l = m.Str.ProtoSize(); l > 0 {
		n += 2 + l + sovProtoRecord(uint64(l))
	}
	if l = m.Ref1.ProtoSize(); l > 0 {
		n += 2 + l + sovProtoRecord(uint64(l))
	}
	if m.AsOf != 0 {
		n += 2 + sovProtoRecord(uint64(m.AsOf))
	}
	if n > 0 {
		id := uint64(m.Polymorph)
		if id == 0 {
			id = 9999999992
		}
		n += 2 + sovProtoRecord(id)
	}
	return n
}

func sovProtoRecord(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozProtoRecord(x uint64) (n int) {
	return sovProtoRecord(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *RecordExample) Unmarshal(dAtA []byte) error {
	return m.UnmarshalWithUnknownCallback(dAtA, skipProtoRecord)
}
func (m *RecordExample) UnmarshalWithUnknownCallback(dAtA []byte, skipFn func([]byte) (int, error)) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtoRecord
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RecordExample: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RecordExample: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		m.FieldMap.UnsetMap()
		switch fieldNum {
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Polymorph", wireType)
			}
			m.Polymorph = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtoRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Polymorph |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if preIndex != iNdEx {
				m.FieldMap.Put(16, preIndex, iNdEx, dAtA)
			}
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecordBody", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtoRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtoRecord
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtoRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RecordBody.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			if preIndex != iNdEx {
				m.FieldMap.Put(19, preIndex, iNdEx, dAtA)
			}
		case 40:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Str", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtoRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtoRecord
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtoRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Str.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			if preIndex != iNdEx {
				m.FieldMap.Put(40, preIndex, iNdEx, dAtA)
			}
		case 41:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ref1", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtoRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtoRecord
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtoRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Ref1.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			if preIndex != iNdEx {
				m.FieldMap.Put(41, preIndex, iNdEx, dAtA)
			}
		case 42:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AsOf", wireType)
			}
			m.AsOf = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtoRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AsOf |= PulseNumber(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if preIndex != iNdEx {
				m.FieldMap.Put(42, preIndex, iNdEx, dAtA)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFn(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				l = iNdEx
				break
			}
			if skippy == 0 {
				if skippy, err = skipProtoRecord(dAtA[iNdEx:]); err != nil {
					return err
				}
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProtoRecord
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	m.FieldMap.PutMessage(0, iNdEx, dAtA)
	return nil
}
func (m *RecordEmbedded) Unmarshal(dAtA []byte) error {
	return m.UnmarshalWithUnknownCallback(dAtA, skipProtoRecord)
}
func (m *RecordEmbedded) UnmarshalWithUnknownCallback(dAtA []byte, skipFn func([]byte) (int, error)) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtoRecord
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RecordEmbedded: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RecordEmbedded: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		m.FieldMap.UnsetMap()
		switch fieldNum {
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Polymorph", wireType)
			}
			m.Polymorph = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtoRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Polymorph |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if preIndex != iNdEx {
				m.FieldMap.Put(16, preIndex, iNdEx, dAtA)
			}
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecordBody", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtoRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtoRecord
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtoRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RecordBody.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			if preIndex != iNdEx {
				m.FieldMap.Put(19, preIndex, iNdEx, dAtA)
			}
		case 40:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Str", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtoRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtoRecord
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtoRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Str.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			if preIndex != iNdEx {
				m.FieldMap.Put(40, preIndex, iNdEx, dAtA)
			}
		case 41:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ref1", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtoRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtoRecord
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtoRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Ref1.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			if preIndex != iNdEx {
				m.FieldMap.Put(41, preIndex, iNdEx, dAtA)
			}
		case 42:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AsOf", wireType)
			}
			m.AsOf = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtoRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AsOf |= PulseNumber(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if preIndex != iNdEx {
				m.FieldMap.Put(42, preIndex, iNdEx, dAtA)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFn(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				l = iNdEx
				break
			}
			if skippy == 0 {
				if skippy, err = skipProtoRecord(dAtA[iNdEx:]); err != nil {
					return err
				}
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProtoRecord
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	m.FieldMap.PutMessage(0, iNdEx, dAtA)
	return nil
}
func skipProtoRecord(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowProtoRecord
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProtoRecord
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProtoRecord
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthProtoRecord
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupProtoRecord
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthProtoRecord
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthProtoRecord        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowProtoRecord          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupProtoRecord = fmt.Errorf("proto: unexpected end of group")
	ErrExpectedBinaryMarkerProtoRecord = fmt.Errorf("proto: binary marker was expected")
)
