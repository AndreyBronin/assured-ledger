// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto_message.proto

package example

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	github_com_gogo_protobuf_proto "github.com/gogo/protobuf/proto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/insolar/assured-ledger/ledger-core/insproto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MessageExample struct {
	RecordExample `protobuf:"bytes,19,opt,name=Record,proto3,embedded=Record" json:"Record"`
	// Add here custom fields
	MsgParam uint64 `protobuf:"varint,1800,opt,name=MsgParam,proto3" json:"MsgParam"`
	MsgBytes Binary `protobuf:"bytes,1801,opt,name=MsgBytes,proto3" json:"MsgBytes"`
}

func (m *MessageExample) Reset()         { *m = MessageExample{} }
func (m *MessageExample) String() string { return proto.CompactTextString(m) }
func (*MessageExample) ProtoMessage()    {}
func (*MessageExample) Descriptor() ([]byte, []int) {
	return fileDescriptor_bab8c9eb1bb16167, []int{0}
}
func (m *MessageExample) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MessageExample) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *MessageExample) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MessageExample.Merge(m, src)
}
func (m *MessageExample) XXX_Size() int {
	return m.ProtoSize()
}
func (m *MessageExample) XXX_DiscardUnknown() {
	xxx_messageInfo_MessageExample.DiscardUnknown(m)
}

var xxx_messageInfo_MessageExample proto.InternalMessageInfo

func (m *MessageExample) GetMsgParam() uint64 {
	if m != nil {
		return m.MsgParam
	}
	return 0
}

func (m *MessageExample) GetMsgBytes() Binary {
	if m != nil {
		return m.MsgBytes
	}
	return Binary{}
}

func (m *MessageExample_Head) Reset()         { *m = MessageExample_Head{} }
func (m *MessageExample_Head) String() string { return proto.CompactTextString(m) }
func (*MessageExample_Head) ProtoMessage()    {}
func (*MessageExample_Head) Descriptor() ([]byte, []int) {
	return fileDescriptor_bab8c9eb1bb16167, []int{0, 0}
}
func (m *MessageExample_Head) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MessageExample_Head) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *MessageExample_Head) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MessageExample_Head.Merge(m, src)
}
func (m *MessageExample_Head) XXX_Size() int {
	return m.ProtoSize()
}
func (m *MessageExample_Head) XXX_DiscardUnknown() {
	xxx_messageInfo_MessageExample_Head.DiscardUnknown(m)
}

var xxx_messageInfo_MessageExample_Head proto.InternalMessageInfo

func (m *MessageExample_Alt) Reset()         { *m = MessageExample_Alt{} }
func (m *MessageExample_Alt) String() string { return proto.CompactTextString(m) }
func (*MessageExample_Alt) ProtoMessage()    {}
func (*MessageExample_Alt) Descriptor() ([]byte, []int) {
	return fileDescriptor_bab8c9eb1bb16167, []int{0, 1}
}
func (m *MessageExample_Alt) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MessageExample_Alt) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *MessageExample_Alt) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MessageExample_Alt.Merge(m, src)
}
func (m *MessageExample_Alt) XXX_Size() int {
	return m.ProtoSize()
}
func (m *MessageExample_Alt) XXX_DiscardUnknown() {
	xxx_messageInfo_MessageExample_Alt.DiscardUnknown(m)
}

var xxx_messageInfo_MessageExample_Alt proto.InternalMessageInfo

type MessageExample_Alt2 struct {
	MsgBytes Binary `protobuf:"bytes,1802,opt,name=MsgBytes,proto3" json:"MsgBytes"`
}

func (m *MessageExample_Alt2) Reset()         { *m = MessageExample_Alt2{} }
func (m *MessageExample_Alt2) String() string { return proto.CompactTextString(m) }
func (*MessageExample_Alt2) ProtoMessage()    {}
func (*MessageExample_Alt2) Descriptor() ([]byte, []int) {
	return fileDescriptor_bab8c9eb1bb16167, []int{0, 2}
}
func (m *MessageExample_Alt2) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MessageExample_Alt2) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *MessageExample_Alt2) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MessageExample_Alt2.Merge(m, src)
}
func (m *MessageExample_Alt2) XXX_Size() int {
	return m.ProtoSize()
}
func (m *MessageExample_Alt2) XXX_DiscardUnknown() {
	xxx_messageInfo_MessageExample_Alt2.DiscardUnknown(m)
}

var xxx_messageInfo_MessageExample_Alt2 proto.InternalMessageInfo

func (m *MessageExample_Alt2) GetMsgBytes() Binary {
	if m != nil {
		return m.MsgBytes
	}
	return Binary{}
}

type MessageExample2 struct {
	// Add here custom fields
	Field1  Any           `protobuf:"bytes,1800,opt,name=Field1,proto3" json:"Field1"`
	Field2  AnyLazy       `protobuf:"bytes,1801,opt,name=Field2,proto3" json:"Field2"`
	Field3  AnyRecord     `protobuf:"bytes,1802,opt,name=Field3,proto3" json:"Field3"`
	Field4  AnyRecordLazy `protobuf:"bytes,1804,opt,name=Field4,proto3" json:"Field4"`
	BinData Binary        `protobuf:"bytes,1805,opt,name=BinData,proto3" json:"BinData"`
	Local   Reference     `protobuf:"bytes,1806,opt,name=Local,proto3" json:"Local"`
	Global  Reference     `protobuf:"bytes,1807,opt,name=Global,proto3" json:"Global"`
}

func (m *MessageExample2) Reset()         { *m = MessageExample2{} }
func (m *MessageExample2) String() string { return proto.CompactTextString(m) }
func (*MessageExample2) ProtoMessage()    {}
func (*MessageExample2) Descriptor() ([]byte, []int) {
	return fileDescriptor_bab8c9eb1bb16167, []int{1}
}
func (m *MessageExample2) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MessageExample2) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *MessageExample2) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MessageExample2.Merge(m, src)
}
func (m *MessageExample2) XXX_Size() int {
	return m.ProtoSize()
}
func (m *MessageExample2) XXX_DiscardUnknown() {
	xxx_messageInfo_MessageExample2.DiscardUnknown(m)
}

var xxx_messageInfo_MessageExample2 proto.InternalMessageInfo

func (m *MessageExample2) GetField1() Any {
	if m != nil {
		return m.Field1
	}
	return Any{}
}

func (m *MessageExample2) GetField2() AnyLazy {
	if m != nil {
		return m.Field2
	}
	return AnyLazy{}
}

func (m *MessageExample2) GetField3() AnyRecord {
	if m != nil {
		return m.Field3
	}
	return AnyRecord{}
}

func (m *MessageExample2) GetField4() AnyRecordLazy {
	if m != nil {
		return m.Field4
	}
	return AnyRecordLazy{}
}

func (m *MessageExample2) GetBinData() Binary {
	if m != nil {
		return m.BinData
	}
	return Binary{}
}

func (m *MessageExample2) GetLocal() Reference {
	if m != nil {
		return m.Local
	}
	return Reference{}
}

func (m *MessageExample2) GetGlobal() Reference {
	if m != nil {
		return m.Global
	}
	return Reference{}
}

func init() {
	proto.RegisterType((*MessageExample)(nil), "example.MessageExample")
	proto.RegisterType((*MessageExample_Head)(nil), "example.MessageExample.Head")
	proto.RegisterType((*MessageExample_Alt)(nil), "example.MessageExample.Alt")
	proto.RegisterType((*MessageExample_Alt2)(nil), "example.MessageExample.Alt2")
	proto.RegisterType((*MessageExample2)(nil), "example.MessageExample2")
}

func init() { proto.RegisterFile("proto_message.proto", fileDescriptor_bab8c9eb1bb16167) }

var fileDescriptor_bab8c9eb1bb16167 = []byte{
	// 632 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x93, 0xcf, 0x6b, 0x13, 0x41,
	0x14, 0xc7, 0x77, 0x48, 0xda, 0xa6, 0xd3, 0x9a, 0x96, 0x49, 0x95, 0x25, 0x87, 0x9d, 0xd8, 0x8b,
	0x45, 0x6d, 0x62, 0x37, 0xf5, 0xd2, 0x93, 0x59, 0xac, 0x4a, 0x69, 0x6b, 0x09, 0xe2, 0x55, 0x26,
	0xc9, 0x74, 0x5d, 0xd8, 0xec, 0x96, 0x99, 0x0d, 0x58, 0xc1, 0xab, 0xd4, 0xe2, 0x2f, 0x14, 0x84,
	0xe6, 0x54, 0x6f, 0xc5, 0xa3, 0x7f, 0x81, 0xc7, 0x1e, 0x83, 0xa7, 0x3d, 0x48, 0xb1, 0x09, 0x88,
	0xe0, 0xa5, 0x78, 0xd2, 0x9c, 0x64, 0x67, 0x66, 0x43, 0x92, 0x82, 0x16, 0x3c, 0xed, 0xbe, 0xd9,
	0xcf, 0xf7, 0x7d, 0xdf, 0xbc, 0xf7, 0x16, 0x66, 0xb6, 0x98, 0x1f, 0xf8, 0x0f, 0xea, 0x94, 0x73,
	0x62, 0xd3, 0xbc, 0x88, 0xd0, 0x18, 0x7d, 0x44, 0xea, 0x5b, 0x2e, 0xcd, 0xce, 0xdb, 0x4e, 0xf0,
	0xb0, 0x51, 0xc9, 0x57, 0xfd, 0x7a, 0xc1, 0xf6, 0x6d, 0xbf, 0x20, 0xbe, 0x57, 0x1a, 0x9b, 0x22,
	0x12, 0x81, 0x78, 0x93, 0xba, 0xec, 0x8d, 0x3e, 0xdc, 0xf1, 0xb8, 0xef, 0x12, 0x56, 0x20, 0x9c,
	0x37, 0x18, 0xad, 0xcd, 0xbb, 0xb4, 0x66, 0x53, 0x56, 0x90, 0x8f, 0xf9, 0xaa, 0xcf, 0x68, 0x84,
	0xc8, 0x14, 0x8e, 0xc7, 0x55, 0x86, 0x71, 0x56, 0x8f, 0x5f, 0x91, 0xac, 0x8c, 0xd1, 0xaa, 0xcf,
	0x6a, 0xf2, 0x6c, 0xf6, 0x5b, 0x02, 0xa6, 0xd7, 0x64, 0xa9, 0xcb, 0xb2, 0x44, 0xb4, 0x0c, 0x47,
	0xcb, 0x02, 0xd1, 0x33, 0x39, 0x30, 0x37, 0x61, 0x5e, 0xc8, 0xab, 0xe2, 0xf3, 0xf2, 0x58, 0x71,
	0xd6, 0xf9, 0xc3, 0x23, 0xac, 0xb5, 0x8e, 0x30, 0xe8, 0xbe, 0xcb, 0x8d, 0xaf, 0x71, 0x5b, 0x7e,
	0x2d, 0x2b, 0x31, 0xba, 0x08, 0x53, 0x6b, 0xdc, 0xde, 0x20, 0x8c, 0xd4, 0xf5, 0x9d, 0x74, 0x0e,
	0xcc, 0x25, 0xad, 0x64, 0xa4, 0x28, 0xf7, 0x8e, 0x91, 0x29, 0x10, 0x6b, 0x3b, 0xa0, 0x5c, 0x7f,
	0x96, 0x16, 0x66, 0x53, 0x3d, 0x33, 0xcb, 0xf1, 0x08, 0xdb, 0xee, 0xd3, 0x08, 0x2e, 0x5b, 0x83,
	0xc9, 0x3b, 0x94, 0x9c, 0x25, 0xfd, 0x52, 0x71, 0x67, 0x1f, 0x6b, 0x07, 0xfb, 0x18, 0x9c, 0xbc,
	0xc7, 0xda, 0x41, 0x88, 0xc1, 0xa7, 0x10, 0xff, 0x7a, 0xfb, 0xe3, 0x4b, 0xe2, 0x73, 0x88, 0x47,
	0xee, 0x3b, 0xdc, 0x09, 0x7e, 0x86, 0x38, 0xbe, 0xbd, 0x88, 0x7d, 0xb6, 0x92, 0x4c, 0x81, 0xe9,
	0x99, 0xac, 0x03, 0x13, 0x25, 0x37, 0x40, 0x97, 0x60, 0xb2, 0xc4, 0xef, 0x6e, 0xea, 0x97, 0x73,
	0x60, 0xee, 0x9c, 0x95, 0x89, 0xf2, 0x77, 0x8f, 0xf0, 0xc4, 0x46, 0xc3, 0xe5, 0x74, 0xbd, 0x51,
	0xaf, 0x50, 0x56, 0x16, 0xc0, 0xff, 0x58, 0xad, 0xc3, 0x64, 0xc9, 0x0d, 0xcc, 0x81, 0x66, 0xec,
	0x9e, 0xad, 0x19, 0x4b, 0x93, 0xca, 0xea, 0x77, 0x64, 0x25, 0xf3, 0x2d, 0xa5, 0x62, 0x6b, 0x11,
	0x67, 0x56, 0x46, 0x52, 0x33, 0xd3, 0x3b, 0xe9, 0xd9, 0xa7, 0x09, 0x38, 0x35, 0x38, 0x68, 0x13,
	0x5d, 0x81, 0xa3, 0xb7, 0x1c, 0xea, 0xd6, 0x16, 0x64, 0x07, 0x27, 0xcc, 0xc9, 0x9e, 0x61, 0xc9,
	0x8b, 0xdd, 0x14, 0x82, 0x0a, 0x0a, 0x36, 0xe3, 0x51, 0x4d, 0xf7, 0xc3, 0xab, 0xe4, 0xf1, 0xa0,
	0xc0, 0x44, 0x0b, 0x4a, 0x50, 0x8c, 0xaf, 0x83, 0xfa, 0x05, 0x72, 0x4b, 0x06, 0x24, 0x45, 0x74,
	0x5d, 0x49, 0x16, 0xf5, 0xe7, 0xe9, 0xa1, 0xdd, 0xeb, 0x49, 0x4e, 0x39, 0x2d, 0xa2, 0x6b, 0x70,
	0xcc, 0x72, 0xbc, 0x9b, 0x24, 0x20, 0xfa, 0x8b, 0xbf, 0x76, 0x2e, 0xc6, 0x50, 0x01, 0x8e, 0xac,
	0xfa, 0x55, 0xe2, 0xea, 0x2f, 0x87, 0x4b, 0x2b, 0xd3, 0x4d, 0xca, 0xa8, 0x57, 0xa5, 0x4a, 0x22,
	0xb9, 0xe8, 0x32, 0xb7, 0x5d, 0xbf, 0x42, 0x5c, 0xfd, 0xd5, 0xbf, 0x14, 0x0a, 0x14, 0x83, 0xe8,
	0x9e, 0x1a, 0x84, 0xf5, 0xe4, 0xf0, 0xd8, 0x00, 0xad, 0x63, 0x43, 0x3b, 0x68, 0x1b, 0xe0, 0xb0,
	0x6d, 0x80, 0x56, 0xdb, 0x00, 0x61, 0xdb, 0x00, 0x5f, 0xdb, 0x86, 0xf6, 0xba, 0x63, 0x68, 0xfb,
	0x1d, 0x03, 0xb4, 0x3a, 0x86, 0x16, 0x76, 0x0c, 0xed, 0xfb, 0x1e, 0x06, 0x27, 0x7b, 0x18, 0x74,
	0xf7, 0xf0, 0x98, 0x9a, 0xde, 0x6e, 0x13, 0xa7, 0xa2, 0x3f, 0xe0, 0x6a, 0xc9, 0x0d, 0xde, 0x34,
	0xd5, 0x76, 0x7d, 0x68, 0xe2, 0x4c, 0x99, 0xda, 0x0e, 0x0f, 0x28, 0x53, 0xdc, 0xbd, 0xed, 0x2d,
	0xfa, 0xb1, 0x39, 0xbc, 0x74, 0x95, 0x51, 0xf1, 0xdf, 0x17, 0xff, 0x04, 0x00, 0x00, 0xff, 0xff,
	0x90, 0x07, 0xbb, 0x8e, 0xa7, 0x04, 0x00, 0x00,
}

func (this *MessageExample) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MessageExample)
	if !ok {
		that2, ok := that.(MessageExample)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.RecordExample.Equal(&that1.RecordExample) {
		return false
	}
	if this.MsgParam != that1.MsgParam {
		return false
	}
	if !this.MsgBytes.Equal(&that1.MsgBytes) {
		return false
	}
	return true
}
func (this *MessageExample_Head) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MessageExample_Head)
	if !ok {
		that2, ok := that.(MessageExample_Head)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.MsgParam != that1.MsgParam {
		return false
	}
	return true
}
func (this *MessageExample_Alt) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MessageExample_Alt)
	if !ok {
		that2, ok := that.(MessageExample_Alt)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.AsOf != that1.AsOf {
		return false
	}
	return true
}
func (this *MessageExample_Alt2) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MessageExample_Alt2)
	if !ok {
		that2, ok := that.(MessageExample_Alt2)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.MsgBytes.Equal(&that1.MsgBytes) {
		return false
	}
	return true
}
func (this *MessageExample2) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MessageExample2)
	if !ok {
		that2, ok := that.(MessageExample2)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Field1.Equal(&that1.Field1) {
		return false
	}
	if !this.Field2.Equal(&that1.Field2) {
		return false
	}
	if !this.Field3.Equal(&that1.Field3) {
		return false
	}
	if !this.Field4.Equal(&that1.Field4) {
		return false
	}
	if !this.BinData.Equal(&that1.BinData) {
		return false
	}
	if !this.Local.Equal(&that1.Local) {
		return false
	}
	if !this.Global.Equal(&that1.Global) {
		return false
	}
	return true
}

type MessageExample_HeadFace interface {
	Proto() github_com_gogo_protobuf_proto.Message
	GetMsgParam() uint64
}

func (this *MessageExample_Head) Proto() github_com_gogo_protobuf_proto.Message {
	return this
}

func (this *MessageExample_Head) TestProto() github_com_gogo_protobuf_proto.Message {
	return NewMessageExample_HeadFromFace(this)
}

func (this *MessageExample_Head) GetMsgParam() uint64 {
	return this.MsgParam
}

func NewMessageExample_HeadFromFace(that MessageExample_HeadFace) *MessageExample_Head {
	this := &MessageExample_Head{}
	this.MsgParam = that.GetMsgParam()
	return this
}

type MessageExample_AltFace interface {
	Proto() github_com_gogo_protobuf_proto.Message
	GetAsOf() PulseNumber
}

func (this *MessageExample_Alt) Proto() github_com_gogo_protobuf_proto.Message {
	return this
}

func (this *MessageExample_Alt) TestProto() github_com_gogo_protobuf_proto.Message {
	return NewMessageExample_AltFromFace(this)
}

func (this *MessageExample_Alt) GetAsOf() PulseNumber {
	return this.AsOf
}

func NewMessageExample_AltFromFace(that MessageExample_AltFace) *MessageExample_Alt {
	this := &MessageExample_Alt{}
	this.AsOf = that.GetAsOf()
	return this
}

type MessageExampleHead MessageExample_HeadFace
type MessageExample_Head MessageExample

func (m *MessageExample) AsHead() *MessageExample_Head {
	return (*MessageExample_Head)(m)
}

func (m *MessageExample) AsHeadFace() MessageExampleHead {
	if m == nil {
		return nil
	}
	return (*MessageExample_Head)(m)
}

func (m *MessageExample_Head) AsMessageExample() *MessageExample {
	return (*MessageExample)(m)
}

func (m *MessageExample_Head) AsProjectionBase() interface{} {
	if m == nil {
		return nil
	}
	return (*MessageExample)(m)
}

type MessageExampleAlt MessageExample_AltFace
type MessageExample_Alt MessageExample

func (m *MessageExample) AsAlt() *MessageExample_Alt {
	return (*MessageExample_Alt)(m)
}

func (m *MessageExample) AsAltFace() MessageExampleAlt {
	if m == nil {
		return nil
	}
	return (*MessageExample_Alt)(m)
}

func (m *MessageExample_Alt) AsMessageExample() *MessageExample {
	return (*MessageExample)(m)
}

func (m *MessageExample_Alt) AsProjectionBase() interface{} {
	if m == nil {
		return nil
	}
	return (*MessageExample)(m)
}

func (m *MessageExample) AsProjection(name string) interface{} {
	if m == nil {
		return nil
	}
	switch name {
	case "Head":
		return m.AsHead()
	case "Alt":
		return m.AsAlt()
	}
	return nil
}

func (m *MessageExample) Visit(ctx MessageVisitor) error {
	if err := ctx.MsgRecord(m, 19, &m.RecordExample); err != nil {
		return err
	}
	return ctx.Message(m, 999999992)
}

const TypeMessageExamplePolymorphID = 999999992

func (*MessageExample) GetDefaultPolymorphID() uint64 {
	return 999999992
}

func (m *MessageExample) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	if n != size {
		panic("illegal state")
	}
	return dAtA[:n], nil
}

func (m *MessageExample) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MessageExample) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l, fieldEnd int
	_, _ = l, fieldEnd
	{
		size, err := m.MsgBytes.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		if size > 0 {
			i -= size
			i = encodeVarintProtoMessage(dAtA, i, uint64(size))
			i--
			dAtA[i] = 0x70
			i--
			dAtA[i] = 0xca
		}
	}
	if m.MsgParam != 0 {
		i = encodeVarintProtoMessage(dAtA, i, uint64(m.MsgParam))
		i--
		dAtA[i] = 0x70
		i--
		dAtA[i] = 0xc0
	}
	{
		size, err := m.RecordExample.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		if size > 0 {
			i -= size
			i = encodeVarintProtoMessage(dAtA, i, uint64(size))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x9a
		}
	}
	i = encodeVarintProtoMessage(dAtA, i, uint64(999999992))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x80
	return len(dAtA) - i, nil
}

func (m *MessageExample_Head) Visit(ctx MessageVisitor) error {
	return ctx.Message(m, 999999992)
}

const TypeMessageExample_HeadPolymorphID = 999999992

func (*MessageExample_Head) GetDefaultPolymorphID() uint64 {
	return 999999992
}

func (m *MessageExample_Head) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	if n != size {
		panic("illegal state")
	}
	return dAtA[:n], nil
}

func (m *MessageExample_Head) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MessageExample_Head) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l, fieldEnd int
	_, _ = l, fieldEnd
	if m.MsgParam != 0 {
		i = encodeVarintProtoMessage(dAtA, i, uint64(m.MsgParam))
		i--
		dAtA[i] = 0x70
		i--
		dAtA[i] = 0xc0
	}
	i = encodeVarintProtoMessage(dAtA, i, uint64(999999992))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x80
	return len(dAtA) - i, nil
}

func (m *MessageExample_Alt) Visit(ctx MessageVisitor) error {
	return ctx.Message(m, 999999992)
}

const TypeMessageExample_AltPolymorphID = 999999992

func (*MessageExample_Alt) GetDefaultPolymorphID() uint64 {
	return 999999992
}

func (m *MessageExample_Alt) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	if n != size {
		panic("illegal state")
	}
	return dAtA[:n], nil
}

func (m *MessageExample_Alt) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MessageExample_Alt) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l, fieldEnd int
	_, _ = l, fieldEnd
	if m.AsOf != 0 {
		i = encodeVarintProtoMessage(dAtA, i, uint64(m.AsOf))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xd0
	}
	i = encodeVarintProtoMessage(dAtA, i, uint64(999999992))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x80
	return len(dAtA) - i, nil
}

func (m *MessageExample_Alt2) Visit(ctx MessageVisitor) error {
	return ctx.Message(m, 999999993)
}

const TypeMessageExample_Alt2PolymorphID = 999999993

func (*MessageExample_Alt2) GetDefaultPolymorphID() uint64 {
	return 999999993
}

func (m *MessageExample_Alt2) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	if n != size {
		panic("illegal state")
	}
	return dAtA[:n], nil
}

func (m *MessageExample_Alt2) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MessageExample_Alt2) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l, fieldEnd int
	_, _ = l, fieldEnd
	{
		size, err := m.MsgBytes.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		if size > 0 {
			i -= size
			i = encodeVarintProtoMessage(dAtA, i, uint64(size))
			i--
			dAtA[i] = 0x70
			i--
			dAtA[i] = 0xd2
		}
	}
	i = encodeVarintProtoMessage(dAtA, i, uint64(999999993))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x80
	return len(dAtA) - i, nil
}

func (m *MessageExample2) Visit(ctx MessageVisitor) error {
	return ctx.Message(m, 999999994)
}

const TypeMessageExample2PolymorphID = 999999994

func (*MessageExample2) GetDefaultPolymorphID() uint64 {
	return 999999994
}

func (m *MessageExample2) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	if n != size {
		panic("illegal state")
	}
	return dAtA[:n], nil
}

func (m *MessageExample2) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MessageExample2) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l, fieldEnd int
	_, _ = l, fieldEnd
	{
		size, err := m.Global.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		if size > 0 {
			i -= size
			i = encodeVarintProtoMessage(dAtA, i, uint64(size))
			i--
			dAtA[i] = 0x70
			i--
			dAtA[i] = 0xfa
		}
	}
	{
		size, err := m.Local.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		if size > 0 {
			i -= size
			i = encodeVarintProtoMessage(dAtA, i, uint64(size))
			i--
			dAtA[i] = 0x70
			i--
			dAtA[i] = 0xf2
		}
	}
	{
		size, err := m.BinData.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		if size > 0 {
			i -= size
			i = encodeVarintProtoMessage(dAtA, i, uint64(size))
			i--
			dAtA[i] = 0x70
			i--
			dAtA[i] = 0xea
		}
	}
	{
		size, err := m.Field4.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		if size > 0 {
			i -= size
			i = encodeVarintProtoMessage(dAtA, i, uint64(size))
			i--
			dAtA[i] = 0x70
			i--
			dAtA[i] = 0xe2
		}
	}
	{
		size, err := m.Field3.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		if size > 0 {
			i -= size
			i = encodeVarintProtoMessage(dAtA, i, uint64(size))
			i--
			dAtA[i] = 0x70
			i--
			dAtA[i] = 0xd2
		}
	}
	{
		size, err := m.Field2.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		if size > 0 {
			i -= size
			i = encodeVarintProtoMessage(dAtA, i, uint64(size))
			i--
			dAtA[i] = 0x70
			i--
			dAtA[i] = 0xca
		}
	}
	{
		size, err := m.Field1.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		if size > 0 {
			i -= size
			i = encodeVarintProtoMessage(dAtA, i, uint64(size))
			i--
			dAtA[i] = 0x70
			i--
			dAtA[i] = 0xc2
		}
	}
	i = encodeVarintProtoMessage(dAtA, i, uint64(999999994))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x80
	return len(dAtA) - i, nil
}

func encodeVarintProtoMessage(dAtA []byte, offset int, v uint64) int {
	offset -= sovProtoMessage(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}

func init() {
	RegisterMessageType(999999992, "", (*MessageExample)(nil))
	RegisterMessageType(999999992, "Head", (*MessageExample_Head)(nil))
	RegisterMessageType(999999992, "Alt", (*MessageExample_Alt)(nil))
	RegisterMessageType(999999993, "", (*MessageExample_Alt2)(nil))
	RegisterMessageType(999999994, "", (*MessageExample2)(nil))
}

func (m *MessageExample) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if l = m.RecordExample.ProtoSize(); l > 0 {
		n += 2 + l + sovProtoMessage(uint64(l))
	}
	if m.MsgParam != 0 {
		n += 2 + sovProtoMessage(uint64(m.MsgParam))
	}
	if l = m.MsgBytes.ProtoSize(); l > 0 {
		n += 2 + l + sovProtoMessage(uint64(l))
	}
	n += 2 + sovProtoMessage(999999992)
	return n
}

func (m *MessageExample_Head) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MsgParam != 0 {
		n += 2 + sovProtoMessage(uint64(m.MsgParam))
	}
	n += 2 + sovProtoMessage(999999992)
	return n
}

func (m *MessageExample_Alt) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AsOf != 0 {
		n += 2 + sovProtoMessage(uint64(m.AsOf))
	}
	n += 2 + sovProtoMessage(999999992)
	return n
}

func (m *MessageExample_Alt2) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if l = m.MsgBytes.ProtoSize(); l > 0 {
		n += 2 + l + sovProtoMessage(uint64(l))
	}
	n += 2 + sovProtoMessage(999999993)
	return n
}

func (m *MessageExample2) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if l = m.Field1.ProtoSize(); l > 0 {
		n += 2 + l + sovProtoMessage(uint64(l))
	}
	if l = m.Field2.ProtoSize(); l > 0 {
		n += 2 + l + sovProtoMessage(uint64(l))
	}
	if l = m.Field3.ProtoSize(); l > 0 {
		n += 2 + l + sovProtoMessage(uint64(l))
	}
	if l = m.Field4.ProtoSize(); l > 0 {
		n += 2 + l + sovProtoMessage(uint64(l))
	}
	if l = m.BinData.ProtoSize(); l > 0 {
		n += 2 + l + sovProtoMessage(uint64(l))
	}
	if l = m.Local.ProtoSize(); l > 0 {
		n += 2 + l + sovProtoMessage(uint64(l))
	}
	if l = m.Global.ProtoSize(); l > 0 {
		n += 2 + l + sovProtoMessage(uint64(l))
	}
	n += 2 + sovProtoMessage(999999994)
	return n
}

func sovProtoMessage(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozProtoMessage(x uint64) (n int) {
	return sovProtoMessage(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MessageExample) Unmarshal(dAtA []byte) error {
	return m.UnmarshalWithUnknownCallback(dAtA, skipProtoMessage)
}
func (m *MessageExample) UnmarshalWithUnknownCallback(dAtA []byte, skipFn func([]byte) (int, error)) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtoMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MessageExample: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MessageExample: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecordExample", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtoMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtoMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtoMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RecordExample.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 1800:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgParam", wireType)
			}
			m.MsgParam = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtoMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MsgParam |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 1801:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgBytes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtoMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtoMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtoMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MsgBytes.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFn(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				l = iNdEx
				break
			}
			if skippy == 0 {
				if skippy, err = skipProtoMessage(dAtA[iNdEx:]); err != nil {
					return err
				}
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProtoMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MessageExample_Head) Unmarshal(dAtA []byte) error {
	return m.UnmarshalWithUnknownCallback(dAtA, skipProtoMessage)
}
func (m *MessageExample_Head) UnmarshalWithUnknownCallback(dAtA []byte, skipFn func([]byte) (int, error)) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtoMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Head: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Head: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1800:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgParam", wireType)
			}
			m.MsgParam = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtoMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MsgParam |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFn(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				l = iNdEx
				break
			}
			if skippy == 0 {
				if skippy, err = skipProtoMessage(dAtA[iNdEx:]); err != nil {
					return err
				}
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProtoMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MessageExample_Alt) Unmarshal(dAtA []byte) error {
	return m.UnmarshalWithUnknownCallback(dAtA, skipProtoMessage)
}
func (m *MessageExample_Alt) UnmarshalWithUnknownCallback(dAtA []byte, skipFn func([]byte) (int, error)) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtoMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Alt: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Alt: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 42:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AsOf", wireType)
			}
			m.AsOf = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtoMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AsOf |= PulseNumber(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFn(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				l = iNdEx
				break
			}
			if skippy == 0 {
				if skippy, err = skipProtoMessage(dAtA[iNdEx:]); err != nil {
					return err
				}
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProtoMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MessageExample_Alt2) Unmarshal(dAtA []byte) error {
	return m.UnmarshalWithUnknownCallback(dAtA, skipProtoMessage)
}
func (m *MessageExample_Alt2) UnmarshalWithUnknownCallback(dAtA []byte, skipFn func([]byte) (int, error)) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtoMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Alt2: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Alt2: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1802:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgBytes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtoMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtoMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtoMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MsgBytes.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFn(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				l = iNdEx
				break
			}
			if skippy == 0 {
				if skippy, err = skipProtoMessage(dAtA[iNdEx:]); err != nil {
					return err
				}
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProtoMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MessageExample2) Unmarshal(dAtA []byte) error {
	return m.UnmarshalWithUnknownCallback(dAtA, skipProtoMessage)
}
func (m *MessageExample2) UnmarshalWithUnknownCallback(dAtA []byte, skipFn func([]byte) (int, error)) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtoMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MessageExample2: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MessageExample2: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1800:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Field1", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtoMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtoMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtoMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Field1.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 1801:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Field2", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtoMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtoMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtoMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Field2.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 1802:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Field3", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtoMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtoMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtoMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Field3.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 1804:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Field4", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtoMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtoMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtoMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Field4.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 1805:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BinData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtoMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtoMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtoMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BinData.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 1806:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Local", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtoMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtoMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtoMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Local.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 1807:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Global", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtoMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtoMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtoMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Global.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFn(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				l = iNdEx
				break
			}
			if skippy == 0 {
				if skippy, err = skipProtoMessage(dAtA[iNdEx:]); err != nil {
					return err
				}
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProtoMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipProtoMessage(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowProtoMessage
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProtoMessage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProtoMessage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthProtoMessage
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupProtoMessage
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthProtoMessage
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthProtoMessage        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowProtoMessage          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupProtoMessage = fmt.Errorf("proto: unexpected end of group")
	ErrExpectedBinaryMarkerProtoMessage = fmt.Errorf("proto: binary marker was expected")
)
