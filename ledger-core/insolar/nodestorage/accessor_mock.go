package nodestorage

// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

import (
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
	"github.com/insolar/assured-ledger/ledger-core/network/consensus/gcpv2/api/member"
	"github.com/insolar/assured-ledger/ledger-core/pulse"
	"github.com/insolar/assured-ledger/ledger-core/rms"
)

// AccessorMock implements Accessor
type AccessorMock struct {
	t minimock.Tester

	funcInRole          func(pulse pulse.Number, role member.PrimaryRole) (na1 []rms.Node, err error)
	inspectFuncInRole   func(pulse pulse.Number, role member.PrimaryRole)
	afterInRoleCounter  uint64
	beforeInRoleCounter uint64
	InRoleMock          mAccessorMockInRole
}

// NewAccessorMock returns a mock for Accessor
func NewAccessorMock(t minimock.Tester) *AccessorMock {
	m := &AccessorMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.InRoleMock = mAccessorMockInRole{mock: m}
	m.InRoleMock.callArgs = []*AccessorMockInRoleParams{}

	return m
}

type mAccessorMockInRole struct {
	mock               *AccessorMock
	defaultExpectation *AccessorMockInRoleExpectation
	expectations       []*AccessorMockInRoleExpectation

	callArgs []*AccessorMockInRoleParams
	mutex    sync.RWMutex
}

// AccessorMockInRoleExpectation specifies expectation struct of the Accessor.InRole
type AccessorMockInRoleExpectation struct {
	mock    *AccessorMock
	params  *AccessorMockInRoleParams
	results *AccessorMockInRoleResults
	Counter uint64
}

// AccessorMockInRoleParams contains parameters of the Accessor.InRole
type AccessorMockInRoleParams struct {
	pulse pulse.Number
	role  member.PrimaryRole
}

// AccessorMockInRoleResults contains results of the Accessor.InRole
type AccessorMockInRoleResults struct {
	na1 []rms.Node
	err error
}

// Expect sets up expected params for Accessor.InRole
func (mmInRole *mAccessorMockInRole) Expect(pulse pulse.Number, role member.PrimaryRole) *mAccessorMockInRole {
	if mmInRole.mock.funcInRole != nil {
		mmInRole.mock.t.Fatalf("AccessorMock.InRole mock is already set by Set")
	}

	if mmInRole.defaultExpectation == nil {
		mmInRole.defaultExpectation = &AccessorMockInRoleExpectation{}
	}

	mmInRole.defaultExpectation.params = &AccessorMockInRoleParams{pulse, role}
	for _, e := range mmInRole.expectations {
		if minimock.Equal(e.params, mmInRole.defaultExpectation.params) {
			mmInRole.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmInRole.defaultExpectation.params)
		}
	}

	return mmInRole
}

// Inspect accepts an inspector function that has same arguments as the Accessor.InRole
func (mmInRole *mAccessorMockInRole) Inspect(f func(pulse pulse.Number, role member.PrimaryRole)) *mAccessorMockInRole {
	if mmInRole.mock.inspectFuncInRole != nil {
		mmInRole.mock.t.Fatalf("Inspect function is already set for AccessorMock.InRole")
	}

	mmInRole.mock.inspectFuncInRole = f

	return mmInRole
}

// Return sets up results that will be returned by Accessor.InRole
func (mmInRole *mAccessorMockInRole) Return(na1 []rms.Node, err error) *AccessorMock {
	if mmInRole.mock.funcInRole != nil {
		mmInRole.mock.t.Fatalf("AccessorMock.InRole mock is already set by Set")
	}

	if mmInRole.defaultExpectation == nil {
		mmInRole.defaultExpectation = &AccessorMockInRoleExpectation{mock: mmInRole.mock}
	}
	mmInRole.defaultExpectation.results = &AccessorMockInRoleResults{na1, err}
	return mmInRole.mock
}

//Set uses given function f to mock the Accessor.InRole method
func (mmInRole *mAccessorMockInRole) Set(f func(pulse pulse.Number, role member.PrimaryRole) (na1 []rms.Node, err error)) *AccessorMock {
	if mmInRole.defaultExpectation != nil {
		mmInRole.mock.t.Fatalf("Default expectation is already set for the Accessor.InRole method")
	}

	if len(mmInRole.expectations) > 0 {
		mmInRole.mock.t.Fatalf("Some expectations are already set for the Accessor.InRole method")
	}

	mmInRole.mock.funcInRole = f
	return mmInRole.mock
}

// When sets expectation for the Accessor.InRole which will trigger the result defined by the following
// Then helper
func (mmInRole *mAccessorMockInRole) When(pulse pulse.Number, role member.PrimaryRole) *AccessorMockInRoleExpectation {
	if mmInRole.mock.funcInRole != nil {
		mmInRole.mock.t.Fatalf("AccessorMock.InRole mock is already set by Set")
	}

	expectation := &AccessorMockInRoleExpectation{
		mock:   mmInRole.mock,
		params: &AccessorMockInRoleParams{pulse, role},
	}
	mmInRole.expectations = append(mmInRole.expectations, expectation)
	return expectation
}

// Then sets up Accessor.InRole return parameters for the expectation previously defined by the When method
func (e *AccessorMockInRoleExpectation) Then(na1 []rms.Node, err error) *AccessorMock {
	e.results = &AccessorMockInRoleResults{na1, err}
	return e.mock
}

// InRole implements Accessor
func (mmInRole *AccessorMock) InRole(pulse pulse.Number, role member.PrimaryRole) (na1 []rms.Node, err error) {
	mm_atomic.AddUint64(&mmInRole.beforeInRoleCounter, 1)
	defer mm_atomic.AddUint64(&mmInRole.afterInRoleCounter, 1)

	if mmInRole.inspectFuncInRole != nil {
		mmInRole.inspectFuncInRole(pulse, role)
	}

	mm_params := &AccessorMockInRoleParams{pulse, role}

	// Record call args
	mmInRole.InRoleMock.mutex.Lock()
	mmInRole.InRoleMock.callArgs = append(mmInRole.InRoleMock.callArgs, mm_params)
	mmInRole.InRoleMock.mutex.Unlock()

	for _, e := range mmInRole.InRoleMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.na1, e.results.err
		}
	}

	if mmInRole.InRoleMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmInRole.InRoleMock.defaultExpectation.Counter, 1)
		mm_want := mmInRole.InRoleMock.defaultExpectation.params
		mm_got := AccessorMockInRoleParams{pulse, role}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmInRole.t.Errorf("AccessorMock.InRole got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmInRole.InRoleMock.defaultExpectation.results
		if mm_results == nil {
			mmInRole.t.Fatal("No results are set for the AccessorMock.InRole")
		}
		return (*mm_results).na1, (*mm_results).err
	}
	if mmInRole.funcInRole != nil {
		return mmInRole.funcInRole(pulse, role)
	}
	mmInRole.t.Fatalf("Unexpected call to AccessorMock.InRole. %v %v", pulse, role)
	return
}

// InRoleAfterCounter returns a count of finished AccessorMock.InRole invocations
func (mmInRole *AccessorMock) InRoleAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmInRole.afterInRoleCounter)
}

// InRoleBeforeCounter returns a count of AccessorMock.InRole invocations
func (mmInRole *AccessorMock) InRoleBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmInRole.beforeInRoleCounter)
}

// Calls returns a list of arguments used in each call to AccessorMock.InRole.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmInRole *mAccessorMockInRole) Calls() []*AccessorMockInRoleParams {
	mmInRole.mutex.RLock()

	argCopy := make([]*AccessorMockInRoleParams, len(mmInRole.callArgs))
	copy(argCopy, mmInRole.callArgs)

	mmInRole.mutex.RUnlock()

	return argCopy
}

// MinimockInRoleDone returns true if the count of the InRole invocations corresponds
// the number of defined expectations
func (m *AccessorMock) MinimockInRoleDone() bool {
	for _, e := range m.InRoleMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.InRoleMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterInRoleCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcInRole != nil && mm_atomic.LoadUint64(&m.afterInRoleCounter) < 1 {
		return false
	}
	return true
}

// MinimockInRoleInspect logs each unmet expectation
func (m *AccessorMock) MinimockInRoleInspect() {
	for _, e := range m.InRoleMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to AccessorMock.InRole with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.InRoleMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterInRoleCounter) < 1 {
		if m.InRoleMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to AccessorMock.InRole")
		} else {
			m.t.Errorf("Expected call to AccessorMock.InRole with params: %#v", *m.InRoleMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcInRole != nil && mm_atomic.LoadUint64(&m.afterInRoleCounter) < 1 {
		m.t.Error("Expected call to AccessorMock.InRole")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *AccessorMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockInRoleInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *AccessorMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *AccessorMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockInRoleDone()
}
