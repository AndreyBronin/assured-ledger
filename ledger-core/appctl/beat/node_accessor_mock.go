package beat

// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

import (
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
	"github.com/insolar/assured-ledger/ledger-core/network/consensus/gcpv2/api/census"
	"github.com/insolar/assured-ledger/ledger-core/network/consensus/gcpv2/api/profiles"
	"github.com/insolar/assured-ledger/ledger-core/pulse"
	"github.com/insolar/assured-ledger/ledger-core/reference"
)

// NodeAccessorMock implements NodeAccessor
type NodeAccessorMock struct {
	t minimock.Tester

	funcGetLocalNode          func() (a1 profiles.ActiveNode)
	inspectFuncGetLocalNode   func()
	afterGetLocalNodeCounter  uint64
	beforeGetLocalNodeCounter uint64
	GetLocalNodeMock          mNodeAccessorMockGetLocalNode

	funcGetOnlineNode          func(g1 reference.Global) (a1 profiles.ActiveNode)
	inspectFuncGetOnlineNode   func(g1 reference.Global)
	afterGetOnlineNodeCounter  uint64
	beforeGetOnlineNodeCounter uint64
	GetOnlineNodeMock          mNodeAccessorMockGetOnlineNode

	funcGetOnlineNodeByAddr          func(address string) (a1 profiles.ActiveNode)
	inspectFuncGetOnlineNodeByAddr   func(address string)
	afterGetOnlineNodeByAddrCounter  uint64
	beforeGetOnlineNodeByAddrCounter uint64
	GetOnlineNodeByAddrMock          mNodeAccessorMockGetOnlineNodeByAddr

	funcGetOnlineNodes          func() (aa1 []profiles.ActiveNode)
	inspectFuncGetOnlineNodes   func()
	afterGetOnlineNodesCounter  uint64
	beforeGetOnlineNodesCounter uint64
	GetOnlineNodesMock          mNodeAccessorMockGetOnlineNodes

	funcGetPopulation          func() (o1 census.OnlinePopulation)
	inspectFuncGetPopulation   func()
	afterGetPopulationCounter  uint64
	beforeGetPopulationCounter uint64
	GetPopulationMock          mNodeAccessorMockGetPopulation

	funcGetPoweredNode          func(g1 reference.Global) (a1 profiles.ActiveNode)
	inspectFuncGetPoweredNode   func(g1 reference.Global)
	afterGetPoweredNodeCounter  uint64
	beforeGetPoweredNodeCounter uint64
	GetPoweredNodeMock          mNodeAccessorMockGetPoweredNode

	funcGetPulseNumber          func() (n1 pulse.Number)
	inspectFuncGetPulseNumber   func()
	afterGetPulseNumberCounter  uint64
	beforeGetPulseNumberCounter uint64
	GetPulseNumberMock          mNodeAccessorMockGetPulseNumber
}

// NewNodeAccessorMock returns a mock for NodeAccessor
func NewNodeAccessorMock(t minimock.Tester) *NodeAccessorMock {
	m := &NodeAccessorMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.GetLocalNodeMock = mNodeAccessorMockGetLocalNode{mock: m}

	m.GetOnlineNodeMock = mNodeAccessorMockGetOnlineNode{mock: m}
	m.GetOnlineNodeMock.callArgs = []*NodeAccessorMockGetOnlineNodeParams{}

	m.GetOnlineNodeByAddrMock = mNodeAccessorMockGetOnlineNodeByAddr{mock: m}
	m.GetOnlineNodeByAddrMock.callArgs = []*NodeAccessorMockGetOnlineNodeByAddrParams{}

	m.GetOnlineNodesMock = mNodeAccessorMockGetOnlineNodes{mock: m}

	m.GetPopulationMock = mNodeAccessorMockGetPopulation{mock: m}

	m.GetPoweredNodeMock = mNodeAccessorMockGetPoweredNode{mock: m}
	m.GetPoweredNodeMock.callArgs = []*NodeAccessorMockGetPoweredNodeParams{}

	m.GetPulseNumberMock = mNodeAccessorMockGetPulseNumber{mock: m}

	return m
}

type mNodeAccessorMockGetLocalNode struct {
	mock               *NodeAccessorMock
	defaultExpectation *NodeAccessorMockGetLocalNodeExpectation
	expectations       []*NodeAccessorMockGetLocalNodeExpectation
}

// NodeAccessorMockGetLocalNodeExpectation specifies expectation struct of the NodeAccessor.GetLocalNode
type NodeAccessorMockGetLocalNodeExpectation struct {
	mock *NodeAccessorMock

	results *NodeAccessorMockGetLocalNodeResults
	Counter uint64
}

// NodeAccessorMockGetLocalNodeResults contains results of the NodeAccessor.GetLocalNode
type NodeAccessorMockGetLocalNodeResults struct {
	a1 profiles.ActiveNode
}

// Expect sets up expected params for NodeAccessor.GetLocalNode
func (mmGetLocalNode *mNodeAccessorMockGetLocalNode) Expect() *mNodeAccessorMockGetLocalNode {
	if mmGetLocalNode.mock.funcGetLocalNode != nil {
		mmGetLocalNode.mock.t.Fatalf("NodeAccessorMock.GetLocalNode mock is already set by Set")
	}

	if mmGetLocalNode.defaultExpectation == nil {
		mmGetLocalNode.defaultExpectation = &NodeAccessorMockGetLocalNodeExpectation{}
	}

	return mmGetLocalNode
}

// Inspect accepts an inspector function that has same arguments as the NodeAccessor.GetLocalNode
func (mmGetLocalNode *mNodeAccessorMockGetLocalNode) Inspect(f func()) *mNodeAccessorMockGetLocalNode {
	if mmGetLocalNode.mock.inspectFuncGetLocalNode != nil {
		mmGetLocalNode.mock.t.Fatalf("Inspect function is already set for NodeAccessorMock.GetLocalNode")
	}

	mmGetLocalNode.mock.inspectFuncGetLocalNode = f

	return mmGetLocalNode
}

// Return sets up results that will be returned by NodeAccessor.GetLocalNode
func (mmGetLocalNode *mNodeAccessorMockGetLocalNode) Return(a1 profiles.ActiveNode) *NodeAccessorMock {
	if mmGetLocalNode.mock.funcGetLocalNode != nil {
		mmGetLocalNode.mock.t.Fatalf("NodeAccessorMock.GetLocalNode mock is already set by Set")
	}

	if mmGetLocalNode.defaultExpectation == nil {
		mmGetLocalNode.defaultExpectation = &NodeAccessorMockGetLocalNodeExpectation{mock: mmGetLocalNode.mock}
	}
	mmGetLocalNode.defaultExpectation.results = &NodeAccessorMockGetLocalNodeResults{a1}
	return mmGetLocalNode.mock
}

//Set uses given function f to mock the NodeAccessor.GetLocalNode method
func (mmGetLocalNode *mNodeAccessorMockGetLocalNode) Set(f func() (a1 profiles.ActiveNode)) *NodeAccessorMock {
	if mmGetLocalNode.defaultExpectation != nil {
		mmGetLocalNode.mock.t.Fatalf("Default expectation is already set for the NodeAccessor.GetLocalNode method")
	}

	if len(mmGetLocalNode.expectations) > 0 {
		mmGetLocalNode.mock.t.Fatalf("Some expectations are already set for the NodeAccessor.GetLocalNode method")
	}

	mmGetLocalNode.mock.funcGetLocalNode = f
	return mmGetLocalNode.mock
}

// GetLocalNode implements NodeAccessor
func (mmGetLocalNode *NodeAccessorMock) GetLocalNode() (a1 profiles.ActiveNode) {
	mm_atomic.AddUint64(&mmGetLocalNode.beforeGetLocalNodeCounter, 1)
	defer mm_atomic.AddUint64(&mmGetLocalNode.afterGetLocalNodeCounter, 1)

	if mmGetLocalNode.inspectFuncGetLocalNode != nil {
		mmGetLocalNode.inspectFuncGetLocalNode()
	}

	if mmGetLocalNode.GetLocalNodeMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetLocalNode.GetLocalNodeMock.defaultExpectation.Counter, 1)

		mm_results := mmGetLocalNode.GetLocalNodeMock.defaultExpectation.results
		if mm_results == nil {
			mmGetLocalNode.t.Fatal("No results are set for the NodeAccessorMock.GetLocalNode")
		}
		return (*mm_results).a1
	}
	if mmGetLocalNode.funcGetLocalNode != nil {
		return mmGetLocalNode.funcGetLocalNode()
	}
	mmGetLocalNode.t.Fatalf("Unexpected call to NodeAccessorMock.GetLocalNode.")
	return
}

// GetLocalNodeAfterCounter returns a count of finished NodeAccessorMock.GetLocalNode invocations
func (mmGetLocalNode *NodeAccessorMock) GetLocalNodeAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetLocalNode.afterGetLocalNodeCounter)
}

// GetLocalNodeBeforeCounter returns a count of NodeAccessorMock.GetLocalNode invocations
func (mmGetLocalNode *NodeAccessorMock) GetLocalNodeBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetLocalNode.beforeGetLocalNodeCounter)
}

// MinimockGetLocalNodeDone returns true if the count of the GetLocalNode invocations corresponds
// the number of defined expectations
func (m *NodeAccessorMock) MinimockGetLocalNodeDone() bool {
	for _, e := range m.GetLocalNodeMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetLocalNodeMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetLocalNodeCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetLocalNode != nil && mm_atomic.LoadUint64(&m.afterGetLocalNodeCounter) < 1 {
		return false
	}
	return true
}

// MinimockGetLocalNodeInspect logs each unmet expectation
func (m *NodeAccessorMock) MinimockGetLocalNodeInspect() {
	for _, e := range m.GetLocalNodeMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Error("Expected call to NodeAccessorMock.GetLocalNode")
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetLocalNodeMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetLocalNodeCounter) < 1 {
		m.t.Error("Expected call to NodeAccessorMock.GetLocalNode")
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetLocalNode != nil && mm_atomic.LoadUint64(&m.afterGetLocalNodeCounter) < 1 {
		m.t.Error("Expected call to NodeAccessorMock.GetLocalNode")
	}
}

type mNodeAccessorMockGetOnlineNode struct {
	mock               *NodeAccessorMock
	defaultExpectation *NodeAccessorMockGetOnlineNodeExpectation
	expectations       []*NodeAccessorMockGetOnlineNodeExpectation

	callArgs []*NodeAccessorMockGetOnlineNodeParams
	mutex    sync.RWMutex
}

// NodeAccessorMockGetOnlineNodeExpectation specifies expectation struct of the NodeAccessor.GetOnlineNode
type NodeAccessorMockGetOnlineNodeExpectation struct {
	mock    *NodeAccessorMock
	params  *NodeAccessorMockGetOnlineNodeParams
	results *NodeAccessorMockGetOnlineNodeResults
	Counter uint64
}

// NodeAccessorMockGetOnlineNodeParams contains parameters of the NodeAccessor.GetOnlineNode
type NodeAccessorMockGetOnlineNodeParams struct {
	g1 reference.Global
}

// NodeAccessorMockGetOnlineNodeResults contains results of the NodeAccessor.GetOnlineNode
type NodeAccessorMockGetOnlineNodeResults struct {
	a1 profiles.ActiveNode
}

// Expect sets up expected params for NodeAccessor.GetOnlineNode
func (mmGetOnlineNode *mNodeAccessorMockGetOnlineNode) Expect(g1 reference.Global) *mNodeAccessorMockGetOnlineNode {
	if mmGetOnlineNode.mock.funcGetOnlineNode != nil {
		mmGetOnlineNode.mock.t.Fatalf("NodeAccessorMock.GetOnlineNode mock is already set by Set")
	}

	if mmGetOnlineNode.defaultExpectation == nil {
		mmGetOnlineNode.defaultExpectation = &NodeAccessorMockGetOnlineNodeExpectation{}
	}

	mmGetOnlineNode.defaultExpectation.params = &NodeAccessorMockGetOnlineNodeParams{g1}
	for _, e := range mmGetOnlineNode.expectations {
		if minimock.Equal(e.params, mmGetOnlineNode.defaultExpectation.params) {
			mmGetOnlineNode.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGetOnlineNode.defaultExpectation.params)
		}
	}

	return mmGetOnlineNode
}

// Inspect accepts an inspector function that has same arguments as the NodeAccessor.GetOnlineNode
func (mmGetOnlineNode *mNodeAccessorMockGetOnlineNode) Inspect(f func(g1 reference.Global)) *mNodeAccessorMockGetOnlineNode {
	if mmGetOnlineNode.mock.inspectFuncGetOnlineNode != nil {
		mmGetOnlineNode.mock.t.Fatalf("Inspect function is already set for NodeAccessorMock.GetOnlineNode")
	}

	mmGetOnlineNode.mock.inspectFuncGetOnlineNode = f

	return mmGetOnlineNode
}

// Return sets up results that will be returned by NodeAccessor.GetOnlineNode
func (mmGetOnlineNode *mNodeAccessorMockGetOnlineNode) Return(a1 profiles.ActiveNode) *NodeAccessorMock {
	if mmGetOnlineNode.mock.funcGetOnlineNode != nil {
		mmGetOnlineNode.mock.t.Fatalf("NodeAccessorMock.GetOnlineNode mock is already set by Set")
	}

	if mmGetOnlineNode.defaultExpectation == nil {
		mmGetOnlineNode.defaultExpectation = &NodeAccessorMockGetOnlineNodeExpectation{mock: mmGetOnlineNode.mock}
	}
	mmGetOnlineNode.defaultExpectation.results = &NodeAccessorMockGetOnlineNodeResults{a1}
	return mmGetOnlineNode.mock
}

//Set uses given function f to mock the NodeAccessor.GetOnlineNode method
func (mmGetOnlineNode *mNodeAccessorMockGetOnlineNode) Set(f func(g1 reference.Global) (a1 profiles.ActiveNode)) *NodeAccessorMock {
	if mmGetOnlineNode.defaultExpectation != nil {
		mmGetOnlineNode.mock.t.Fatalf("Default expectation is already set for the NodeAccessor.GetOnlineNode method")
	}

	if len(mmGetOnlineNode.expectations) > 0 {
		mmGetOnlineNode.mock.t.Fatalf("Some expectations are already set for the NodeAccessor.GetOnlineNode method")
	}

	mmGetOnlineNode.mock.funcGetOnlineNode = f
	return mmGetOnlineNode.mock
}

// When sets expectation for the NodeAccessor.GetOnlineNode which will trigger the result defined by the following
// Then helper
func (mmGetOnlineNode *mNodeAccessorMockGetOnlineNode) When(g1 reference.Global) *NodeAccessorMockGetOnlineNodeExpectation {
	if mmGetOnlineNode.mock.funcGetOnlineNode != nil {
		mmGetOnlineNode.mock.t.Fatalf("NodeAccessorMock.GetOnlineNode mock is already set by Set")
	}

	expectation := &NodeAccessorMockGetOnlineNodeExpectation{
		mock:   mmGetOnlineNode.mock,
		params: &NodeAccessorMockGetOnlineNodeParams{g1},
	}
	mmGetOnlineNode.expectations = append(mmGetOnlineNode.expectations, expectation)
	return expectation
}

// Then sets up NodeAccessor.GetOnlineNode return parameters for the expectation previously defined by the When method
func (e *NodeAccessorMockGetOnlineNodeExpectation) Then(a1 profiles.ActiveNode) *NodeAccessorMock {
	e.results = &NodeAccessorMockGetOnlineNodeResults{a1}
	return e.mock
}

// GetOnlineNode implements NodeAccessor
func (mmGetOnlineNode *NodeAccessorMock) GetOnlineNode(g1 reference.Global) (a1 profiles.ActiveNode) {
	mm_atomic.AddUint64(&mmGetOnlineNode.beforeGetOnlineNodeCounter, 1)
	defer mm_atomic.AddUint64(&mmGetOnlineNode.afterGetOnlineNodeCounter, 1)

	if mmGetOnlineNode.inspectFuncGetOnlineNode != nil {
		mmGetOnlineNode.inspectFuncGetOnlineNode(g1)
	}

	mm_params := &NodeAccessorMockGetOnlineNodeParams{g1}

	// Record call args
	mmGetOnlineNode.GetOnlineNodeMock.mutex.Lock()
	mmGetOnlineNode.GetOnlineNodeMock.callArgs = append(mmGetOnlineNode.GetOnlineNodeMock.callArgs, mm_params)
	mmGetOnlineNode.GetOnlineNodeMock.mutex.Unlock()

	for _, e := range mmGetOnlineNode.GetOnlineNodeMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.a1
		}
	}

	if mmGetOnlineNode.GetOnlineNodeMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetOnlineNode.GetOnlineNodeMock.defaultExpectation.Counter, 1)
		mm_want := mmGetOnlineNode.GetOnlineNodeMock.defaultExpectation.params
		mm_got := NodeAccessorMockGetOnlineNodeParams{g1}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGetOnlineNode.t.Errorf("NodeAccessorMock.GetOnlineNode got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGetOnlineNode.GetOnlineNodeMock.defaultExpectation.results
		if mm_results == nil {
			mmGetOnlineNode.t.Fatal("No results are set for the NodeAccessorMock.GetOnlineNode")
		}
		return (*mm_results).a1
	}
	if mmGetOnlineNode.funcGetOnlineNode != nil {
		return mmGetOnlineNode.funcGetOnlineNode(g1)
	}
	mmGetOnlineNode.t.Fatalf("Unexpected call to NodeAccessorMock.GetOnlineNode. %v", g1)
	return
}

// GetOnlineNodeAfterCounter returns a count of finished NodeAccessorMock.GetOnlineNode invocations
func (mmGetOnlineNode *NodeAccessorMock) GetOnlineNodeAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetOnlineNode.afterGetOnlineNodeCounter)
}

// GetOnlineNodeBeforeCounter returns a count of NodeAccessorMock.GetOnlineNode invocations
func (mmGetOnlineNode *NodeAccessorMock) GetOnlineNodeBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetOnlineNode.beforeGetOnlineNodeCounter)
}

// Calls returns a list of arguments used in each call to NodeAccessorMock.GetOnlineNode.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGetOnlineNode *mNodeAccessorMockGetOnlineNode) Calls() []*NodeAccessorMockGetOnlineNodeParams {
	mmGetOnlineNode.mutex.RLock()

	argCopy := make([]*NodeAccessorMockGetOnlineNodeParams, len(mmGetOnlineNode.callArgs))
	copy(argCopy, mmGetOnlineNode.callArgs)

	mmGetOnlineNode.mutex.RUnlock()

	return argCopy
}

// MinimockGetOnlineNodeDone returns true if the count of the GetOnlineNode invocations corresponds
// the number of defined expectations
func (m *NodeAccessorMock) MinimockGetOnlineNodeDone() bool {
	for _, e := range m.GetOnlineNodeMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetOnlineNodeMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetOnlineNodeCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetOnlineNode != nil && mm_atomic.LoadUint64(&m.afterGetOnlineNodeCounter) < 1 {
		return false
	}
	return true
}

// MinimockGetOnlineNodeInspect logs each unmet expectation
func (m *NodeAccessorMock) MinimockGetOnlineNodeInspect() {
	for _, e := range m.GetOnlineNodeMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to NodeAccessorMock.GetOnlineNode with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetOnlineNodeMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetOnlineNodeCounter) < 1 {
		if m.GetOnlineNodeMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to NodeAccessorMock.GetOnlineNode")
		} else {
			m.t.Errorf("Expected call to NodeAccessorMock.GetOnlineNode with params: %#v", *m.GetOnlineNodeMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetOnlineNode != nil && mm_atomic.LoadUint64(&m.afterGetOnlineNodeCounter) < 1 {
		m.t.Error("Expected call to NodeAccessorMock.GetOnlineNode")
	}
}

type mNodeAccessorMockGetOnlineNodeByAddr struct {
	mock               *NodeAccessorMock
	defaultExpectation *NodeAccessorMockGetOnlineNodeByAddrExpectation
	expectations       []*NodeAccessorMockGetOnlineNodeByAddrExpectation

	callArgs []*NodeAccessorMockGetOnlineNodeByAddrParams
	mutex    sync.RWMutex
}

// NodeAccessorMockGetOnlineNodeByAddrExpectation specifies expectation struct of the NodeAccessor.GetOnlineNodeByAddr
type NodeAccessorMockGetOnlineNodeByAddrExpectation struct {
	mock    *NodeAccessorMock
	params  *NodeAccessorMockGetOnlineNodeByAddrParams
	results *NodeAccessorMockGetOnlineNodeByAddrResults
	Counter uint64
}

// NodeAccessorMockGetOnlineNodeByAddrParams contains parameters of the NodeAccessor.GetOnlineNodeByAddr
type NodeAccessorMockGetOnlineNodeByAddrParams struct {
	address string
}

// NodeAccessorMockGetOnlineNodeByAddrResults contains results of the NodeAccessor.GetOnlineNodeByAddr
type NodeAccessorMockGetOnlineNodeByAddrResults struct {
	a1 profiles.ActiveNode
}

// Expect sets up expected params for NodeAccessor.GetOnlineNodeByAddr
func (mmGetOnlineNodeByAddr *mNodeAccessorMockGetOnlineNodeByAddr) Expect(address string) *mNodeAccessorMockGetOnlineNodeByAddr {
	if mmGetOnlineNodeByAddr.mock.funcGetOnlineNodeByAddr != nil {
		mmGetOnlineNodeByAddr.mock.t.Fatalf("NodeAccessorMock.GetOnlineNodeByAddr mock is already set by Set")
	}

	if mmGetOnlineNodeByAddr.defaultExpectation == nil {
		mmGetOnlineNodeByAddr.defaultExpectation = &NodeAccessorMockGetOnlineNodeByAddrExpectation{}
	}

	mmGetOnlineNodeByAddr.defaultExpectation.params = &NodeAccessorMockGetOnlineNodeByAddrParams{address}
	for _, e := range mmGetOnlineNodeByAddr.expectations {
		if minimock.Equal(e.params, mmGetOnlineNodeByAddr.defaultExpectation.params) {
			mmGetOnlineNodeByAddr.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGetOnlineNodeByAddr.defaultExpectation.params)
		}
	}

	return mmGetOnlineNodeByAddr
}

// Inspect accepts an inspector function that has same arguments as the NodeAccessor.GetOnlineNodeByAddr
func (mmGetOnlineNodeByAddr *mNodeAccessorMockGetOnlineNodeByAddr) Inspect(f func(address string)) *mNodeAccessorMockGetOnlineNodeByAddr {
	if mmGetOnlineNodeByAddr.mock.inspectFuncGetOnlineNodeByAddr != nil {
		mmGetOnlineNodeByAddr.mock.t.Fatalf("Inspect function is already set for NodeAccessorMock.GetOnlineNodeByAddr")
	}

	mmGetOnlineNodeByAddr.mock.inspectFuncGetOnlineNodeByAddr = f

	return mmGetOnlineNodeByAddr
}

// Return sets up results that will be returned by NodeAccessor.GetOnlineNodeByAddr
func (mmGetOnlineNodeByAddr *mNodeAccessorMockGetOnlineNodeByAddr) Return(a1 profiles.ActiveNode) *NodeAccessorMock {
	if mmGetOnlineNodeByAddr.mock.funcGetOnlineNodeByAddr != nil {
		mmGetOnlineNodeByAddr.mock.t.Fatalf("NodeAccessorMock.GetOnlineNodeByAddr mock is already set by Set")
	}

	if mmGetOnlineNodeByAddr.defaultExpectation == nil {
		mmGetOnlineNodeByAddr.defaultExpectation = &NodeAccessorMockGetOnlineNodeByAddrExpectation{mock: mmGetOnlineNodeByAddr.mock}
	}
	mmGetOnlineNodeByAddr.defaultExpectation.results = &NodeAccessorMockGetOnlineNodeByAddrResults{a1}
	return mmGetOnlineNodeByAddr.mock
}

//Set uses given function f to mock the NodeAccessor.GetOnlineNodeByAddr method
func (mmGetOnlineNodeByAddr *mNodeAccessorMockGetOnlineNodeByAddr) Set(f func(address string) (a1 profiles.ActiveNode)) *NodeAccessorMock {
	if mmGetOnlineNodeByAddr.defaultExpectation != nil {
		mmGetOnlineNodeByAddr.mock.t.Fatalf("Default expectation is already set for the NodeAccessor.GetOnlineNodeByAddr method")
	}

	if len(mmGetOnlineNodeByAddr.expectations) > 0 {
		mmGetOnlineNodeByAddr.mock.t.Fatalf("Some expectations are already set for the NodeAccessor.GetOnlineNodeByAddr method")
	}

	mmGetOnlineNodeByAddr.mock.funcGetOnlineNodeByAddr = f
	return mmGetOnlineNodeByAddr.mock
}

// When sets expectation for the NodeAccessor.GetOnlineNodeByAddr which will trigger the result defined by the following
// Then helper
func (mmGetOnlineNodeByAddr *mNodeAccessorMockGetOnlineNodeByAddr) When(address string) *NodeAccessorMockGetOnlineNodeByAddrExpectation {
	if mmGetOnlineNodeByAddr.mock.funcGetOnlineNodeByAddr != nil {
		mmGetOnlineNodeByAddr.mock.t.Fatalf("NodeAccessorMock.GetOnlineNodeByAddr mock is already set by Set")
	}

	expectation := &NodeAccessorMockGetOnlineNodeByAddrExpectation{
		mock:   mmGetOnlineNodeByAddr.mock,
		params: &NodeAccessorMockGetOnlineNodeByAddrParams{address},
	}
	mmGetOnlineNodeByAddr.expectations = append(mmGetOnlineNodeByAddr.expectations, expectation)
	return expectation
}

// Then sets up NodeAccessor.GetOnlineNodeByAddr return parameters for the expectation previously defined by the When method
func (e *NodeAccessorMockGetOnlineNodeByAddrExpectation) Then(a1 profiles.ActiveNode) *NodeAccessorMock {
	e.results = &NodeAccessorMockGetOnlineNodeByAddrResults{a1}
	return e.mock
}

// GetOnlineNodeByAddr implements NodeAccessor
func (mmGetOnlineNodeByAddr *NodeAccessorMock) GetOnlineNodeByAddr(address string) (a1 profiles.ActiveNode) {
	mm_atomic.AddUint64(&mmGetOnlineNodeByAddr.beforeGetOnlineNodeByAddrCounter, 1)
	defer mm_atomic.AddUint64(&mmGetOnlineNodeByAddr.afterGetOnlineNodeByAddrCounter, 1)

	if mmGetOnlineNodeByAddr.inspectFuncGetOnlineNodeByAddr != nil {
		mmGetOnlineNodeByAddr.inspectFuncGetOnlineNodeByAddr(address)
	}

	mm_params := &NodeAccessorMockGetOnlineNodeByAddrParams{address}

	// Record call args
	mmGetOnlineNodeByAddr.GetOnlineNodeByAddrMock.mutex.Lock()
	mmGetOnlineNodeByAddr.GetOnlineNodeByAddrMock.callArgs = append(mmGetOnlineNodeByAddr.GetOnlineNodeByAddrMock.callArgs, mm_params)
	mmGetOnlineNodeByAddr.GetOnlineNodeByAddrMock.mutex.Unlock()

	for _, e := range mmGetOnlineNodeByAddr.GetOnlineNodeByAddrMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.a1
		}
	}

	if mmGetOnlineNodeByAddr.GetOnlineNodeByAddrMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetOnlineNodeByAddr.GetOnlineNodeByAddrMock.defaultExpectation.Counter, 1)
		mm_want := mmGetOnlineNodeByAddr.GetOnlineNodeByAddrMock.defaultExpectation.params
		mm_got := NodeAccessorMockGetOnlineNodeByAddrParams{address}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGetOnlineNodeByAddr.t.Errorf("NodeAccessorMock.GetOnlineNodeByAddr got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGetOnlineNodeByAddr.GetOnlineNodeByAddrMock.defaultExpectation.results
		if mm_results == nil {
			mmGetOnlineNodeByAddr.t.Fatal("No results are set for the NodeAccessorMock.GetOnlineNodeByAddr")
		}
		return (*mm_results).a1
	}
	if mmGetOnlineNodeByAddr.funcGetOnlineNodeByAddr != nil {
		return mmGetOnlineNodeByAddr.funcGetOnlineNodeByAddr(address)
	}
	mmGetOnlineNodeByAddr.t.Fatalf("Unexpected call to NodeAccessorMock.GetOnlineNodeByAddr. %v", address)
	return
}

// GetOnlineNodeByAddrAfterCounter returns a count of finished NodeAccessorMock.GetOnlineNodeByAddr invocations
func (mmGetOnlineNodeByAddr *NodeAccessorMock) GetOnlineNodeByAddrAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetOnlineNodeByAddr.afterGetOnlineNodeByAddrCounter)
}

// GetOnlineNodeByAddrBeforeCounter returns a count of NodeAccessorMock.GetOnlineNodeByAddr invocations
func (mmGetOnlineNodeByAddr *NodeAccessorMock) GetOnlineNodeByAddrBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetOnlineNodeByAddr.beforeGetOnlineNodeByAddrCounter)
}

// Calls returns a list of arguments used in each call to NodeAccessorMock.GetOnlineNodeByAddr.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGetOnlineNodeByAddr *mNodeAccessorMockGetOnlineNodeByAddr) Calls() []*NodeAccessorMockGetOnlineNodeByAddrParams {
	mmGetOnlineNodeByAddr.mutex.RLock()

	argCopy := make([]*NodeAccessorMockGetOnlineNodeByAddrParams, len(mmGetOnlineNodeByAddr.callArgs))
	copy(argCopy, mmGetOnlineNodeByAddr.callArgs)

	mmGetOnlineNodeByAddr.mutex.RUnlock()

	return argCopy
}

// MinimockGetOnlineNodeByAddrDone returns true if the count of the GetOnlineNodeByAddr invocations corresponds
// the number of defined expectations
func (m *NodeAccessorMock) MinimockGetOnlineNodeByAddrDone() bool {
	for _, e := range m.GetOnlineNodeByAddrMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetOnlineNodeByAddrMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetOnlineNodeByAddrCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetOnlineNodeByAddr != nil && mm_atomic.LoadUint64(&m.afterGetOnlineNodeByAddrCounter) < 1 {
		return false
	}
	return true
}

// MinimockGetOnlineNodeByAddrInspect logs each unmet expectation
func (m *NodeAccessorMock) MinimockGetOnlineNodeByAddrInspect() {
	for _, e := range m.GetOnlineNodeByAddrMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to NodeAccessorMock.GetOnlineNodeByAddr with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetOnlineNodeByAddrMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetOnlineNodeByAddrCounter) < 1 {
		if m.GetOnlineNodeByAddrMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to NodeAccessorMock.GetOnlineNodeByAddr")
		} else {
			m.t.Errorf("Expected call to NodeAccessorMock.GetOnlineNodeByAddr with params: %#v", *m.GetOnlineNodeByAddrMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetOnlineNodeByAddr != nil && mm_atomic.LoadUint64(&m.afterGetOnlineNodeByAddrCounter) < 1 {
		m.t.Error("Expected call to NodeAccessorMock.GetOnlineNodeByAddr")
	}
}

type mNodeAccessorMockGetOnlineNodes struct {
	mock               *NodeAccessorMock
	defaultExpectation *NodeAccessorMockGetOnlineNodesExpectation
	expectations       []*NodeAccessorMockGetOnlineNodesExpectation
}

// NodeAccessorMockGetOnlineNodesExpectation specifies expectation struct of the NodeAccessor.GetOnlineNodes
type NodeAccessorMockGetOnlineNodesExpectation struct {
	mock *NodeAccessorMock

	results *NodeAccessorMockGetOnlineNodesResults
	Counter uint64
}

// NodeAccessorMockGetOnlineNodesResults contains results of the NodeAccessor.GetOnlineNodes
type NodeAccessorMockGetOnlineNodesResults struct {
	aa1 []profiles.ActiveNode
}

// Expect sets up expected params for NodeAccessor.GetOnlineNodes
func (mmGetOnlineNodes *mNodeAccessorMockGetOnlineNodes) Expect() *mNodeAccessorMockGetOnlineNodes {
	if mmGetOnlineNodes.mock.funcGetOnlineNodes != nil {
		mmGetOnlineNodes.mock.t.Fatalf("NodeAccessorMock.GetOnlineNodes mock is already set by Set")
	}

	if mmGetOnlineNodes.defaultExpectation == nil {
		mmGetOnlineNodes.defaultExpectation = &NodeAccessorMockGetOnlineNodesExpectation{}
	}

	return mmGetOnlineNodes
}

// Inspect accepts an inspector function that has same arguments as the NodeAccessor.GetOnlineNodes
func (mmGetOnlineNodes *mNodeAccessorMockGetOnlineNodes) Inspect(f func()) *mNodeAccessorMockGetOnlineNodes {
	if mmGetOnlineNodes.mock.inspectFuncGetOnlineNodes != nil {
		mmGetOnlineNodes.mock.t.Fatalf("Inspect function is already set for NodeAccessorMock.GetOnlineNodes")
	}

	mmGetOnlineNodes.mock.inspectFuncGetOnlineNodes = f

	return mmGetOnlineNodes
}

// Return sets up results that will be returned by NodeAccessor.GetOnlineNodes
func (mmGetOnlineNodes *mNodeAccessorMockGetOnlineNodes) Return(aa1 []profiles.ActiveNode) *NodeAccessorMock {
	if mmGetOnlineNodes.mock.funcGetOnlineNodes != nil {
		mmGetOnlineNodes.mock.t.Fatalf("NodeAccessorMock.GetOnlineNodes mock is already set by Set")
	}

	if mmGetOnlineNodes.defaultExpectation == nil {
		mmGetOnlineNodes.defaultExpectation = &NodeAccessorMockGetOnlineNodesExpectation{mock: mmGetOnlineNodes.mock}
	}
	mmGetOnlineNodes.defaultExpectation.results = &NodeAccessorMockGetOnlineNodesResults{aa1}
	return mmGetOnlineNodes.mock
}

//Set uses given function f to mock the NodeAccessor.GetOnlineNodes method
func (mmGetOnlineNodes *mNodeAccessorMockGetOnlineNodes) Set(f func() (aa1 []profiles.ActiveNode)) *NodeAccessorMock {
	if mmGetOnlineNodes.defaultExpectation != nil {
		mmGetOnlineNodes.mock.t.Fatalf("Default expectation is already set for the NodeAccessor.GetOnlineNodes method")
	}

	if len(mmGetOnlineNodes.expectations) > 0 {
		mmGetOnlineNodes.mock.t.Fatalf("Some expectations are already set for the NodeAccessor.GetOnlineNodes method")
	}

	mmGetOnlineNodes.mock.funcGetOnlineNodes = f
	return mmGetOnlineNodes.mock
}

// GetOnlineNodes implements NodeAccessor
func (mmGetOnlineNodes *NodeAccessorMock) GetOnlineNodes() (aa1 []profiles.ActiveNode) {
	mm_atomic.AddUint64(&mmGetOnlineNodes.beforeGetOnlineNodesCounter, 1)
	defer mm_atomic.AddUint64(&mmGetOnlineNodes.afterGetOnlineNodesCounter, 1)

	if mmGetOnlineNodes.inspectFuncGetOnlineNodes != nil {
		mmGetOnlineNodes.inspectFuncGetOnlineNodes()
	}

	if mmGetOnlineNodes.GetOnlineNodesMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetOnlineNodes.GetOnlineNodesMock.defaultExpectation.Counter, 1)

		mm_results := mmGetOnlineNodes.GetOnlineNodesMock.defaultExpectation.results
		if mm_results == nil {
			mmGetOnlineNodes.t.Fatal("No results are set for the NodeAccessorMock.GetOnlineNodes")
		}
		return (*mm_results).aa1
	}
	if mmGetOnlineNodes.funcGetOnlineNodes != nil {
		return mmGetOnlineNodes.funcGetOnlineNodes()
	}
	mmGetOnlineNodes.t.Fatalf("Unexpected call to NodeAccessorMock.GetOnlineNodes.")
	return
}

// GetOnlineNodesAfterCounter returns a count of finished NodeAccessorMock.GetOnlineNodes invocations
func (mmGetOnlineNodes *NodeAccessorMock) GetOnlineNodesAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetOnlineNodes.afterGetOnlineNodesCounter)
}

// GetOnlineNodesBeforeCounter returns a count of NodeAccessorMock.GetOnlineNodes invocations
func (mmGetOnlineNodes *NodeAccessorMock) GetOnlineNodesBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetOnlineNodes.beforeGetOnlineNodesCounter)
}

// MinimockGetOnlineNodesDone returns true if the count of the GetOnlineNodes invocations corresponds
// the number of defined expectations
func (m *NodeAccessorMock) MinimockGetOnlineNodesDone() bool {
	for _, e := range m.GetOnlineNodesMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetOnlineNodesMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetOnlineNodesCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetOnlineNodes != nil && mm_atomic.LoadUint64(&m.afterGetOnlineNodesCounter) < 1 {
		return false
	}
	return true
}

// MinimockGetOnlineNodesInspect logs each unmet expectation
func (m *NodeAccessorMock) MinimockGetOnlineNodesInspect() {
	for _, e := range m.GetOnlineNodesMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Error("Expected call to NodeAccessorMock.GetOnlineNodes")
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetOnlineNodesMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetOnlineNodesCounter) < 1 {
		m.t.Error("Expected call to NodeAccessorMock.GetOnlineNodes")
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetOnlineNodes != nil && mm_atomic.LoadUint64(&m.afterGetOnlineNodesCounter) < 1 {
		m.t.Error("Expected call to NodeAccessorMock.GetOnlineNodes")
	}
}

type mNodeAccessorMockGetPopulation struct {
	mock               *NodeAccessorMock
	defaultExpectation *NodeAccessorMockGetPopulationExpectation
	expectations       []*NodeAccessorMockGetPopulationExpectation
}

// NodeAccessorMockGetPopulationExpectation specifies expectation struct of the NodeAccessor.GetPopulation
type NodeAccessorMockGetPopulationExpectation struct {
	mock *NodeAccessorMock

	results *NodeAccessorMockGetPopulationResults
	Counter uint64
}

// NodeAccessorMockGetPopulationResults contains results of the NodeAccessor.GetPopulation
type NodeAccessorMockGetPopulationResults struct {
	o1 census.OnlinePopulation
}

// Expect sets up expected params for NodeAccessor.GetPopulation
func (mmGetPopulation *mNodeAccessorMockGetPopulation) Expect() *mNodeAccessorMockGetPopulation {
	if mmGetPopulation.mock.funcGetPopulation != nil {
		mmGetPopulation.mock.t.Fatalf("NodeAccessorMock.GetPopulation mock is already set by Set")
	}

	if mmGetPopulation.defaultExpectation == nil {
		mmGetPopulation.defaultExpectation = &NodeAccessorMockGetPopulationExpectation{}
	}

	return mmGetPopulation
}

// Inspect accepts an inspector function that has same arguments as the NodeAccessor.GetPopulation
func (mmGetPopulation *mNodeAccessorMockGetPopulation) Inspect(f func()) *mNodeAccessorMockGetPopulation {
	if mmGetPopulation.mock.inspectFuncGetPopulation != nil {
		mmGetPopulation.mock.t.Fatalf("Inspect function is already set for NodeAccessorMock.GetPopulation")
	}

	mmGetPopulation.mock.inspectFuncGetPopulation = f

	return mmGetPopulation
}

// Return sets up results that will be returned by NodeAccessor.GetPopulation
func (mmGetPopulation *mNodeAccessorMockGetPopulation) Return(o1 census.OnlinePopulation) *NodeAccessorMock {
	if mmGetPopulation.mock.funcGetPopulation != nil {
		mmGetPopulation.mock.t.Fatalf("NodeAccessorMock.GetPopulation mock is already set by Set")
	}

	if mmGetPopulation.defaultExpectation == nil {
		mmGetPopulation.defaultExpectation = &NodeAccessorMockGetPopulationExpectation{mock: mmGetPopulation.mock}
	}
	mmGetPopulation.defaultExpectation.results = &NodeAccessorMockGetPopulationResults{o1}
	return mmGetPopulation.mock
}

//Set uses given function f to mock the NodeAccessor.GetPopulation method
func (mmGetPopulation *mNodeAccessorMockGetPopulation) Set(f func() (o1 census.OnlinePopulation)) *NodeAccessorMock {
	if mmGetPopulation.defaultExpectation != nil {
		mmGetPopulation.mock.t.Fatalf("Default expectation is already set for the NodeAccessor.GetPopulation method")
	}

	if len(mmGetPopulation.expectations) > 0 {
		mmGetPopulation.mock.t.Fatalf("Some expectations are already set for the NodeAccessor.GetPopulation method")
	}

	mmGetPopulation.mock.funcGetPopulation = f
	return mmGetPopulation.mock
}

// GetPopulation implements NodeAccessor
func (mmGetPopulation *NodeAccessorMock) GetPopulation() (o1 census.OnlinePopulation) {
	mm_atomic.AddUint64(&mmGetPopulation.beforeGetPopulationCounter, 1)
	defer mm_atomic.AddUint64(&mmGetPopulation.afterGetPopulationCounter, 1)

	if mmGetPopulation.inspectFuncGetPopulation != nil {
		mmGetPopulation.inspectFuncGetPopulation()
	}

	if mmGetPopulation.GetPopulationMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetPopulation.GetPopulationMock.defaultExpectation.Counter, 1)

		mm_results := mmGetPopulation.GetPopulationMock.defaultExpectation.results
		if mm_results == nil {
			mmGetPopulation.t.Fatal("No results are set for the NodeAccessorMock.GetPopulation")
		}
		return (*mm_results).o1
	}
	if mmGetPopulation.funcGetPopulation != nil {
		return mmGetPopulation.funcGetPopulation()
	}
	mmGetPopulation.t.Fatalf("Unexpected call to NodeAccessorMock.GetPopulation.")
	return
}

// GetPopulationAfterCounter returns a count of finished NodeAccessorMock.GetPopulation invocations
func (mmGetPopulation *NodeAccessorMock) GetPopulationAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetPopulation.afterGetPopulationCounter)
}

// GetPopulationBeforeCounter returns a count of NodeAccessorMock.GetPopulation invocations
func (mmGetPopulation *NodeAccessorMock) GetPopulationBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetPopulation.beforeGetPopulationCounter)
}

// MinimockGetPopulationDone returns true if the count of the GetPopulation invocations corresponds
// the number of defined expectations
func (m *NodeAccessorMock) MinimockGetPopulationDone() bool {
	for _, e := range m.GetPopulationMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetPopulationMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetPopulationCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetPopulation != nil && mm_atomic.LoadUint64(&m.afterGetPopulationCounter) < 1 {
		return false
	}
	return true
}

// MinimockGetPopulationInspect logs each unmet expectation
func (m *NodeAccessorMock) MinimockGetPopulationInspect() {
	for _, e := range m.GetPopulationMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Error("Expected call to NodeAccessorMock.GetPopulation")
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetPopulationMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetPopulationCounter) < 1 {
		m.t.Error("Expected call to NodeAccessorMock.GetPopulation")
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetPopulation != nil && mm_atomic.LoadUint64(&m.afterGetPopulationCounter) < 1 {
		m.t.Error("Expected call to NodeAccessorMock.GetPopulation")
	}
}

type mNodeAccessorMockGetPoweredNode struct {
	mock               *NodeAccessorMock
	defaultExpectation *NodeAccessorMockGetPoweredNodeExpectation
	expectations       []*NodeAccessorMockGetPoweredNodeExpectation

	callArgs []*NodeAccessorMockGetPoweredNodeParams
	mutex    sync.RWMutex
}

// NodeAccessorMockGetPoweredNodeExpectation specifies expectation struct of the NodeAccessor.GetPoweredNode
type NodeAccessorMockGetPoweredNodeExpectation struct {
	mock    *NodeAccessorMock
	params  *NodeAccessorMockGetPoweredNodeParams
	results *NodeAccessorMockGetPoweredNodeResults
	Counter uint64
}

// NodeAccessorMockGetPoweredNodeParams contains parameters of the NodeAccessor.GetPoweredNode
type NodeAccessorMockGetPoweredNodeParams struct {
	g1 reference.Global
}

// NodeAccessorMockGetPoweredNodeResults contains results of the NodeAccessor.GetPoweredNode
type NodeAccessorMockGetPoweredNodeResults struct {
	a1 profiles.ActiveNode
}

// Expect sets up expected params for NodeAccessor.GetPoweredNode
func (mmGetPoweredNode *mNodeAccessorMockGetPoweredNode) Expect(g1 reference.Global) *mNodeAccessorMockGetPoweredNode {
	if mmGetPoweredNode.mock.funcGetPoweredNode != nil {
		mmGetPoweredNode.mock.t.Fatalf("NodeAccessorMock.GetPoweredNode mock is already set by Set")
	}

	if mmGetPoweredNode.defaultExpectation == nil {
		mmGetPoweredNode.defaultExpectation = &NodeAccessorMockGetPoweredNodeExpectation{}
	}

	mmGetPoweredNode.defaultExpectation.params = &NodeAccessorMockGetPoweredNodeParams{g1}
	for _, e := range mmGetPoweredNode.expectations {
		if minimock.Equal(e.params, mmGetPoweredNode.defaultExpectation.params) {
			mmGetPoweredNode.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGetPoweredNode.defaultExpectation.params)
		}
	}

	return mmGetPoweredNode
}

// Inspect accepts an inspector function that has same arguments as the NodeAccessor.GetPoweredNode
func (mmGetPoweredNode *mNodeAccessorMockGetPoweredNode) Inspect(f func(g1 reference.Global)) *mNodeAccessorMockGetPoweredNode {
	if mmGetPoweredNode.mock.inspectFuncGetPoweredNode != nil {
		mmGetPoweredNode.mock.t.Fatalf("Inspect function is already set for NodeAccessorMock.GetPoweredNode")
	}

	mmGetPoweredNode.mock.inspectFuncGetPoweredNode = f

	return mmGetPoweredNode
}

// Return sets up results that will be returned by NodeAccessor.GetPoweredNode
func (mmGetPoweredNode *mNodeAccessorMockGetPoweredNode) Return(a1 profiles.ActiveNode) *NodeAccessorMock {
	if mmGetPoweredNode.mock.funcGetPoweredNode != nil {
		mmGetPoweredNode.mock.t.Fatalf("NodeAccessorMock.GetPoweredNode mock is already set by Set")
	}

	if mmGetPoweredNode.defaultExpectation == nil {
		mmGetPoweredNode.defaultExpectation = &NodeAccessorMockGetPoweredNodeExpectation{mock: mmGetPoweredNode.mock}
	}
	mmGetPoweredNode.defaultExpectation.results = &NodeAccessorMockGetPoweredNodeResults{a1}
	return mmGetPoweredNode.mock
}

//Set uses given function f to mock the NodeAccessor.GetPoweredNode method
func (mmGetPoweredNode *mNodeAccessorMockGetPoweredNode) Set(f func(g1 reference.Global) (a1 profiles.ActiveNode)) *NodeAccessorMock {
	if mmGetPoweredNode.defaultExpectation != nil {
		mmGetPoweredNode.mock.t.Fatalf("Default expectation is already set for the NodeAccessor.GetPoweredNode method")
	}

	if len(mmGetPoweredNode.expectations) > 0 {
		mmGetPoweredNode.mock.t.Fatalf("Some expectations are already set for the NodeAccessor.GetPoweredNode method")
	}

	mmGetPoweredNode.mock.funcGetPoweredNode = f
	return mmGetPoweredNode.mock
}

// When sets expectation for the NodeAccessor.GetPoweredNode which will trigger the result defined by the following
// Then helper
func (mmGetPoweredNode *mNodeAccessorMockGetPoweredNode) When(g1 reference.Global) *NodeAccessorMockGetPoweredNodeExpectation {
	if mmGetPoweredNode.mock.funcGetPoweredNode != nil {
		mmGetPoweredNode.mock.t.Fatalf("NodeAccessorMock.GetPoweredNode mock is already set by Set")
	}

	expectation := &NodeAccessorMockGetPoweredNodeExpectation{
		mock:   mmGetPoweredNode.mock,
		params: &NodeAccessorMockGetPoweredNodeParams{g1},
	}
	mmGetPoweredNode.expectations = append(mmGetPoweredNode.expectations, expectation)
	return expectation
}

// Then sets up NodeAccessor.GetPoweredNode return parameters for the expectation previously defined by the When method
func (e *NodeAccessorMockGetPoweredNodeExpectation) Then(a1 profiles.ActiveNode) *NodeAccessorMock {
	e.results = &NodeAccessorMockGetPoweredNodeResults{a1}
	return e.mock
}

// GetPoweredNode implements NodeAccessor
func (mmGetPoweredNode *NodeAccessorMock) GetPoweredNode(g1 reference.Global) (a1 profiles.ActiveNode) {
	mm_atomic.AddUint64(&mmGetPoweredNode.beforeGetPoweredNodeCounter, 1)
	defer mm_atomic.AddUint64(&mmGetPoweredNode.afterGetPoweredNodeCounter, 1)

	if mmGetPoweredNode.inspectFuncGetPoweredNode != nil {
		mmGetPoweredNode.inspectFuncGetPoweredNode(g1)
	}

	mm_params := &NodeAccessorMockGetPoweredNodeParams{g1}

	// Record call args
	mmGetPoweredNode.GetPoweredNodeMock.mutex.Lock()
	mmGetPoweredNode.GetPoweredNodeMock.callArgs = append(mmGetPoweredNode.GetPoweredNodeMock.callArgs, mm_params)
	mmGetPoweredNode.GetPoweredNodeMock.mutex.Unlock()

	for _, e := range mmGetPoweredNode.GetPoweredNodeMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.a1
		}
	}

	if mmGetPoweredNode.GetPoweredNodeMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetPoweredNode.GetPoweredNodeMock.defaultExpectation.Counter, 1)
		mm_want := mmGetPoweredNode.GetPoweredNodeMock.defaultExpectation.params
		mm_got := NodeAccessorMockGetPoweredNodeParams{g1}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGetPoweredNode.t.Errorf("NodeAccessorMock.GetPoweredNode got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGetPoweredNode.GetPoweredNodeMock.defaultExpectation.results
		if mm_results == nil {
			mmGetPoweredNode.t.Fatal("No results are set for the NodeAccessorMock.GetPoweredNode")
		}
		return (*mm_results).a1
	}
	if mmGetPoweredNode.funcGetPoweredNode != nil {
		return mmGetPoweredNode.funcGetPoweredNode(g1)
	}
	mmGetPoweredNode.t.Fatalf("Unexpected call to NodeAccessorMock.GetPoweredNode. %v", g1)
	return
}

// GetPoweredNodeAfterCounter returns a count of finished NodeAccessorMock.GetPoweredNode invocations
func (mmGetPoweredNode *NodeAccessorMock) GetPoweredNodeAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetPoweredNode.afterGetPoweredNodeCounter)
}

// GetPoweredNodeBeforeCounter returns a count of NodeAccessorMock.GetPoweredNode invocations
func (mmGetPoweredNode *NodeAccessorMock) GetPoweredNodeBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetPoweredNode.beforeGetPoweredNodeCounter)
}

// Calls returns a list of arguments used in each call to NodeAccessorMock.GetPoweredNode.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGetPoweredNode *mNodeAccessorMockGetPoweredNode) Calls() []*NodeAccessorMockGetPoweredNodeParams {
	mmGetPoweredNode.mutex.RLock()

	argCopy := make([]*NodeAccessorMockGetPoweredNodeParams, len(mmGetPoweredNode.callArgs))
	copy(argCopy, mmGetPoweredNode.callArgs)

	mmGetPoweredNode.mutex.RUnlock()

	return argCopy
}

// MinimockGetPoweredNodeDone returns true if the count of the GetPoweredNode invocations corresponds
// the number of defined expectations
func (m *NodeAccessorMock) MinimockGetPoweredNodeDone() bool {
	for _, e := range m.GetPoweredNodeMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetPoweredNodeMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetPoweredNodeCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetPoweredNode != nil && mm_atomic.LoadUint64(&m.afterGetPoweredNodeCounter) < 1 {
		return false
	}
	return true
}

// MinimockGetPoweredNodeInspect logs each unmet expectation
func (m *NodeAccessorMock) MinimockGetPoweredNodeInspect() {
	for _, e := range m.GetPoweredNodeMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to NodeAccessorMock.GetPoweredNode with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetPoweredNodeMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetPoweredNodeCounter) < 1 {
		if m.GetPoweredNodeMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to NodeAccessorMock.GetPoweredNode")
		} else {
			m.t.Errorf("Expected call to NodeAccessorMock.GetPoweredNode with params: %#v", *m.GetPoweredNodeMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetPoweredNode != nil && mm_atomic.LoadUint64(&m.afterGetPoweredNodeCounter) < 1 {
		m.t.Error("Expected call to NodeAccessorMock.GetPoweredNode")
	}
}

type mNodeAccessorMockGetPulseNumber struct {
	mock               *NodeAccessorMock
	defaultExpectation *NodeAccessorMockGetPulseNumberExpectation
	expectations       []*NodeAccessorMockGetPulseNumberExpectation
}

// NodeAccessorMockGetPulseNumberExpectation specifies expectation struct of the NodeAccessor.GetPulseNumber
type NodeAccessorMockGetPulseNumberExpectation struct {
	mock *NodeAccessorMock

	results *NodeAccessorMockGetPulseNumberResults
	Counter uint64
}

// NodeAccessorMockGetPulseNumberResults contains results of the NodeAccessor.GetPulseNumber
type NodeAccessorMockGetPulseNumberResults struct {
	n1 pulse.Number
}

// Expect sets up expected params for NodeAccessor.GetPulseNumber
func (mmGetPulseNumber *mNodeAccessorMockGetPulseNumber) Expect() *mNodeAccessorMockGetPulseNumber {
	if mmGetPulseNumber.mock.funcGetPulseNumber != nil {
		mmGetPulseNumber.mock.t.Fatalf("NodeAccessorMock.GetPulseNumber mock is already set by Set")
	}

	if mmGetPulseNumber.defaultExpectation == nil {
		mmGetPulseNumber.defaultExpectation = &NodeAccessorMockGetPulseNumberExpectation{}
	}

	return mmGetPulseNumber
}

// Inspect accepts an inspector function that has same arguments as the NodeAccessor.GetPulseNumber
func (mmGetPulseNumber *mNodeAccessorMockGetPulseNumber) Inspect(f func()) *mNodeAccessorMockGetPulseNumber {
	if mmGetPulseNumber.mock.inspectFuncGetPulseNumber != nil {
		mmGetPulseNumber.mock.t.Fatalf("Inspect function is already set for NodeAccessorMock.GetPulseNumber")
	}

	mmGetPulseNumber.mock.inspectFuncGetPulseNumber = f

	return mmGetPulseNumber
}

// Return sets up results that will be returned by NodeAccessor.GetPulseNumber
func (mmGetPulseNumber *mNodeAccessorMockGetPulseNumber) Return(n1 pulse.Number) *NodeAccessorMock {
	if mmGetPulseNumber.mock.funcGetPulseNumber != nil {
		mmGetPulseNumber.mock.t.Fatalf("NodeAccessorMock.GetPulseNumber mock is already set by Set")
	}

	if mmGetPulseNumber.defaultExpectation == nil {
		mmGetPulseNumber.defaultExpectation = &NodeAccessorMockGetPulseNumberExpectation{mock: mmGetPulseNumber.mock}
	}
	mmGetPulseNumber.defaultExpectation.results = &NodeAccessorMockGetPulseNumberResults{n1}
	return mmGetPulseNumber.mock
}

//Set uses given function f to mock the NodeAccessor.GetPulseNumber method
func (mmGetPulseNumber *mNodeAccessorMockGetPulseNumber) Set(f func() (n1 pulse.Number)) *NodeAccessorMock {
	if mmGetPulseNumber.defaultExpectation != nil {
		mmGetPulseNumber.mock.t.Fatalf("Default expectation is already set for the NodeAccessor.GetPulseNumber method")
	}

	if len(mmGetPulseNumber.expectations) > 0 {
		mmGetPulseNumber.mock.t.Fatalf("Some expectations are already set for the NodeAccessor.GetPulseNumber method")
	}

	mmGetPulseNumber.mock.funcGetPulseNumber = f
	return mmGetPulseNumber.mock
}

// GetPulseNumber implements NodeAccessor
func (mmGetPulseNumber *NodeAccessorMock) GetPulseNumber() (n1 pulse.Number) {
	mm_atomic.AddUint64(&mmGetPulseNumber.beforeGetPulseNumberCounter, 1)
	defer mm_atomic.AddUint64(&mmGetPulseNumber.afterGetPulseNumberCounter, 1)

	if mmGetPulseNumber.inspectFuncGetPulseNumber != nil {
		mmGetPulseNumber.inspectFuncGetPulseNumber()
	}

	if mmGetPulseNumber.GetPulseNumberMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetPulseNumber.GetPulseNumberMock.defaultExpectation.Counter, 1)

		mm_results := mmGetPulseNumber.GetPulseNumberMock.defaultExpectation.results
		if mm_results == nil {
			mmGetPulseNumber.t.Fatal("No results are set for the NodeAccessorMock.GetPulseNumber")
		}
		return (*mm_results).n1
	}
	if mmGetPulseNumber.funcGetPulseNumber != nil {
		return mmGetPulseNumber.funcGetPulseNumber()
	}
	mmGetPulseNumber.t.Fatalf("Unexpected call to NodeAccessorMock.GetPulseNumber.")
	return
}

// GetPulseNumberAfterCounter returns a count of finished NodeAccessorMock.GetPulseNumber invocations
func (mmGetPulseNumber *NodeAccessorMock) GetPulseNumberAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetPulseNumber.afterGetPulseNumberCounter)
}

// GetPulseNumberBeforeCounter returns a count of NodeAccessorMock.GetPulseNumber invocations
func (mmGetPulseNumber *NodeAccessorMock) GetPulseNumberBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetPulseNumber.beforeGetPulseNumberCounter)
}

// MinimockGetPulseNumberDone returns true if the count of the GetPulseNumber invocations corresponds
// the number of defined expectations
func (m *NodeAccessorMock) MinimockGetPulseNumberDone() bool {
	for _, e := range m.GetPulseNumberMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetPulseNumberMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetPulseNumberCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetPulseNumber != nil && mm_atomic.LoadUint64(&m.afterGetPulseNumberCounter) < 1 {
		return false
	}
	return true
}

// MinimockGetPulseNumberInspect logs each unmet expectation
func (m *NodeAccessorMock) MinimockGetPulseNumberInspect() {
	for _, e := range m.GetPulseNumberMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Error("Expected call to NodeAccessorMock.GetPulseNumber")
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetPulseNumberMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetPulseNumberCounter) < 1 {
		m.t.Error("Expected call to NodeAccessorMock.GetPulseNumber")
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetPulseNumber != nil && mm_atomic.LoadUint64(&m.afterGetPulseNumberCounter) < 1 {
		m.t.Error("Expected call to NodeAccessorMock.GetPulseNumber")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *NodeAccessorMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockGetLocalNodeInspect()

		m.MinimockGetOnlineNodeInspect()

		m.MinimockGetOnlineNodeByAddrInspect()

		m.MinimockGetOnlineNodesInspect()

		m.MinimockGetPopulationInspect()

		m.MinimockGetPoweredNodeInspect()

		m.MinimockGetPulseNumberInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *NodeAccessorMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *NodeAccessorMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockGetLocalNodeDone() &&
		m.MinimockGetOnlineNodeDone() &&
		m.MinimockGetOnlineNodeByAddrDone() &&
		m.MinimockGetOnlineNodesDone() &&
		m.MinimockGetPopulationDone() &&
		m.MinimockGetPoweredNodeDone() &&
		m.MinimockGetPulseNumberDone()
}
